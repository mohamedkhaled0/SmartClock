
NTI_SMART_CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00005a6c  00005b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000574  008001a2  008001a2  00005c42  2**0
                  ALLOC
  3 .stab         000071e8  00000000  00000000  00005c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003e76  00000000  00000000  0000ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00010ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00010e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00010ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00013003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00015168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  000155c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_1>
       8:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_2>
       c:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_10>
      2c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <main>
      8a:	0c 94 34 2d 	jmp	0x5a68	; 0x5a68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 2a 	jmp	0x548c	; 0x548c <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 62 2a 	jmp	0x54c4	; 0x54c4 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e7 56       	subi	r30, 0x67	; 103
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <TIMER0_VidInit>:

void (*TIMER0_CallBack)(void);

/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
     ca8:	a3 e5       	ldi	r26, 0x53	; 83
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 7f       	andi	r24, 0xF8	; 248
     cb4:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     cb6:	a3 e5       	ldi	r26, 0x53	; 83
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e3 e5       	ldi	r30, 0x53	; 83
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	84 60       	ori	r24, 0x04	; 4
     cc2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,0);

#elif TIMER0_SET_MODE == TIMER0_CTC_MODE
	CLR_BIT(TCCR0,6);
     cc4:	a3 e5       	ldi	r26, 0x53	; 83
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7b       	andi	r24, 0xBF	; 191
     cd0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     cd2:	a3 e5       	ldi	r26, 0x53	; 83
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e3 e5       	ldi	r30, 0x53	; 83
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	88 60       	ori	r24, 0x08	; 8
     cde:	8c 93       	st	X, r24
#if TIMER0_SET_CTC_INTERRUPT == TIMER0_CTC_INTERRUPT_ENABLED
	SET_BIT(TIMSK,1);
     ce0:	a9 e5       	ldi	r26, 0x59	; 89
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e9 e5       	ldi	r30, 0x59	; 89
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
#else
#error "TIMER0 CTC Interrupt Mode is not valid..."
#endif
#if TIMER0_SET_OC0_PIN_MODE == TIMER0_OC0_PIN_DISCONNECTED
	CLR_BIT(TCCR0,5);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 7d       	andi	r24, 0xDF	; 223
     cfa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     cfc:	a3 e5       	ldi	r26, 0x53	; 83
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e3 e5       	ldi	r30, 0x53	; 83
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
     d1c:	e2 e5       	ldi	r30, 0x52	; 82
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	80 83       	st	Z, r24
}
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
     d38:	ec e5       	ldi	r30, 0x5C	; 92
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	80 83       	st	Z, r24
}
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <TIMER0_VidOVF_SetCallBack+0x6>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	90 93 01 07 	sts	0x0701, r25
     d5e:	80 93 00 07 	sts	0x0700, r24
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <TIMER0_VidCTC_SetCallBack>:
void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <TIMER0_VidCTC_SetCallBack+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	90 93 01 07 	sts	0x0701, r25
     d82:	80 93 00 07 	sts	0x0700, r24
}
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     dba:	e0 91 00 07 	lds	r30, 0x0700
     dbe:	f0 91 01 07 	lds	r31, 0x0701
     dc2:	09 95       	icall
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     e14:	e0 91 00 07 	lds	r30, 0x0700
     e18:	f0 91 01 07 	lds	r31, 0x0701
     e1c:	09 95       	icall
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     e4c:	af e5       	ldi	r26, 0x5F	; 95
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ef e5       	ldi	r30, 0x5F	; 95
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	8c 93       	st	X, r24
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     e68:	af e5       	ldi	r26, 0x5F	; 95
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ef e5       	ldi	r30, 0x5F	; 95
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 77       	andi	r24, 0x7F	; 127
     e74:	8c 93       	st	X, r24
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <MEXTI0_VidInit>:
void(*CallBackFunction0)(void);
void(*CallBackFunction1)(void);
void(*CallBackFunction2)(void);

/* EXTI0 Initialization*/
void MEXTI0_VidInit(void){
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/
#if MEXTI_SET_SENSE_CONTROL==MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,0);
     e84:	a5 e5       	ldi	r26, 0x55	; 85
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e5       	ldi	r30, 0x55	; 85
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     e92:	a5 e5       	ldi	r26, 0x55	; 85
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e5 e5       	ldi	r30, 0x55	; 85
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8d 7f       	andi	r24, 0xFD	; 253
     e9e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
     ea0:	ab e5       	ldi	r26, 0x5B	; 91
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e5       	ldi	r30, 0x5B	; 91
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	8c 93       	st	X, r24
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/
#if MEXTI_SET_SENSE_CONTROL==MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,2);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8b 7f       	andi	r24, 0xFB	; 251
     ec8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
     eca:	a5 e5       	ldi	r26, 0x55	; 85
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e5       	ldi	r30, 0x55	; 85
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
     ed8:	ab e5       	ldi	r26, 0x5B	; 91
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e5       	ldi	r30, 0x5B	; 91
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24
}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR,6);
#else

#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
     ef4:	ab e5       	ldi	r26, 0x5B	; 91
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e5       	ldi	r30, 0x5B	; 91
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	8c 93       	st	X, r24
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <EXTI0_Set_CallBackFunction>:




void EXTI0_Set_CallBackFunction(void (*Copy_VidCallBackFunction)(void))
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <EXTI0_Set_CallBackFunction+0x6>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunction0=Copy_VidCallBackFunction;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	90 93 03 07 	sts	0x0703, r25
     f1e:	80 93 02 07 	sts	0x0702, r24
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <__vector_1>:
void __vector_1(void)       __attribute__((signal));
void __vector_1(void)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	CallBackFunction0();
     f56:	e0 91 02 07 	lds	r30, 0x0702
     f5a:	f0 91 03 07 	lds	r31, 0x0703
     f5e:	09 95       	icall
	//HLED_VidLed_Toggle(&LED1);
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <EXTI1_Set_CallBackFunction>:

void EXTI1_Set_CallBackFunction(void (*Copy_VidCallBackFunction)(void))
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <EXTI1_Set_CallBackFunction+0x6>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunction1=Copy_VidCallBackFunction;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	90 93 07 07 	sts	0x0707, r25
     f9c:	80 93 06 07 	sts	0x0706, r24
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <__vector_2>:
void __vector_2(void)       __attribute__((signal));
void __vector_2(void)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	CallBackFunction1();
     fd4:	e0 91 06 07 	lds	r30, 0x0706
     fd8:	f0 91 07 07 	lds	r31, 0x0707
     fdc:	09 95       	icall
	//HLED_VidLed_Toggle(&LED1);
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <EXTI2_Set_CallBackFunction>:


void EXTI2_Set_CallBackFunction(void (*Copy_VidCallBackFunction)(void))
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <EXTI2_Set_CallBackFunction+0x6>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunction2=Copy_VidCallBackFunction;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	90 93 05 07 	sts	0x0705, r25
    101a:	80 93 04 07 	sts	0x0704, r24
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <__vector_3>:
void __vector_3(void)       __attribute__((signal));
void __vector_3(void)
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	CallBackFunction2();
    1052:	e0 91 04 07 	lds	r30, 0x0704
    1056:	f0 91 05 07 	lds	r31, 0x0705
    105a:	09 95       	icall
	//HLED_VidLed_Toggle(&LED1);
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <MEXTI_VidSenseControl>:




void MEXTI_VidSenseControl(unsigned char Copy_u8EXTI_ID ,unsigned char  Copy_u8SenseControl){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <MEXTI_VidSenseControl+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <MEXTI_VidSenseControl+0x8>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3c 83       	std	Y+4, r19	; 0x04
    109a:	2b 83       	std	Y+3, r18	; 0x03
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <MEXTI_VidSenseControl+0x26>
    10a6:	54 c0       	rjmp	.+168    	; 0x1150 <MEXTI_VidSenseControl+0xce>
    10a8:	2b 81       	ldd	r18, Y+3	; 0x03
    10aa:	3c 81       	ldd	r19, Y+4	; 0x04
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <MEXTI_VidSenseControl+0x32>
    10b2:	96 c0       	rjmp	.+300    	; 0x11e0 <MEXTI_VidSenseControl+0x15e>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <MEXTI_VidSenseControl+0x3c>
    10bc:	a6 c0       	rjmp	.+332    	; 0x120a <MEXTI_VidSenseControl+0x188>

	case EXTI0:

		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 23       	and	r24, r24
    10c2:	79 f4       	brne	.+30     	; 0x10e2 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    10c4:	a5 e5       	ldi	r26, 0x55	; 85
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e5       	ldi	r30, 0x55	; 85
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8e 7f       	andi	r24, 0xFE	; 254
    10d0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    10d2:	a5 e5       	ldi	r26, 0x55	; 85
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e5       	ldi	r30, 0x55	; 85
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8d 7f       	andi	r24, 0xFD	; 253
    10de:	8c 93       	st	X, r24
    10e0:	94 c0       	rjmp	.+296    	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	79 f4       	brne	.+30     	; 0x1106 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    10e8:	a5 e5       	ldi	r26, 0x55	; 85
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e5       	ldi	r30, 0x55	; 85
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    10f6:	a5 e5       	ldi	r26, 0x55	; 85
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e5       	ldi	r30, 0x55	; 85
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8d 7f       	andi	r24, 0xFD	; 253
    1102:	8c 93       	st	X, r24
    1104:	82 c0       	rjmp	.+260    	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	79 f4       	brne	.+30     	; 0x112a <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    110c:	a5 e5       	ldi	r26, 0x55	; 85
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e5       	ldi	r30, 0x55	; 85
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    111a:	a5 e5       	ldi	r26, 0x55	; 85
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e5       	ldi	r30, 0x55	; 85
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	8c 93       	st	X, r24
    1128:	70 c0       	rjmp	.+224    	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	09 f0       	breq	.+2      	; 0x1132 <MEXTI_VidSenseControl+0xb0>
    1130:	6c c0       	rjmp	.+216    	; 0x120a <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    1132:	a5 e5       	ldi	r26, 0x55	; 85
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e5       	ldi	r30, 0x55	; 85
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1140:	a5 e5       	ldi	r26, 0x55	; 85
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e5       	ldi	r30, 0x55	; 85
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	8c 93       	st	X, r24
    114e:	5d c0       	rjmp	.+186    	; 0x120a <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	88 23       	and	r24, r24
    1154:	79 f4       	brne	.+30     	; 0x1174 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    1156:	a5 e5       	ldi	r26, 0x55	; 85
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e5       	ldi	r30, 0x55	; 85
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8b 7f       	andi	r24, 0xFB	; 251
    1162:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1164:	a5 e5       	ldi	r26, 0x55	; 85
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e5       	ldi	r30, 0x55	; 85
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	87 7f       	andi	r24, 0xF7	; 247
    1170:	8c 93       	st	X, r24
    1172:	4b c0       	rjmp	.+150    	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	79 f4       	brne	.+30     	; 0x1198 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    117a:	a5 e5       	ldi	r26, 0x55	; 85
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e5 e5       	ldi	r30, 0x55	; 85
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1188:	a5 e5       	ldi	r26, 0x55	; 85
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e5       	ldi	r30, 0x55	; 85
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	8c 93       	st	X, r24
    1196:	39 c0       	rjmp	.+114    	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	79 f4       	brne	.+30     	; 0x11bc <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    119e:	a5 e5       	ldi	r26, 0x55	; 85
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e5       	ldi	r30, 0x55	; 85
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8b 7f       	andi	r24, 0xFB	; 251
    11aa:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    11ac:	a5 e5       	ldi	r26, 0x55	; 85
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e5 e5       	ldi	r30, 0x55	; 85
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 60       	ori	r24, 0x08	; 8
    11b8:	8c 93       	st	X, r24
    11ba:	27 c0       	rjmp	.+78     	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	21 f5       	brne	.+72     	; 0x120a <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    11c2:	a5 e5       	ldi	r26, 0x55	; 85
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e5       	ldi	r30, 0x55	; 85
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	84 60       	ori	r24, 0x04	; 4
    11ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    11d0:	a5 e5       	ldi	r26, 0x55	; 85
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e5       	ldi	r30, 0x55	; 85
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	8c 93       	st	X, r24
    11de:	15 c0       	rjmp	.+42     	; 0x120a <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	41 f4       	brne	.+16     	; 0x11f6 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    11e6:	a4 e5       	ldi	r26, 0x54	; 84
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e4 e5       	ldi	r30, 0x54	; 84
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
    11f4:	0a c0       	rjmp	.+20     	; 0x120a <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	39 f4       	brne	.+14     	; 0x120a <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    11fc:	a4 e5       	ldi	r26, 0x54	; 84
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e4 e5       	ldi	r30, 0x54	; 84
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	8c 93       	st	X, r24

	default: break;

		//Do NoThing
	}
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <MDIO_Error_State_SetPinDirection+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MDIO_Error_State_SetPinDirection+0x8>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_Error_State_SetPinDirection+0xa>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <MDIO_Error_State_SetPinDirection+0x20>
    1236:	e8 c0       	rjmp	.+464    	; 0x1408 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3e 83       	std	Y+6, r19	; 0x06
    1240:	2d 83       	std	Y+5, r18	; 0x05
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <MDIO_Error_State_SetPinDirection+0x36>
    124c:	48 c0       	rjmp	.+144    	; 0x12de <MDIO_Error_State_SetPinDirection+0xc6>
    124e:	2d 81       	ldd	r18, Y+5	; 0x05
    1250:	3e 81       	ldd	r19, Y+6	; 0x06
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <MDIO_Error_State_SetPinDirection+0x4a>
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	71 f0       	breq	.+28     	; 0x127c <MDIO_Error_State_SetPinDirection+0x64>
    1260:	d1 c0       	rjmp	.+418    	; 0x1404 <MDIO_Error_State_SetPinDirection+0x1ec>
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <MDIO_Error_State_SetPinDirection+0x56>
    126c:	69 c0       	rjmp	.+210    	; 0x1340 <MDIO_Error_State_SetPinDirection+0x128>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <MDIO_Error_State_SetPinDirection+0x62>
    1278:	94 c0       	rjmp	.+296    	; 0x13a2 <MDIO_Error_State_SetPinDirection+0x18a>
    127a:	c4 c0       	rjmp	.+392    	; 0x1404 <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	a1 f4       	brne	.+40     	; 0x12aa <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1282:	aa e3       	ldi	r26, 0x3A	; 58
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <MDIO_Error_State_SetPinDirection+0x88>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <MDIO_Error_State_SetPinDirection+0x84>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	b0 c0       	rjmp	.+352    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	88 23       	and	r24, r24
    12ae:	a9 f4       	brne	.+42     	; 0x12da <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    12b0:	aa e3       	ldi	r26, 0x3A	; 58
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ea e3       	ldi	r30, 0x3A	; 58
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <MDIO_Error_State_SetPinDirection+0xb6>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <MDIO_Error_State_SetPinDirection+0xb2>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	98 c0       	rjmp	.+304    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	96 c0       	rjmp	.+300    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	a1 f4       	brne	.+40     	; 0x130c <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    12e4:	a7 e3       	ldi	r26, 0x37	; 55
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MDIO_Error_State_SetPinDirection+0xea>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MDIO_Error_State_SetPinDirection+0xe6>
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	7f c0       	rjmp	.+254    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	88 23       	and	r24, r24
    1310:	a9 f4       	brne	.+42     	; 0x133c <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1312:	a7 e3       	ldi	r26, 0x37	; 55
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <MDIO_Error_State_SetPinDirection+0x118>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <MDIO_Error_State_SetPinDirection+0x114>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	67 c0       	rjmp	.+206    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    133c:	19 82       	std	Y+1, r1	; 0x01
    133e:	65 c0       	rjmp	.+202    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	a1 f4       	brne	.+40     	; 0x136e <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1346:	a4 e3       	ldi	r26, 0x34	; 52
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <MDIO_Error_State_SetPinDirection+0x14c>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <MDIO_Error_State_SetPinDirection+0x148>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	4e c0       	rjmp	.+156    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	88 23       	and	r24, r24
    1372:	a9 f4       	brne	.+42     	; 0x139e <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1374:	a4 e3       	ldi	r26, 0x34	; 52
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <MDIO_Error_State_SetPinDirection+0x17a>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <MDIO_Error_State_SetPinDirection+0x176>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	36 c0       	rjmp	.+108    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	34 c0       	rjmp	.+104    	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	a1 f4       	brne	.+40     	; 0x13d0 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    13a8:	a1 e3       	ldi	r26, 0x31	; 49
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e1 e3       	ldi	r30, 0x31	; 49
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <MDIO_Error_State_SetPinDirection+0x1ae>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <MDIO_Error_State_SetPinDirection+0x1aa>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	1d c0       	rjmp	.+58     	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	88 23       	and	r24, r24
    13d4:	a9 f4       	brne	.+42     	; 0x1400 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    13d6:	a1 e3       	ldi	r26, 0x31	; 49
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e1 e3       	ldi	r30, 0x31	; 49
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <MDIO_Error_State_SetPinDirection+0x1dc>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <MDIO_Error_State_SetPinDirection+0x1d8>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	03 c0       	rjmp	.+6      	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	01 c0       	rjmp	.+2      	; 0x140a <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1408:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	26 96       	adiw	r28, 0x06	; 6
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <MDIO_Error_State_SetPortDirection+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <MDIO_Error_State_SetPortDirection+0x8>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	8f 3f       	cpi	r24, 0xFF	; 255
    1438:	19 f0       	breq	.+6      	; 0x1440 <MDIO_Error_State_SetPortDirection+0x22>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 23       	and	r24, r24
    143e:	a9 f5       	brne	.+106    	; 0x14aa <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	d1 f0       	breq	.+52     	; 0x1488 <MDIO_Error_State_SetPortDirection+0x6a>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <MDIO_Error_State_SetPortDirection+0x4a>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	61 f0       	breq	.+24     	; 0x147e <MDIO_Error_State_SetPortDirection+0x60>
    1466:	1f c0       	rjmp	.+62     	; 0x14a6 <MDIO_Error_State_SetPortDirection+0x88>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <MDIO_Error_State_SetPortDirection+0x74>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <MDIO_Error_State_SetPortDirection+0x7e>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	80 83       	st	Z, r24
    1486:	12 c0       	rjmp	.+36     	; 0x14ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	80 83       	st	Z, r24
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
    149c:	e1 e3       	ldi	r30, 0x31	; 49
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    14aa:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <MDIO_Error_State_SetPinValue+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <MDIO_Error_State_SetPinValue+0x8>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <MDIO_Error_State_SetPinValue+0xa>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	6b 83       	std	Y+3, r22	; 0x03
    14d0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	08 f0       	brcs	.+2      	; 0x14de <MDIO_Error_State_SetPinValue+0x20>
    14dc:	e8 c0       	rjmp	.+464    	; 0x16ae <MDIO_Error_State_SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3e 83       	std	Y+6, r19	; 0x06
    14e6:	2d 83       	std	Y+5, r18	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <MDIO_Error_State_SetPinValue+0x36>
    14f2:	48 c0       	rjmp	.+144    	; 0x1584 <MDIO_Error_State_SetPinValue+0xc6>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <MDIO_Error_State_SetPinValue+0x4a>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	71 f0       	breq	.+28     	; 0x1522 <MDIO_Error_State_SetPinValue+0x64>
    1506:	d1 c0       	rjmp	.+418    	; 0x16aa <MDIO_Error_State_SetPinValue+0x1ec>
    1508:	2d 81       	ldd	r18, Y+5	; 0x05
    150a:	3e 81       	ldd	r19, Y+6	; 0x06
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <MDIO_Error_State_SetPinValue+0x56>
    1512:	69 c0       	rjmp	.+210    	; 0x15e6 <MDIO_Error_State_SetPinValue+0x128>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <MDIO_Error_State_SetPinValue+0x62>
    151e:	94 c0       	rjmp	.+296    	; 0x1648 <MDIO_Error_State_SetPinValue+0x18a>
    1520:	c4 c0       	rjmp	.+392    	; 0x16aa <MDIO_Error_State_SetPinValue+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    1528:	ab e3       	ldi	r26, 0x3B	; 59
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <MDIO_Error_State_SetPinValue+0x88>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <MDIO_Error_State_SetPinValue+0x84>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	b0 c0       	rjmp	.+352    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	88 23       	and	r24, r24
    1554:	a9 f4       	brne	.+42     	; 0x1580 <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    1556:	ab e3       	ldi	r26, 0x3B	; 59
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e3       	ldi	r30, 0x3B	; 59
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <MDIO_Error_State_SetPinValue+0xb6>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <MDIO_Error_State_SetPinValue+0xb2>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	98 c0       	rjmp	.+304    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	96 c0       	rjmp	.+300    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    158a:	a8 e3       	ldi	r26, 0x38	; 56
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <MDIO_Error_State_SetPinValue+0xea>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <MDIO_Error_State_SetPinValue+0xe6>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	7f c0       	rjmp	.+254    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	88 23       	and	r24, r24
    15b6:	a9 f4       	brne	.+42     	; 0x15e2 <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    15b8:	a8 e3       	ldi	r26, 0x38	; 56
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <MDIO_Error_State_SetPinValue+0x118>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <MDIO_Error_State_SetPinValue+0x114>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	67 c0       	rjmp	.+206    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	65 c0       	rjmp	.+202    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    15ec:	a5 e3       	ldi	r26, 0x35	; 53
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e3       	ldi	r30, 0x35	; 53
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <MDIO_Error_State_SetPinValue+0x14c>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <MDIO_Error_State_SetPinValue+0x148>
    160e:	84 2b       	or	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	4e c0       	rjmp	.+156    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	88 23       	and	r24, r24
    1618:	a9 f4       	brne	.+42     	; 0x1644 <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    161a:	a5 e3       	ldi	r26, 0x35	; 53
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <MDIO_Error_State_SetPinValue+0x17a>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <MDIO_Error_State_SetPinValue+0x176>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	36 c0       	rjmp	.+108    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1644:	19 82       	std	Y+1, r1	; 0x01
    1646:	34 c0       	rjmp	.+104    	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    164e:	a2 e3       	ldi	r26, 0x32	; 50
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e2 e3       	ldi	r30, 0x32	; 50
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <MDIO_Error_State_SetPinValue+0x1ae>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <MDIO_Error_State_SetPinValue+0x1aa>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	88 23       	and	r24, r24
    167a:	a9 f4       	brne	.+42     	; 0x16a6 <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <MDIO_Error_State_SetPinValue+0x1dc>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <MDIO_Error_State_SetPinValue+0x1d8>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    16a6:	19 82       	std	Y+1, r1	; 0x01
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <MDIO_Error_State_SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    16ae:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b2:	26 96       	adiw	r28, 0x06	; 6
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <MDIO_Error_State_SetPortValue+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <MDIO_Error_State_SetPortValue+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3d 83       	std	Y+5, r19	; 0x05
    16e2:	2c 83       	std	Y+4, r18	; 0x04
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	d1 f0       	breq	.+52     	; 0x1722 <MDIO_Error_State_SetPortValue+0x5e>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <MDIO_Error_State_SetPortValue+0x3e>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <MDIO_Error_State_SetPortValue+0x54>
    1700:	1f c0       	rjmp	.+62     	; 0x1740 <MDIO_Error_State_SetPortValue+0x7c>
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	3d 81       	ldd	r19, Y+5	; 0x05
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	81 f0       	breq	.+32     	; 0x172c <MDIO_Error_State_SetPortValue+0x68>
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	81 f0       	breq	.+32     	; 0x1736 <MDIO_Error_State_SetPortValue+0x72>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	80 83       	st	Z, r24
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    1722:	e8 e3       	ldi	r30, 0x38	; 56
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	80 83       	st	Z, r24
    172a:	0b c0       	rjmp	.+22     	; 0x1742 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	80 83       	st	Z, r24
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	80 83       	st	Z, r24
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
    1740:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	27 97       	sbiw	r28, 0x07	; 7
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03
    176c:	5d 83       	std	Y+5, r21	; 0x05
    176e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <MDIO_Error_State_GetPinValue+0x28>
    177a:	79 c0       	rjmp	.+242    	; 0x186e <MDIO_Error_State_GetPinValue+0x11a>
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <MDIO_Error_State_GetPinValue+0x34>
    1786:	73 c0       	rjmp	.+230    	; 0x186e <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3f 83       	std	Y+7, r19	; 0x07
    1790:	2e 83       	std	Y+6, r18	; 0x06
    1792:	4e 81       	ldd	r20, Y+6	; 0x06
    1794:	5f 81       	ldd	r21, Y+7	; 0x07
    1796:	41 30       	cpi	r20, 0x01	; 1
    1798:	51 05       	cpc	r21, r1
    179a:	59 f1       	breq	.+86     	; 0x17f2 <MDIO_Error_State_GetPinValue+0x9e>
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	9f 81       	ldd	r25, Y+7	; 0x07
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	34 f4       	brge	.+12     	; 0x17b2 <MDIO_Error_State_GetPinValue+0x5e>
    17a6:	2e 81       	ldd	r18, Y+6	; 0x06
    17a8:	3f 81       	ldd	r19, Y+7	; 0x07
    17aa:	21 15       	cp	r18, r1
    17ac:	31 05       	cpc	r19, r1
    17ae:	69 f0       	breq	.+26     	; 0x17ca <MDIO_Error_State_GetPinValue+0x76>
    17b0:	5c c0       	rjmp	.+184    	; 0x186a <MDIO_Error_State_GetPinValue+0x116>
    17b2:	4e 81       	ldd	r20, Y+6	; 0x06
    17b4:	5f 81       	ldd	r21, Y+7	; 0x07
    17b6:	42 30       	cpi	r20, 0x02	; 2
    17b8:	51 05       	cpc	r21, r1
    17ba:	79 f1       	breq	.+94     	; 0x181a <MDIO_Error_State_GetPinValue+0xc6>
    17bc:	8e 81       	ldd	r24, Y+6	; 0x06
    17be:	9f 81       	ldd	r25, Y+7	; 0x07
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <MDIO_Error_State_GetPinValue+0x74>
    17c6:	3d c0       	rjmp	.+122    	; 0x1842 <MDIO_Error_State_GetPinValue+0xee>
    17c8:	50 c0       	rjmp	.+160    	; 0x186a <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    17ca:	e9 e3       	ldi	r30, 0x39	; 57
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <MDIO_Error_State_GetPinValue+0x8e>
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <MDIO_Error_State_GetPinValue+0x8a>
    17e6:	ca 01       	movw	r24, r20
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	ec 81       	ldd	r30, Y+4	; 0x04
    17ec:	fd 81       	ldd	r31, Y+5	; 0x05
    17ee:	80 83       	st	Z, r24
    17f0:	3f c0       	rjmp	.+126    	; 0x1870 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    17f2:	e6 e3       	ldi	r30, 0x36	; 54
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <MDIO_Error_State_GetPinValue+0xb6>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <MDIO_Error_State_GetPinValue+0xb2>
    180e:	ca 01       	movw	r24, r20
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	ec 81       	ldd	r30, Y+4	; 0x04
    1814:	fd 81       	ldd	r31, Y+5	; 0x05
    1816:	80 83       	st	Z, r24
    1818:	2b c0       	rjmp	.+86     	; 0x1870 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    181a:	e3 e3       	ldi	r30, 0x33	; 51
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a9 01       	movw	r20, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <MDIO_Error_State_GetPinValue+0xde>
    182e:	55 95       	asr	r21
    1830:	47 95       	ror	r20
    1832:	8a 95       	dec	r24
    1834:	e2 f7       	brpl	.-8      	; 0x182e <MDIO_Error_State_GetPinValue+0xda>
    1836:	ca 01       	movw	r24, r20
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	ec 81       	ldd	r30, Y+4	; 0x04
    183c:	fd 81       	ldd	r31, Y+5	; 0x05
    183e:	80 83       	st	Z, r24
    1840:	17 c0       	rjmp	.+46     	; 0x1870 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    1842:	e0 e3       	ldi	r30, 0x30	; 48
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a9 01       	movw	r20, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <MDIO_Error_State_GetPinValue+0x106>
    1856:	55 95       	asr	r21
    1858:	47 95       	ror	r20
    185a:	8a 95       	dec	r24
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <MDIO_Error_State_GetPinValue+0x102>
    185e:	ca 01       	movw	r24, r20
    1860:	81 70       	andi	r24, 0x01	; 1
    1862:	ec 81       	ldd	r30, Y+4	; 0x04
    1864:	fd 81       	ldd	r31, Y+5	; 0x05
    1866:	80 83       	st	Z, r24
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    186a:	19 82       	std	Y+1, r1	; 0x01
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    186e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
}
    1872:	27 96       	adiw	r28, 0x07	; 7
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <MDIO_Error_State_SetNippleValue+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <MDIO_Error_State_SetNippleValue+0x8>
    188c:	00 d0       	rcall	.+0      	; 0x188e <MDIO_Error_State_SetNippleValue+0xa>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	6b 83       	std	Y+3, r22	; 0x03
    1896:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <MDIO_Error_State_SetNippleValue+0x20>
    18a2:	97 c0       	rjmp	.+302    	; 0x19d2 <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3e 83       	std	Y+6, r19	; 0x06
    18ac:	2d 83       	std	Y+5, r18	; 0x05
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	a1 f1       	breq	.+104    	; 0x1920 <MDIO_Error_State_SetNippleValue+0x9c>
    18b8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ba:	3e 81       	ldd	r19, Y+6	; 0x06
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <MDIO_Error_State_SetNippleValue+0x48>
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	71 f0       	breq	.+28     	; 0x18e6 <MDIO_Error_State_SetNippleValue+0x62>
    18ca:	81 c0       	rjmp	.+258    	; 0x19ce <MDIO_Error_State_SetNippleValue+0x14a>
    18cc:	2d 81       	ldd	r18, Y+5	; 0x05
    18ce:	3e 81       	ldd	r19, Y+6	; 0x06
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <MDIO_Error_State_SetNippleValue+0x54>
    18d6:	41 c0       	rjmp	.+130    	; 0x195a <MDIO_Error_State_SetNippleValue+0xd6>
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <MDIO_Error_State_SetNippleValue+0x60>
    18e2:	58 c0       	rjmp	.+176    	; 0x1994 <MDIO_Error_State_SetNippleValue+0x110>
    18e4:	74 c0       	rjmp	.+232    	; 0x19ce <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8f e0       	ldi	r24, 0x0F	; 15
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <MDIO_Error_State_SetNippleValue+0x80>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <MDIO_Error_State_SetNippleValue+0x7c>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    190e:	ab e3       	ldi	r26, 0x3B	; 59
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	eb e3       	ldi	r30, 0x3B	; 59
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	90 81       	ld	r25, Z
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	89 2b       	or	r24, r25
    191c:	8c 93       	st	X, r24
    191e:	5a c0       	rjmp	.+180    	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	8f e0       	ldi	r24, 0x0F	; 15
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <MDIO_Error_State_SetNippleValue+0xba>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <MDIO_Error_State_SetNippleValue+0xb6>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    1948:	a8 e3       	ldi	r26, 0x38	; 56
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e3       	ldi	r30, 0x38	; 56
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	90 81       	ld	r25, Z
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	89 2b       	or	r24, r25
    1956:	8c 93       	st	X, r24
    1958:	3d c0       	rjmp	.+122    	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    195a:	a5 e3       	ldi	r26, 0x35	; 53
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e3       	ldi	r30, 0x35	; 53
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8f e0       	ldi	r24, 0x0F	; 15
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <MDIO_Error_State_SetNippleValue+0xf4>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <MDIO_Error_State_SetNippleValue+0xf0>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	90 81       	ld	r25, Z
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	89 2b       	or	r24, r25
    1990:	8c 93       	st	X, r24
    1992:	20 c0       	rjmp	.+64     	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1994:	a2 e3       	ldi	r26, 0x32	; 50
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e2 e3       	ldi	r30, 0x32	; 50
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8f e0       	ldi	r24, 0x0F	; 15
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <MDIO_Error_State_SetNippleValue+0x12e>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <MDIO_Error_State_SetNippleValue+0x12a>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    19bc:	a2 e3       	ldi	r26, 0x32	; 50
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e2 e3       	ldi	r30, 0x32	; 50
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	90 81       	ld	r25, Z
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	89 2b       	or	r24, r25
    19ca:	8c 93       	st	X, r24
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    19d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d6:	26 96       	adiw	r28, 0x06	; 6
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <MDIO_Error_State_TogglePinValue>:
Error_State MDIO_Error_State_TogglePinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <MDIO_Error_State_TogglePinValue+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <MDIO_Error_State_TogglePinValue+0x8>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	49 f1       	breq	.+82     	; 0x1a64 <MDIO_Error_State_TogglePinValue+0x7c>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <MDIO_Error_State_TogglePinValue+0x3e>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <MDIO_Error_State_TogglePinValue+0x54>
    1a24:	5b c0       	rjmp	.+182    	; 0x1adc <MDIO_Error_State_TogglePinValue+0xf4>
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	71 f1       	breq	.+92     	; 0x1a8c <MDIO_Error_State_TogglePinValue+0xa4>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	e9 f1       	breq	.+122    	; 0x1ab4 <MDIO_Error_State_TogglePinValue+0xcc>
    1a3a:	50 c0       	rjmp	.+160    	; 0x1adc <MDIO_Error_State_TogglePinValue+0xf4>
	{
	case MDIO_PORTA:
		TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    1a3c:	ab e3       	ldi	r26, 0x3B	; 59
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	eb e3       	ldi	r30, 0x3B	; 59
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <MDIO_Error_State_TogglePinValue+0x72>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <MDIO_Error_State_TogglePinValue+0x6e>
    1a5e:	84 27       	eor	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	3d c0       	rjmp	.+122    	; 0x1ade <MDIO_Error_State_TogglePinValue+0xf6>
		break;
	case MDIO_PORTB:
		TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    1a64:	a8 e3       	ldi	r26, 0x38	; 56
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <MDIO_Error_State_TogglePinValue+0x9a>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <MDIO_Error_State_TogglePinValue+0x96>
    1a86:	84 27       	eor	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	29 c0       	rjmp	.+82     	; 0x1ade <MDIO_Error_State_TogglePinValue+0xf6>
		break;
	case MDIO_PORTC:
		TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    1a8c:	a5 e3       	ldi	r26, 0x35	; 53
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e3       	ldi	r30, 0x35	; 53
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <MDIO_Error_State_TogglePinValue+0xc2>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <MDIO_Error_State_TogglePinValue+0xbe>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	15 c0       	rjmp	.+42     	; 0x1ade <MDIO_Error_State_TogglePinValue+0xf6>
		break;
	case MDIO_PORTD:
		TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    1ab4:	a2 e3       	ldi	r26, 0x32	; 50
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e2 e3       	ldi	r30, 0x32	; 50
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <MDIO_Error_State_TogglePinValue+0xea>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <MDIO_Error_State_TogglePinValue+0xe6>
    1ad6:	84 27       	eor	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <MDIO_Error_State_TogglePinValue+0xf6>
		break;
	default :
		LOC_Error_State_ReturnState=NOK;
    1adc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <MADC_VidInit>:

void (*MADC_CallBack)(void);

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1af8:	a7 e2       	ldi	r26, 0x27	; 39
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e2       	ldi	r30, 0x27	; 39
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 64       	ori	r24, 0x40	; 64
    1b04:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1b06:	a7 e2       	ldi	r26, 0x27	; 39
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e7 e2       	ldi	r30, 0x27	; 39
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 77       	andi	r24, 0x7F	; 127
    1b12:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 7f       	andi	r24, 0xF8	; 248
    1b20:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1b22:	a6 e2       	ldi	r26, 0x26	; 38
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e2       	ldi	r30, 0x26	; 38
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	87 60       	ori	r24, 0x07	; 7
    1b2e:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1b30:	a7 e2       	ldi	r26, 0x27	; 39
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e2       	ldi	r30, 0x27	; 39
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1b3e:	a6 e2       	ldi	r26, 0x26	; 38
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e6 e2       	ldi	r30, 0x26	; 38
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	8c 93       	st	X, r24
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <MADC_VidADCInterruptEnable>:
void MADC_VidADCInterruptEnable(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,3);
    1b5a:	a6 e2       	ldi	r26, 0x26	; 38
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e6 e2       	ldi	r30, 0x26	; 38
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	8c 93       	st	X, r24
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(unsigned char Copy_u8Channel)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	87 70       	andi	r24, 0x07	; 7
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1b80:	a7 e2       	ldi	r26, 0x27	; 39
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e2       	ldi	r30, 0x27	; 39
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 7e       	andi	r24, 0xE0	; 224
    1b8c:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1b8e:	a7 e2       	ldi	r26, 0x27	; 39
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e7 e2       	ldi	r30, 0x27	; 39
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	90 81       	ld	r25, Z
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	89 2b       	or	r24, r25
    1b9c:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1b9e:	a6 e2       	ldi	r26, 0x26	; 38
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e2       	ldi	r30, 0x26	; 38
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 64       	ori	r24, 0x40	; 64
    1baa:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1bac:	e6 e2       	ldi	r30, 0x26	; 38
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	82 95       	swap	r24
    1bb4:	8f 70       	andi	r24, 0x0F	; 15
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	a9 f3       	breq	.-22     	; 0x1bac <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1bc2:	e4 e2       	ldi	r30, 0x24	; 36
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <MADC_u16ADC_StartConversion_With_Interrupt>:
void MADC_u16ADC_StartConversion_With_Interrupt(unsigned char Copy_u8Channel)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	87 70       	andi	r24, 0x07	; 7
    1be2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1be4:	a7 e2       	ldi	r26, 0x27	; 39
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e2       	ldi	r30, 0x27	; 39
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 7e       	andi	r24, 0xE0	; 224
    1bf0:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1bf2:	a7 e2       	ldi	r26, 0x27	; 39
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e7 e2       	ldi	r30, 0x27	; 39
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	90 81       	ld	r25, Z
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	89 2b       	or	r24, r25
    1c00:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1c02:	a6 e2       	ldi	r26, 0x26	; 38
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e6 e2       	ldi	r30, 0x26	; 38
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 64       	ori	r24, 0x40	; 64
    1c0e:	8c 93       	st	X, r24
}
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <MADC_u16ADCRead>:
u16 MADC_u16ADCRead(void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
	return ADC;
    1c20:	e4 e2       	ldi	r30, 0x24	; 36
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <MADC_VidSetCallBack>:
void MADC_VidSetCallBack(void (*Copy_pFun)(void))
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <MADC_VidSetCallBack+0x6>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	MADC_CallBack=Copy_pFun;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	90 93 09 07 	sts	0x0709, r25
    1c44:	80 93 08 07 	sts	0x0708, r24
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <__vector_16>:

void __vector_16(void)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	MADC_CallBack();
    1c7c:	e0 91 08 07 	lds	r30, 0x0708
    1c80:	f0 91 09 07 	lds	r31, 0x0709
    1c84:	09 95       	icall
}
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	ff 91       	pop	r31
    1c8c:	ef 91       	pop	r30
    1c8e:	bf 91       	pop	r27
    1c90:	af 91       	pop	r26
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <LCD_SEND_A_COMMAND>:





void LCD_SEND_A_COMMAND (char command){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01

	LCD_CHECK_LCD_ISBUSY();
    1cb8:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_CHECK_LCD_ISBUSY>

	LCD_control &= ~(1<<RS_switch);
    1cbc:	a2 e3       	ldi	r26, 0x32	; 50
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8e 7f       	andi	r24, 0xFE	; 254
    1cc8:	8c 93       	st	X, r24
	LCD_control &= ~(1<<ReadWrite);
    1cca:	a2 e3       	ldi	r26, 0x32	; 50
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e2 e3       	ldi	r30, 0x32	; 50
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8d 7f       	andi	r24, 0xFD	; 253
    1cd6:	8c 93       	st	X, r24

	LCD_port = command ;
    1cd8:	e5 e3       	ldi	r30, 0x35	; 53
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	80 83       	st	Z, r24
	LCD_KICK();
    1ce0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_KICK>
}
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_KICK>:





void LCD_KICK(void){
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
 DataDir_LCD_control |= (1<<EN_switch);
    1d00:	a1 e3       	ldi	r26, 0x31	; 49
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e1 e3       	ldi	r30, 0x31	; 49
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 61       	ori	r24, 0x10	; 16
    1d0c:	8c 93       	st	X, r24
 LCD_control |= (1<<EN_switch) ;
    1d0e:	a2 e3       	ldi	r26, 0x32	; 50
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e2 e3       	ldi	r30, 0x32	; 50
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	80 61       	ori	r24, 0x10	; 16
    1d1a:	8c 93       	st	X, r24
 asm ("NOP");
    1d1c:	00 00       	nop
 asm ("NOP");
    1d1e:	00 00       	nop
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e2       	ldi	r26, 0x20	; 32
    1d26:	b1 e4       	ldi	r27, 0x41	; 65
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
    1d2a:	9c 87       	std	Y+12, r25	; 0x0c
    1d2c:	ad 87       	std	Y+13, r26	; 0x0d
    1d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	55 e4       	ldi	r21, 0x45	; 69
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    1d4c:	a9 87       	std	Y+9, r26	; 0x09
    1d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_KICK+0x86>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_KICK+0x104>
	else if (__tmp > 65535)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_KICK+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_KICK+0xe6>
    1db4:	80 e9       	ldi	r24, 0x90	; 144
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_KICK+0xd4>
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_KICK+0xc8>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_KICK+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_KICK+0x110>
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(10);
 LCD_control &= ~(1<<EN_switch);
    1e04:	a2 e3       	ldi	r26, 0x32	; 50
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 7e       	andi	r24, 0xEF	; 239
    1e10:	8c 93       	st	X, r24
}
    1e12:	2e 96       	adiw	r28, 0x0e	; 14
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <LCD_CLEAR>:


 void LCD_CLEAR(void){
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62

	 LCD_SEND_A_COMMAND(LCD_CLEAR_SCREEN);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
 }
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <LCD_INIT>:



void LCD_INIT(void){
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	6c 97       	sbiw	r28, 0x1c	; 28
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e2       	ldi	r26, 0x20	; 32
    1e52:	b1 e4       	ldi	r27, 0x41	; 65
    1e54:	89 8f       	std	Y+25, r24	; 0x19
    1e56:	9a 8f       	std	Y+26, r25	; 0x1a
    1e58:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	55 e4       	ldi	r21, 0x45	; 69
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <LCD_INIT+0x66>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    1e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <LCD_INIT+0xc6>
    1ee0:	80 e9       	ldi	r24, 0x90	; 144
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_INIT+0xb4>
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <LCD_INIT+0xa8>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	98 89       	ldd	r25, Y+16	; 0x10
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_INIT+0xf0>
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);
	DataDir_LCD_control |= (1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
    1f30:	a1 e3       	ldi	r26, 0x31	; 49
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e1 e3       	ldi	r30, 0x31	; 49
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	83 61       	ori	r24, 0x13	; 19
    1f3c:	8c 93       	st	X, r24
	DataDir_LCD_port = 0xff;
    1f3e:	e4 e3       	ldi	r30, 0x34	; 52
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	80 83       	st	Z, r24
	LCD_control &= ~(1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
    1f46:	a2 e3       	ldi	r26, 0x32	; 50
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e2 e3       	ldi	r30, 0x32	; 50
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	8c 7e       	andi	r24, 0xEC	; 236
    1f52:	8c 93       	st	X, r24
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5a:	b1 e4       	ldi	r27, 0x41	; 65
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	9c 87       	std	Y+12, r25	; 0x0c
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	55 e4       	ldi	r21, 0x45	; 69
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_INIT+0x16e>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_INIT+0x1ec>
	else if (__tmp > 65535)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_INIT+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_INIT+0x1ce>
    1fe8:	80 e9       	ldi	r24, 0x90	; 144
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_INIT+0x1bc>
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_INIT+0x1b0>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_INIT+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_INIT+0x1f8>
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	 LCD_CLEAR();
    2038:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_CLEAR>
	#ifdef EIGHT_BIT_MODE
	LCD_SEND_A_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    203c:	88 e3       	ldi	r24, 0x38	; 56
    203e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
    #endif



	LCD_SEND_A_COMMAND(LCD_ENTRY_MODE);
    2042:	86 e0       	ldi	r24, 0x06	; 6
    2044:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_BEGIN_AT_FIRST_RAW);
    2048:	80 e8       	ldi	r24, 0x80	; 128
    204a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
    LCD_SEND_A_COMMAND(LCD_DISP_ON  );
    204e:	8c e0       	ldi	r24, 0x0C	; 12
    2050:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
}
    2054:	6c 96       	adiw	r28, 0x1c	; 28
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <LCD_SEND_A_CHAR>:



void LCD_SEND_A_CHAR (unsigned char character){
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	89 83       	std	Y+1, r24	; 0x01

	#ifdef EIGHT_BIT_MODE
	LCD_CHECK_LCD_ISBUSY();
    2072:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_CHECK_LCD_ISBUSY>
	LCD_control |= (1<<RS_switch);
    2076:	a2 e3       	ldi	r26, 0x32	; 50
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e2 e3       	ldi	r30, 0x32	; 50
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	81 60       	ori	r24, 0x01	; 1
    2082:	8c 93       	st	X, r24
	LCD_port = character;
    2084:	e5 e3       	ldi	r30, 0x35	; 53
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	80 83       	st	Z, r24
	LCD_KICK();
    208c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_KICK>
    #endif
}
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <LCD_CHECK_LCD_ISBUSY>:



void LCD_CHECK_LCD_ISBUSY(){
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_port = 0;
    20a0:	e4 e3       	ldi	r30, 0x34	; 52
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	10 82       	st	Z, r1
	DataDir_LCD_control |= (1<<RS_switch | 1 <<EN_switch | 1<<ReadWrite);
    20a6:	a1 e3       	ldi	r26, 0x31	; 49
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e1 e3       	ldi	r30, 0x31	; 49
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	83 61       	ori	r24, 0x13	; 19
    20b2:	8c 93       	st	X, r24
	LCD_control &= ~(1<<RS_switch);
    20b4:	a2 e3       	ldi	r26, 0x32	; 50
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e2 e3       	ldi	r30, 0x32	; 50
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	8c 93       	st	X, r24
	LCD_control |= (1<<ReadWrite);
    20c2:	a2 e3       	ldi	r26, 0x32	; 50
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e2 e3       	ldi	r30, 0x32	; 50
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	8c 93       	st	X, r24
	LCD_KICK();
    20d0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_KICK>
	DataDir_LCD_port = 0xff;
    20d4:	e4 e3       	ldi	r30, 0x34	; 52
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	80 83       	st	Z, r24
	LCD_control &= ~(1<<ReadWrite);
    20dc:	a2 e3       	ldi	r26, 0x32	; 50
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8d 7f       	andi	r24, 0xFD	; 253
    20e8:	8c 93       	st	X, r24
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LCD_GOTO_XY>:


void LCD_GOTO_XY(unsigned char line , unsigned char position ) {
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <LCD_GOTO_XY+0x6>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	88 23       	and	r24, r24
    2102:	21 f4       	brne	.+8      	; 0x210c <LCD_GOTO_XY+0x1c>
	{
		LCD_SEND_A_COMMAND(0x80+position);
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	80 58       	subi	r24, 0x80	; 128
    2108:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
	}
	if (line==1)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	21 f4       	brne	.+8      	; 0x211a <LCD_GOTO_XY+0x2a>
	{
		LCD_SEND_A_COMMAND(0xc0+position);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	80 54       	subi	r24, 0x40	; 64
    2116:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
	}

}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_SEND_A_STRING>:



void LCD_SEND_A_STRING(char* string) {
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_SEND_A_STRING+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <LCD_SEND_A_STRING+0x8>
    212c:	00 d0       	rcall	.+0      	; 0x212e <LCD_SEND_A_STRING+0xa>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05

	int i=0 ;
    2136:	1c 82       	std	Y+4, r1	; 0x04
    2138:	1b 82       	std	Y+3, r1	; 0x03
	int count = 0 ;
    213a:	1a 82       	std	Y+2, r1	; 0x02
    213c:	19 82       	std	Y+1, r1	; 0x01
    213e:	2a c0       	rjmp	.+84     	; 0x2194 <LCD_SEND_A_STRING+0x70>
	while (string[i] != 00 )
	{
		LCD_SEND_A_CHAR(string[i]);
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	0e 94 33 10 	call	0x2066	; 0x2066 <LCD_SEND_A_CHAR>
		i++;
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		count++;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
		if (count==16 )
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	80 31       	cpi	r24, 0x10	; 16
    216e:	91 05       	cpc	r25, r1
    2170:	21 f4       	brne	.+8      	; 0x217a <LCD_SEND_A_STRING+0x56>
		{
			LCD_GOTO_XY(1,0);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>

		}
		if (count==32)
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	80 32       	cpi	r24, 0x20	; 32
    2180:	91 05       	cpc	r25, r1
    2182:	41 f4       	brne	.+16     	; 0x2194 <LCD_SEND_A_STRING+0x70>
		{
			LCD_CLEAR();
    2184:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_CLEAR>
			LCD_GOTO_XY(0,0);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			count = 0;
    2190:	1a 82       	std	Y+2, r1	; 0x02
    2192:	19 82       	std	Y+1, r1	; 0x01

void LCD_SEND_A_STRING(char* string) {

	int i=0 ;
	int count = 0 ;
	while (string[i] != 00 )
    2194:	2b 81       	ldd	r18, Y+3	; 0x03
    2196:	3c 81       	ldd	r19, Y+4	; 0x04
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	fc 01       	movw	r30, r24
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	80 81       	ld	r24, Z
    21a4:	88 23       	and	r24, r24
    21a6:	61 f6       	brne	.-104    	; 0x2140 <LCD_SEND_A_STRING+0x1c>
		}
	}



}
    21a8:	26 96       	adiw	r28, 0x06	; 6
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LCD_SEND_INT>:


void LCD_SEND_INT (unsigned char number){
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	28 97       	sbiw	r28, 0x08	; 8
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	88 87       	std	Y+8, r24	; 0x08

	char str[7];
	sprintf(str, "%02d" ,number);
    21d0:	88 85       	ldd	r24, Y+8	; 0x08
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <LCD_SEND_INT+0x1e>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <LCD_SEND_INT+0x20>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <LCD_SEND_INT+0x22>
    21dc:	ed b7       	in	r30, 0x3d	; 61
    21de:	fe b7       	in	r31, 0x3e	; 62
    21e0:	31 96       	adiw	r30, 0x01	; 1
    21e2:	ce 01       	movw	r24, r28
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	80 e6       	ldi	r24, 0x60	; 96
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	93 83       	std	Z+3, r25	; 0x03
    21f0:	82 83       	std	Z+2, r24	; 0x02
    21f2:	35 83       	std	Z+5, r19	; 0x05
    21f4:	24 83       	std	Z+4, r18	; 0x04
    21f6:	0e 94 93 2a 	call	0x5526	; 0x5526 <sprintf>
    21fa:	8d b7       	in	r24, 0x3d	; 61
    21fc:	9e b7       	in	r25, 0x3e	; 62
    21fe:	06 96       	adiw	r24, 0x06	; 6
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	9e bf       	out	0x3e, r25	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	8d bf       	out	0x3d, r24	; 61
	LCD_SEND_A_STRING(str);
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>

}
    2212:	28 96       	adiw	r28, 0x08	; 8
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <LCD_SEND_INT4>:

void LCD_SEND_INT4 (unsigned int number){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	29 97       	sbiw	r28, 0x09	; 9
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	99 87       	std	Y+9, r25	; 0x09
    223a:	88 87       	std	Y+8, r24	; 0x08

	char str[7];
	sprintf(str, "%04d" ,number);
    223c:	00 d0       	rcall	.+0      	; 0x223e <LCD_SEND_INT4+0x1a>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <LCD_SEND_INT4+0x1c>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <LCD_SEND_INT4+0x1e>
    2242:	ed b7       	in	r30, 0x3d	; 61
    2244:	fe b7       	in	r31, 0x3e	; 62
    2246:	31 96       	adiw	r30, 0x01	; 1
    2248:	ce 01       	movw	r24, r28
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    2250:	85 e6       	ldi	r24, 0x65	; 101
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	93 83       	std	Z+3, r25	; 0x03
    2256:	82 83       	std	Z+2, r24	; 0x02
    2258:	88 85       	ldd	r24, Y+8	; 0x08
    225a:	99 85       	ldd	r25, Y+9	; 0x09
    225c:	95 83       	std	Z+5, r25	; 0x05
    225e:	84 83       	std	Z+4, r24	; 0x04
    2260:	0e 94 93 2a 	call	0x5526	; 0x5526 <sprintf>
    2264:	8d b7       	in	r24, 0x3d	; 61
    2266:	9e b7       	in	r25, 0x3e	; 62
    2268:	06 96       	adiw	r24, 0x06	; 6
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	9e bf       	out	0x3e, r25	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	8d bf       	out	0x3d, r24	; 61
	LCD_SEND_A_STRING(str);
    2274:	ce 01       	movw	r24, r28
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>

}
    227c:	29 96       	adiw	r28, 0x09	; 9
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_SEND_REALNUM>:


void LCD_SEND_REALNUM (double RealNum ){
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	a6 97       	sbiw	r28, 0x26	; 38
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	6e 8f       	std	Y+30, r22	; 0x1e
    22a4:	7f 8f       	std	Y+31, r23	; 0x1f
    22a6:	88 a3       	std	Y+32, r24	; 0x20
    22a8:	99 a3       	std	Y+33, r25	; 0x21

	char str[16];
	char tmpsign = (RealNum<0) ?'-':' ';
    22aa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    22ac:	7f 8d       	ldd	r23, Y+31	; 0x1f
    22ae:	88 a1       	ldd	r24, Y+32	; 0x20
    22b0:	99 a1       	ldd	r25, Y+33	; 0x21
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	1c f4       	brge	.+6      	; 0x22c8 <LCD_SEND_REALNUM+0x3a>
    22c2:	2d e2       	ldi	r18, 0x2D	; 45
    22c4:	2e a3       	std	Y+38, r18	; 0x26
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <LCD_SEND_REALNUM+0x3e>
    22c8:	30 e2       	ldi	r19, 0x20	; 32
    22ca:	3e a3       	std	Y+38, r19	; 0x26
    22cc:	4e a1       	ldd	r20, Y+38	; 0x26
    22ce:	4d 87       	std	Y+13, r20	; 0x0d
	float tmpval =  (RealNum<0)? -RealNum : RealNum;
    22d0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    22d2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    22d4:	88 a1       	ldd	r24, Y+32	; 0x20
    22d6:	99 a1       	ldd	r25, Y+33	; 0x21
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	64 f4       	brge	.+24     	; 0x2300 <LCD_SEND_REALNUM+0x72>
    22e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ec:	a8 a1       	ldd	r26, Y+32	; 0x20
    22ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    22f0:	9c 01       	movw	r18, r24
    22f2:	ad 01       	movw	r20, r26
    22f4:	50 58       	subi	r21, 0x80	; 128
    22f6:	2a a3       	std	Y+34, r18	; 0x22
    22f8:	3b a3       	std	Y+35, r19	; 0x23
    22fa:	4c a3       	std	Y+36, r20	; 0x24
    22fc:	5d a3       	std	Y+37, r21	; 0x25
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <LCD_SEND_REALNUM+0x82>
    2300:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2302:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2304:	a8 a1       	ldd	r26, Y+32	; 0x20
    2306:	b9 a1       	ldd	r27, Y+33	; 0x21
    2308:	8a a3       	std	Y+34, r24	; 0x22
    230a:	9b a3       	std	Y+35, r25	; 0x23
    230c:	ac a3       	std	Y+36, r26	; 0x24
    230e:	bd a3       	std	Y+37, r27	; 0x25
    2310:	2a a1       	ldd	r18, Y+34	; 0x22
    2312:	3b a1       	ldd	r19, Y+35	; 0x23
    2314:	4c a1       	ldd	r20, Y+36	; 0x24
    2316:	5d a1       	ldd	r21, Y+37	; 0x25
    2318:	29 87       	std	Y+9, r18	; 0x09
    231a:	3a 87       	std	Y+10, r19	; 0x0a
    231c:	4b 87       	std	Y+11, r20	; 0x0b
    231e:	5c 87       	std	Y+12, r21	; 0x0c
	int intNum = tmpval ;
    2320:	69 85       	ldd	r22, Y+9	; 0x09
    2322:	7a 85       	ldd	r23, Y+10	; 0x0a
    2324:	8b 85       	ldd	r24, Y+11	; 0x0b
    2326:	9c 85       	ldd	r25, Y+12	; 0x0c
    2328:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	8f 83       	std	Y+7, r24	; 0x07
	float tmpfrac = tmpval - intNum ;
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	aa 27       	eor	r26, r26
    233a:	97 fd       	sbrc	r25, 7
    233c:	a0 95       	com	r26
    233e:	ba 2f       	mov	r27, r26
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	69 85       	ldd	r22, Y+9	; 0x09
    234e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2350:	8b 85       	ldd	r24, Y+11	; 0x0b
    2352:	9c 85       	ldd	r25, Y+12	; 0x0c
    2354:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	8b 83       	std	Y+3, r24	; 0x03
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	ad 83       	std	Y+5, r26	; 0x05
    2362:	be 83       	std	Y+6, r27	; 0x06
	int frac = tmpfrac * 100000 ;
    2364:	6b 81       	ldd	r22, Y+3	; 0x03
    2366:	7c 81       	ldd	r23, Y+4	; 0x04
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e5       	ldi	r19, 0x50	; 80
    2370:	43 ec       	ldi	r20, 0xC3	; 195
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
	sprintf(str, "%c%d.%05d", tmpsign,intNum,frac);
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4d b7       	in	r20, 0x3d	; 61
    2394:	5e b7       	in	r21, 0x3e	; 62
    2396:	4a 50       	subi	r20, 0x0A	; 10
    2398:	50 40       	sbci	r21, 0x00	; 0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	5e bf       	out	0x3e, r21	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	4d bf       	out	0x3d, r20	; 61
    23a4:	ed b7       	in	r30, 0x3d	; 61
    23a6:	fe b7       	in	r31, 0x3e	; 62
    23a8:	31 96       	adiw	r30, 0x01	; 1
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 96       	adiw	r24, 0x0e	; 14
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	8a e6       	ldi	r24, 0x6A	; 106
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	93 83       	std	Z+3, r25	; 0x03
    23b8:	82 83       	std	Z+2, r24	; 0x02
    23ba:	35 83       	std	Z+5, r19	; 0x05
    23bc:	24 83       	std	Z+4, r18	; 0x04
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	98 85       	ldd	r25, Y+8	; 0x08
    23c2:	97 83       	std	Z+7, r25	; 0x07
    23c4:	86 83       	std	Z+6, r24	; 0x06
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	91 87       	std	Z+9, r25	; 0x09
    23cc:	80 87       	std	Z+8, r24	; 0x08
    23ce:	0e 94 93 2a 	call	0x5526	; 0x5526 <sprintf>
    23d2:	8d b7       	in	r24, 0x3d	; 61
    23d4:	9e b7       	in	r25, 0x3e	; 62
    23d6:	0a 96       	adiw	r24, 0x0a	; 10
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	9e bf       	out	0x3e, r25	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	8d bf       	out	0x3d, r24	; 61

	LCD_SEND_A_STRING(str);
    23e2:	ce 01       	movw	r24, r28
    23e4:	0e 96       	adiw	r24, 0x0e	; 14
    23e6:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>

}
    23ea:	a6 96       	adiw	r28, 0x26	; 38
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <LCD_ENABLE_CURSOR>:


void LCD_ENABLE_CURSOR(void){
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62

	LCD_SEND_A_COMMAND(0x0E);
    2404:	8e e0       	ldi	r24, 0x0E	; 14
    2406:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>

}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCD_DISABLE_CURSOR>:


void LCD_DISABLE_CURSOR(void){
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62

	LCD_SEND_A_COMMAND(0x0C );
    2418:	8c e0       	ldi	r24, 0x0C	; 12
    241a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>

}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <LCD_SET_CURSOR>:



void LCD_SET_CURSOR(unsigned char col, unsigned char row) {
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <LCD_SET_CURSOR+0x6>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	6a 83       	std	Y+2, r22	; 0x02
	static unsigned char offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 3) {
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	10 f0       	brcs	.+4      	; 0x243c <LCD_SET_CURSOR+0x18>
		row = 3;
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	8a 83       	std	Y+2, r24	; 0x02
	}

	LCD_SEND_A_COMMAND(0x80 | (col + offsets[row]));
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	fc 01       	movw	r30, r24
    2444:	e7 56       	subi	r30, 0x67	; 103
    2446:	fe 4f       	sbci	r31, 0xFE	; 254
    2448:	90 81       	ld	r25, Z
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	89 0f       	add	r24, r25
    244e:	80 68       	ori	r24, 0x80	; 128
    2450:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_SEND_A_COMMAND>
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	27 97       	sbiw	r28, 0x07	; 7
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	9d 83       	std	Y+5, r25	; 0x05
    2474:	8c 83       	std	Y+4, r24	; 0x04
    2476:	6e 83       	std	Y+6, r22	; 0x06
    2478:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    247a:	8a e1       	ldi	r24, 0x1A	; 26
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <pvPortMalloc>
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	09 f4       	brne	.+2      	; 0x2490 <xCoRoutineCreate+0x32>
    248e:	6f c0       	rjmp	.+222    	; 0x256e <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2490:	80 91 a2 01 	lds	r24, 0x01A2
    2494:	90 91 a3 01 	lds	r25, 0x01A3
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	41 f4       	brne	.+16     	; 0x24ac <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	90 93 a3 01 	sts	0x01A3, r25
    24a4:	80 93 a2 01 	sts	0x01A2, r24
			prvInitialiseCoRoutineLists();
    24a8:	0e 94 96 14 	call	0x292c	; 0x292c <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    24ac:	8e 81       	ldd	r24, Y+6	; 0x06
    24ae:	82 30       	cpi	r24, 0x02	; 2
    24b0:	10 f0       	brcs	.+4      	; 0x24b6 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    24b6:	e9 81       	ldd	r30, Y+1	; 0x01
    24b8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ba:	11 8e       	std	Z+25, r1	; 0x19
    24bc:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    24be:	e9 81       	ldd	r30, Y+1	; 0x01
    24c0:	fa 81       	ldd	r31, Y+2	; 0x02
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	8f 81       	ldd	r24, Y+7	; 0x07
    24cc:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    24ce:	e9 81       	ldd	r30, Y+1	; 0x01
    24d0:	fa 81       	ldd	r31, Y+2	; 0x02
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	9d 81       	ldd	r25, Y+5	; 0x05
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	02 96       	adiw	r24, 0x02	; 2
    24e0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	0c 96       	adiw	r24, 0x0c	; 12
    24ea:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	91 87       	std	Z+9, r25	; 0x09
    24f8:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    24fa:	e9 81       	ldd	r30, Y+1	; 0x01
    24fc:	fa 81       	ldd	r31, Y+2	; 0x02
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	93 8b       	std	Z+19, r25	; 0x13
    2504:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	86 e0       	ldi	r24, 0x06	; 6
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	82 1b       	sub	r24, r18
    2512:	93 0b       	sbc	r25, r19
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	95 87       	std	Z+13, r25	; 0x0d
    251a:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    251c:	e9 81       	ldd	r30, Y+1	; 0x01
    251e:	fa 81       	ldd	r31, Y+2	; 0x02
    2520:	96 89       	ldd	r25, Z+22	; 0x16
    2522:	80 91 a4 01 	lds	r24, 0x01A4
    2526:	89 17       	cp	r24, r25
    2528:	28 f4       	brcc	.+10     	; 0x2534 <xCoRoutineCreate+0xd6>
    252a:	e9 81       	ldd	r30, Y+1	; 0x01
    252c:	fa 81       	ldd	r31, Y+2	; 0x02
    252e:	86 89       	ldd	r24, Z+22	; 0x16
    2530:	80 93 a4 01 	sts	0x01A4, r24
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	86 89       	ldd	r24, Z+22	; 0x16
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	c9 01       	movw	r24, r18
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	ac 01       	movw	r20, r24
    2552:	45 55       	subi	r20, 0x55	; 85
    2554:	5e 4f       	sbci	r21, 0xFE	; 254
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	9c 01       	movw	r18, r24
    255c:	2e 5f       	subi	r18, 0xFE	; 254
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	ca 01       	movw	r24, r20
    2562:	b9 01       	movw	r22, r18
    2564:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>

		xReturn = pdPASS;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    256e:	8f ef       	ldi	r24, 0xFF	; 255
    2570:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2574:	27 96       	adiw	r28, 0x07	; 7
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <vCoRoutineAddToDelayedList+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <vCoRoutineAddToDelayedList+0x8>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <vCoRoutineAddToDelayedList+0xa>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
    2598:	7e 83       	std	Y+6, r23	; 0x06
    259a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    259c:	20 91 a5 01 	lds	r18, 0x01A5
    25a0:	30 91 a6 01 	lds	r19, 0x01A6
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    25b0:	80 91 a2 01 	lds	r24, 0x01A2
    25b4:	90 91 a3 01 	lds	r25, 0x01A3
    25b8:	02 96       	adiw	r24, 0x02	; 2
    25ba:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    25be:	e0 91 a2 01 	lds	r30, 0x01A2
    25c2:	f0 91 a3 01 	lds	r31, 0x01A3
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	93 83       	std	Z+3, r25	; 0x03
    25cc:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    25ce:	20 91 a5 01 	lds	r18, 0x01A5
    25d2:	30 91 a6 01 	lds	r19, 0x01A6
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	82 17       	cp	r24, r18
    25dc:	93 07       	cpc	r25, r19
    25de:	70 f4       	brcc	.+28     	; 0x25fc <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    25e0:	80 91 d1 01 	lds	r24, 0x01D1
    25e4:	90 91 d2 01 	lds	r25, 0x01D2
    25e8:	20 91 a2 01 	lds	r18, 0x01A2
    25ec:	30 91 a3 01 	lds	r19, 0x01A3
    25f0:	2e 5f       	subi	r18, 0xFE	; 254
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	b9 01       	movw	r22, r18
    25f6:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    25fc:	80 91 cf 01 	lds	r24, 0x01CF
    2600:	90 91 d0 01 	lds	r25, 0x01D0
    2604:	20 91 a2 01 	lds	r18, 0x01A2
    2608:	30 91 a3 01 	lds	r19, 0x01A3
    260c:	2e 5f       	subi	r18, 0xFE	; 254
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	b9 01       	movw	r22, r18
    2612:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>
	}

	if( pxEventList )
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 f0       	breq	.+24     	; 0x2636 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    261e:	80 91 a2 01 	lds	r24, 0x01A2
    2622:	90 91 a3 01 	lds	r25, 0x01A3
    2626:	9c 01       	movw	r18, r24
    2628:	24 5f       	subi	r18, 0xF4	; 244
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	b9 01       	movw	r22, r18
    2632:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>
	}
}
    2636:	26 96       	adiw	r28, 0x06	; 6
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <prvCheckPendingReadyList+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	3a c0       	rjmp	.+116    	; 0x26c8 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2654:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2656:	e0 91 d8 01 	lds	r30, 0x01D8
    265a:	f0 91 d9 01 	lds	r31, 0x01D9
    265e:	86 81       	ldd	r24, Z+6	; 0x06
    2660:	97 81       	ldd	r25, Z+7	; 0x07
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	0c 96       	adiw	r24, 0x0c	; 12
    266c:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2670:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	02 96       	adiw	r24, 0x02	; 2
    2678:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    267c:	e9 81       	ldd	r30, Y+1	; 0x01
    267e:	fa 81       	ldd	r31, Y+2	; 0x02
    2680:	96 89       	ldd	r25, Z+22	; 0x16
    2682:	80 91 a4 01 	lds	r24, 0x01A4
    2686:	89 17       	cp	r24, r25
    2688:	28 f4       	brcc	.+10     	; 0x2694 <prvCheckPendingReadyList+0x4c>
    268a:	e9 81       	ldd	r30, Y+1	; 0x01
    268c:	fa 81       	ldd	r31, Y+2	; 0x02
    268e:	86 89       	ldd	r24, Z+22	; 0x16
    2690:	80 93 a4 01 	sts	0x01A4, r24
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	86 89       	ldd	r24, Z+22	; 0x16
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	c9 01       	movw	r24, r18
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	82 0f       	add	r24, r18
    26ae:	93 1f       	adc	r25, r19
    26b0:	ac 01       	movw	r20, r24
    26b2:	45 55       	subi	r20, 0x55	; 85
    26b4:	5e 4f       	sbci	r21, 0xFE	; 254
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	9c 01       	movw	r18, r24
    26bc:	2e 5f       	subi	r18, 0xFE	; 254
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	ca 01       	movw	r24, r20
    26c2:	b9 01       	movw	r22, r18
    26c4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    26c8:	80 91 d3 01 	lds	r24, 0x01D3
    26cc:	88 23       	and	r24, r24
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <prvCheckPendingReadyList+0x8a>
    26d0:	c1 cf       	rjmp	.-126    	; 0x2654 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <prvCheckDelayedList+0x6>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <prvCheckDelayedList+0x8>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    26e8:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xTaskGetTickCount>
    26ec:	20 91 a7 01 	lds	r18, 0x01A7
    26f0:	30 91 a8 01 	lds	r19, 0x01A8
    26f4:	82 1b       	sub	r24, r18
    26f6:	93 0b       	sbc	r25, r19
    26f8:	90 93 aa 01 	sts	0x01AA, r25
    26fc:	80 93 a9 01 	sts	0x01A9, r24
    2700:	85 c0       	rjmp	.+266    	; 0x280c <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    2702:	80 91 a5 01 	lds	r24, 0x01A5
    2706:	90 91 a6 01 	lds	r25, 0x01A6
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	90 93 a6 01 	sts	0x01A6, r25
    2710:	80 93 a5 01 	sts	0x01A5, r24
		xPassedTicks--;
    2714:	80 91 a9 01 	lds	r24, 0x01A9
    2718:	90 91 aa 01 	lds	r25, 0x01AA
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	90 93 aa 01 	sts	0x01AA, r25
    2722:	80 93 a9 01 	sts	0x01A9, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2726:	80 91 a5 01 	lds	r24, 0x01A5
    272a:	90 91 a6 01 	lds	r25, 0x01A6
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	09 f0       	breq	.+2      	; 0x2734 <prvCheckDelayedList+0x58>
    2732:	64 c0       	rjmp	.+200    	; 0x27fc <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2734:	80 91 cf 01 	lds	r24, 0x01CF
    2738:	90 91 d0 01 	lds	r25, 0x01D0
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2740:	80 91 d1 01 	lds	r24, 0x01D1
    2744:	90 91 d2 01 	lds	r25, 0x01D2
    2748:	90 93 d0 01 	sts	0x01D0, r25
    274c:	80 93 cf 01 	sts	0x01CF, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	90 93 d2 01 	sts	0x01D2, r25
    2758:	80 93 d1 01 	sts	0x01D1, r24
    275c:	4f c0       	rjmp	.+158    	; 0x27fc <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    275e:	e0 91 cf 01 	lds	r30, 0x01CF
    2762:	f0 91 d0 01 	lds	r31, 0x01D0
    2766:	05 80       	ldd	r0, Z+5	; 0x05
    2768:	f6 81       	ldd	r31, Z+6	; 0x06
    276a:	e0 2d       	mov	r30, r0
    276c:	86 81       	ldd	r24, Z+6	; 0x06
    276e:	97 81       	ldd	r25, Z+7	; 0x07
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2774:	eb 81       	ldd	r30, Y+3	; 0x03
    2776:	fc 81       	ldd	r31, Y+4	; 0x04
    2778:	22 81       	ldd	r18, Z+2	; 0x02
    277a:	33 81       	ldd	r19, Z+3	; 0x03
    277c:	80 91 a5 01 	lds	r24, 0x01A5
    2780:	90 91 a6 01 	lds	r25, 0x01A6
    2784:	82 17       	cp	r24, r18
    2786:	93 07       	cpc	r25, r19
    2788:	08 f4       	brcc	.+2      	; 0x278c <prvCheckDelayedList+0xb0>
    278a:	40 c0       	rjmp	.+128    	; 0x280c <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    278c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	02 96       	adiw	r24, 0x02	; 2
    2794:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2798:	eb 81       	ldd	r30, Y+3	; 0x03
    279a:	fc 81       	ldd	r31, Y+4	; 0x04
    279c:	84 89       	ldd	r24, Z+20	; 0x14
    279e:	95 89       	ldd	r25, Z+21	; 0x15
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	29 f0       	breq	.+10     	; 0x27ae <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	0c 96       	adiw	r24, 0x0c	; 12
    27aa:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    27ae:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    27b0:	eb 81       	ldd	r30, Y+3	; 0x03
    27b2:	fc 81       	ldd	r31, Y+4	; 0x04
    27b4:	96 89       	ldd	r25, Z+22	; 0x16
    27b6:	80 91 a4 01 	lds	r24, 0x01A4
    27ba:	89 17       	cp	r24, r25
    27bc:	28 f4       	brcc	.+10     	; 0x27c8 <prvCheckDelayedList+0xec>
    27be:	eb 81       	ldd	r30, Y+3	; 0x03
    27c0:	fc 81       	ldd	r31, Y+4	; 0x04
    27c2:	86 89       	ldd	r24, Z+22	; 0x16
    27c4:	80 93 a4 01 	sts	0x01A4, r24
    27c8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ca:	fc 81       	ldd	r31, Y+4	; 0x04
    27cc:	86 89       	ldd	r24, Z+22	; 0x16
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	c9 01       	movw	r24, r18
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	82 0f       	add	r24, r18
    27e2:	93 1f       	adc	r25, r19
    27e4:	ac 01       	movw	r20, r24
    27e6:	45 55       	subi	r20, 0x55	; 85
    27e8:	5e 4f       	sbci	r21, 0xFE	; 254
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	9c 01       	movw	r18, r24
    27f0:	2e 5f       	subi	r18, 0xFE	; 254
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	ca 01       	movw	r24, r20
    27f6:	b9 01       	movw	r22, r18
    27f8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    27fc:	e0 91 cf 01 	lds	r30, 0x01CF
    2800:	f0 91 d0 01 	lds	r31, 0x01D0
    2804:	80 81       	ld	r24, Z
    2806:	88 23       	and	r24, r24
    2808:	09 f0       	breq	.+2      	; 0x280c <prvCheckDelayedList+0x130>
    280a:	a9 cf       	rjmp	.-174    	; 0x275e <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    280c:	80 91 a9 01 	lds	r24, 0x01A9
    2810:	90 91 aa 01 	lds	r25, 0x01AA
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	09 f0       	breq	.+2      	; 0x281a <prvCheckDelayedList+0x13e>
    2818:	74 cf       	rjmp	.-280    	; 0x2702 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    281a:	80 91 a5 01 	lds	r24, 0x01A5
    281e:	90 91 a6 01 	lds	r25, 0x01A6
    2822:	90 93 a8 01 	sts	0x01A8, r25
    2826:	80 93 a7 01 	sts	0x01A7, r24
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <vCoRoutineSchedule+0x6>
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2842:	0e 94 24 13 	call	0x2648	; 0x2648 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2846:	0e 94 6e 13 	call	0x26dc	; 0x26dc <prvCheckDelayedList>
    284a:	0a c0       	rjmp	.+20     	; 0x2860 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    284c:	80 91 a4 01 	lds	r24, 0x01A4
    2850:	88 23       	and	r24, r24
    2852:	09 f4       	brne	.+2      	; 0x2856 <vCoRoutineSchedule+0x1e>
    2854:	66 c0       	rjmp	.+204    	; 0x2922 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2856:	80 91 a4 01 	lds	r24, 0x01A4
    285a:	81 50       	subi	r24, 0x01	; 1
    285c:	80 93 a4 01 	sts	0x01A4, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2860:	80 91 a4 01 	lds	r24, 0x01A4
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	c9 01       	movw	r24, r18
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	82 0f       	add	r24, r18
    2878:	93 1f       	adc	r25, r19
    287a:	fc 01       	movw	r30, r24
    287c:	e5 55       	subi	r30, 0x55	; 85
    287e:	fe 4f       	sbci	r31, 0xFE	; 254
    2880:	80 81       	ld	r24, Z
    2882:	88 23       	and	r24, r24
    2884:	19 f3       	breq	.-58     	; 0x284c <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2886:	80 91 a4 01 	lds	r24, 0x01A4
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	c9 01       	movw	r24, r18
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	82 0f       	add	r24, r18
    289e:	93 1f       	adc	r25, r19
    28a0:	85 55       	subi	r24, 0x55	; 85
    28a2:	9e 4f       	sbci	r25, 0xFE	; 254
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	01 80       	ldd	r0, Z+1	; 0x01
    28ae:	f2 81       	ldd	r31, Z+2	; 0x02
    28b0:	e0 2d       	mov	r30, r0
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	92 83       	std	Z+2, r25	; 0x02
    28bc:	81 83       	std	Z+1, r24	; 0x01
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	21 81       	ldd	r18, Z+1	; 0x01
    28c4:	32 81       	ldd	r19, Z+2	; 0x02
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	03 96       	adiw	r24, 0x03	; 3
    28cc:	28 17       	cp	r18, r24
    28ce:	39 07       	cpc	r19, r25
    28d0:	59 f4       	brne	.+22     	; 0x28e8 <vCoRoutineSchedule+0xb0>
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	01 80       	ldd	r0, Z+1	; 0x01
    28d8:	f2 81       	ldd	r31, Z+2	; 0x02
    28da:	e0 2d       	mov	r30, r0
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	e9 81       	ldd	r30, Y+1	; 0x01
    28e2:	fa 81       	ldd	r31, Y+2	; 0x02
    28e4:	92 83       	std	Z+2, r25	; 0x02
    28e6:	81 83       	std	Z+1, r24	; 0x01
    28e8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ea:	fa 81       	ldd	r31, Y+2	; 0x02
    28ec:	01 80       	ldd	r0, Z+1	; 0x01
    28ee:	f2 81       	ldd	r31, Z+2	; 0x02
    28f0:	e0 2d       	mov	r30, r0
    28f2:	86 81       	ldd	r24, Z+6	; 0x06
    28f4:	97 81       	ldd	r25, Z+7	; 0x07
    28f6:	90 93 a3 01 	sts	0x01A3, r25
    28fa:	80 93 a2 01 	sts	0x01A2, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    28fe:	e0 91 a2 01 	lds	r30, 0x01A2
    2902:	f0 91 a3 01 	lds	r31, 0x01A3
    2906:	40 81       	ld	r20, Z
    2908:	51 81       	ldd	r21, Z+1	; 0x01
    290a:	80 91 a2 01 	lds	r24, 0x01A2
    290e:	90 91 a3 01 	lds	r25, 0x01A3
    2912:	e0 91 a2 01 	lds	r30, 0x01A2
    2916:	f0 91 a3 01 	lds	r31, 0x01A3
    291a:	27 89       	ldd	r18, Z+23	; 0x17
    291c:	62 2f       	mov	r22, r18
    291e:	fa 01       	movw	r30, r20
    2920:	09 95       	icall

	return;
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	0f 92       	push	r0
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2936:	19 82       	std	Y+1, r1	; 0x01
    2938:	13 c0       	rjmp	.+38     	; 0x2960 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	c9 01       	movw	r24, r18
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	85 55       	subi	r24, 0x55	; 85
    2954:	9e 4f       	sbci	r25, 0xFE	; 254
    2956:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	8f 5f       	subi	r24, 0xFF	; 255
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	50 f3       	brcs	.-44     	; 0x293a <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2966:	8d eb       	ldi	r24, 0xBD	; 189
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    296e:	86 ec       	ldi	r24, 0xC6	; 198
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2976:	83 ed       	ldi	r24, 0xD3	; 211
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    297e:	8d eb       	ldi	r24, 0xBD	; 189
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	90 93 d0 01 	sts	0x01D0, r25
    2986:	80 93 cf 01 	sts	0x01CF, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    298a:	86 ec       	ldi	r24, 0xC6	; 198
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	90 93 d2 01 	sts	0x01D2, r25
    2992:	80 93 d1 01 	sts	0x01D1, r24
}
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <xCoRoutineRemoveFromEventList+0x6>
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <xCoRoutineRemoveFromEventList+0x8>
    29a6:	0f 92       	push	r0
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	9d 83       	std	Y+5, r25	; 0x05
    29ae:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    29b0:	ec 81       	ldd	r30, Y+4	; 0x04
    29b2:	fd 81       	ldd	r31, Y+5	; 0x05
    29b4:	05 80       	ldd	r0, Z+5	; 0x05
    29b6:	f6 81       	ldd	r31, Z+6	; 0x06
    29b8:	e0 2d       	mov	r30, r0
    29ba:	86 81       	ldd	r24, Z+6	; 0x06
    29bc:	97 81       	ldd	r25, Z+7	; 0x07
    29be:	9b 83       	std	Y+3, r25	; 0x03
    29c0:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	0c 96       	adiw	r24, 0x0c	; 12
    29c8:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	9c 01       	movw	r18, r24
    29d2:	24 5f       	subi	r18, 0xF4	; 244
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	83 ed       	ldi	r24, 0xD3	; 211
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	b9 01       	movw	r22, r18
    29dc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    29e0:	ea 81       	ldd	r30, Y+2	; 0x02
    29e2:	fb 81       	ldd	r31, Y+3	; 0x03
    29e4:	96 89       	ldd	r25, Z+22	; 0x16
    29e6:	e0 91 a2 01 	lds	r30, 0x01A2
    29ea:	f0 91 a3 01 	lds	r31, 0x01A3
    29ee:	86 89       	ldd	r24, Z+22	; 0x16
    29f0:	98 17       	cp	r25, r24
    29f2:	18 f0       	brcs	.+6      	; 0x29fa <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    29fa:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <pvPortMalloc+0x6>
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <pvPortMalloc+0x8>
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    2a1e:	1a 82       	std	Y+2, r1	; 0x02
    2a20:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2a22:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2a26:	80 91 dc 01 	lds	r24, 0x01DC
    2a2a:	90 91 dd 01 	lds	r25, 0x01DD
    2a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a30:	3c 81       	ldd	r19, Y+4	; 0x04
    2a32:	82 0f       	add	r24, r18
    2a34:	93 1f       	adc	r25, r19
    2a36:	24 e0       	ldi	r18, 0x04	; 4
    2a38:	80 3b       	cpi	r24, 0xB0	; 176
    2a3a:	92 07       	cpc	r25, r18
    2a3c:	18 f5       	brcc	.+70     	; 0x2a84 <pvPortMalloc+0x76>
    2a3e:	20 91 dc 01 	lds	r18, 0x01DC
    2a42:	30 91 dd 01 	lds	r19, 0x01DD
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	28 0f       	add	r18, r24
    2a4c:	39 1f       	adc	r19, r25
    2a4e:	80 91 dc 01 	lds	r24, 0x01DC
    2a52:	90 91 dd 01 	lds	r25, 0x01DD
    2a56:	82 17       	cp	r24, r18
    2a58:	93 07       	cpc	r25, r19
    2a5a:	a0 f4       	brcc	.+40     	; 0x2a84 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2a5c:	80 91 dc 01 	lds	r24, 0x01DC
    2a60:	90 91 dd 01 	lds	r25, 0x01DD
    2a64:	82 52       	subi	r24, 0x22	; 34
    2a66:	9e 4f       	sbci	r25, 0xFE	; 254
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    2a6c:	20 91 dc 01 	lds	r18, 0x01DC
    2a70:	30 91 dd 01 	lds	r19, 0x01DD
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	82 0f       	add	r24, r18
    2a7a:	93 1f       	adc	r25, r19
    2a7c:	90 93 dd 01 	sts	0x01DD, r25
    2a80:	80 93 dc 01 	sts	0x01DC, r24
		}	
	}
	xTaskResumeAll();
    2a84:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <vPortFree+0x6>
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2aba:	10 92 dd 01 	sts	0x01DD, r1
    2abe:	10 92 dc 01 	sts	0x01DC, r1
}
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2ad0:	20 91 dc 01 	lds	r18, 0x01DC
    2ad4:	30 91 dd 01 	lds	r19, 0x01DD
    2ad8:	80 eb       	ldi	r24, 0xB0	; 176
    2ada:	94 e0       	ldi	r25, 0x04	; 4
    2adc:	82 1b       	sub	r24, r18
    2ade:	93 0b       	sbc	r25, r19
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <vListInitialise+0x6>
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	03 96       	adiw	r24, 0x03	; 3
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	92 83       	std	Z+2, r25	; 0x02
    2b00:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	8f ef       	ldi	r24, 0xFF	; 255
    2b08:	9f ef       	ldi	r25, 0xFF	; 255
    2b0a:	94 83       	std	Z+4, r25	; 0x04
    2b0c:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	03 96       	adiw	r24, 0x03	; 3
    2b14:	e9 81       	ldd	r30, Y+1	; 0x01
    2b16:	fa 81       	ldd	r31, Y+2	; 0x02
    2b18:	96 83       	std	Z+6, r25	; 0x06
    2b1a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	03 96       	adiw	r24, 0x03	; 3
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	90 87       	std	Z+8, r25	; 0x08
    2b28:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2e:	10 82       	st	Z, r1
}
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <vListInitialiseItem+0x6>
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2b48:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4c:	11 86       	std	Z+9, r1	; 0x09
    2b4e:	10 86       	std	Z+8, r1	; 0x08
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <vListInsertEnd+0x6>
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <vListInsertEnd+0x8>
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <vListInsertEnd+0xa>
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
    2b6c:	7e 83       	std	Y+6, r23	; 0x06
    2b6e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2b70:	eb 81       	ldd	r30, Y+3	; 0x03
    2b72:	fc 81       	ldd	r31, Y+4	; 0x04
    2b74:	81 81       	ldd	r24, Z+1	; 0x01
    2b76:	92 81       	ldd	r25, Z+2	; 0x02
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    2b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	ed 81       	ldd	r30, Y+5	; 0x05
    2b86:	fe 81       	ldd	r31, Y+6	; 0x06
    2b88:	93 83       	std	Z+3, r25	; 0x03
    2b8a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	81 81       	ldd	r24, Z+1	; 0x01
    2b92:	92 81       	ldd	r25, Z+2	; 0x02
    2b94:	ed 81       	ldd	r30, Y+5	; 0x05
    2b96:	fe 81       	ldd	r31, Y+6	; 0x06
    2b98:	95 83       	std	Z+5, r25	; 0x05
    2b9a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	02 80       	ldd	r0, Z+2	; 0x02
    2ba2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ba4:	e0 2d       	mov	r30, r0
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	95 83       	std	Z+5, r25	; 0x05
    2bac:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	93 83       	std	Z+3, r25	; 0x03
    2bb8:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc2:	92 83       	std	Z+2, r25	; 0x02
    2bc4:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2bc6:	ed 81       	ldd	r30, Y+5	; 0x05
    2bc8:	fe 81       	ldd	r31, Y+6	; 0x06
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bce:	91 87       	std	Z+9, r25	; 0x09
    2bd0:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	eb 81       	ldd	r30, Y+3	; 0x03
    2bdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bde:	80 83       	st	Z, r24
}
    2be0:	26 96       	adiw	r28, 0x06	; 6
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	28 97       	sbiw	r28, 0x08	; 8
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	78 87       	std	Y+8, r23	; 0x08
    2c0c:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2c0e:	ef 81       	ldd	r30, Y+7	; 0x07
    2c10:	f8 85       	ldd	r31, Y+8	; 0x08
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	2f ef       	ldi	r18, 0xFF	; 255
    2c20:	8f 3f       	cpi	r24, 0xFF	; 255
    2c22:	92 07       	cpc	r25, r18
    2c24:	39 f4       	brne	.+14     	; 0x2c34 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2c26:	ed 81       	ldd	r30, Y+5	; 0x05
    2c28:	fe 81       	ldd	r31, Y+6	; 0x06
    2c2a:	87 81       	ldd	r24, Z+7	; 0x07
    2c2c:	90 85       	ldd	r25, Z+8	; 0x08
    2c2e:	9c 83       	std	Y+4, r25	; 0x04
    2c30:	8b 83       	std	Y+3, r24	; 0x03
    2c32:	18 c0       	rjmp	.+48     	; 0x2c64 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	03 96       	adiw	r24, 0x03	; 3
    2c3a:	9c 83       	std	Y+4, r25	; 0x04
    2c3c:	8b 83       	std	Y+3, r24	; 0x03
    2c3e:	06 c0       	rjmp	.+12     	; 0x2c4c <vListInsert+0x5a>
    2c40:	eb 81       	ldd	r30, Y+3	; 0x03
    2c42:	fc 81       	ldd	r31, Y+4	; 0x04
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	9c 83       	std	Y+4, r25	; 0x04
    2c4a:	8b 83       	std	Y+3, r24	; 0x03
    2c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c50:	02 80       	ldd	r0, Z+2	; 0x02
    2c52:	f3 81       	ldd	r31, Z+3	; 0x03
    2c54:	e0 2d       	mov	r30, r0
    2c56:	20 81       	ld	r18, Z
    2c58:	31 81       	ldd	r19, Z+1	; 0x01
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	82 17       	cp	r24, r18
    2c60:	93 07       	cpc	r25, r19
    2c62:	70 f7       	brcc	.-36     	; 0x2c40 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2c64:	eb 81       	ldd	r30, Y+3	; 0x03
    2c66:	fc 81       	ldd	r31, Y+4	; 0x04
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	ef 81       	ldd	r30, Y+7	; 0x07
    2c6e:	f8 85       	ldd	r31, Y+8	; 0x08
    2c70:	93 83       	std	Z+3, r25	; 0x03
    2c72:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c74:	ef 81       	ldd	r30, Y+7	; 0x07
    2c76:	f8 85       	ldd	r31, Y+8	; 0x08
    2c78:	02 80       	ldd	r0, Z+2	; 0x02
    2c7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2c7c:	e0 2d       	mov	r30, r0
    2c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c80:	98 85       	ldd	r25, Y+8	; 0x08
    2c82:	95 83       	std	Z+5, r25	; 0x05
    2c84:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2c86:	ef 81       	ldd	r30, Y+7	; 0x07
    2c88:	f8 85       	ldd	r31, Y+8	; 0x08
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	95 83       	std	Z+5, r25	; 0x05
    2c90:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c92:	8f 81       	ldd	r24, Y+7	; 0x07
    2c94:	98 85       	ldd	r25, Y+8	; 0x08
    2c96:	eb 81       	ldd	r30, Y+3	; 0x03
    2c98:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9a:	93 83       	std	Z+3, r25	; 0x03
    2c9c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2c9e:	ef 81       	ldd	r30, Y+7	; 0x07
    2ca0:	f8 85       	ldd	r31, Y+8	; 0x08
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	91 87       	std	Z+9, r25	; 0x09
    2ca8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2caa:	ed 81       	ldd	r30, Y+5	; 0x05
    2cac:	fe 81       	ldd	r31, Y+6	; 0x06
    2cae:	80 81       	ld	r24, Z
    2cb0:	8f 5f       	subi	r24, 0xFF	; 255
    2cb2:	ed 81       	ldd	r30, Y+5	; 0x05
    2cb4:	fe 81       	ldd	r31, Y+6	; 0x06
    2cb6:	80 83       	st	Z, r24
}
    2cb8:	28 96       	adiw	r28, 0x08	; 8
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <vListRemove+0x6>
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <vListRemove+0x8>
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2cda:	eb 81       	ldd	r30, Y+3	; 0x03
    2cdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cde:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce0:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce6:	84 81       	ldd	r24, Z+4	; 0x04
    2ce8:	95 81       	ldd	r25, Z+5	; 0x05
    2cea:	15 96       	adiw	r26, 0x05	; 5
    2cec:	9c 93       	st	X, r25
    2cee:	8e 93       	st	-X, r24
    2cf0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	a4 81       	ldd	r26, Z+4	; 0x04
    2cf8:	b5 81       	ldd	r27, Z+5	; 0x05
    2cfa:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	13 96       	adiw	r26, 0x03	; 3
    2d04:	9c 93       	st	X, r25
    2d06:	8e 93       	st	-X, r24
    2d08:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0e:	80 85       	ldd	r24, Z+8	; 0x08
    2d10:	91 85       	ldd	r25, Z+9	; 0x09
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2d16:	e9 81       	ldd	r30, Y+1	; 0x01
    2d18:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1a:	21 81       	ldd	r18, Z+1	; 0x01
    2d1c:	32 81       	ldd	r19, Z+2	; 0x02
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	28 17       	cp	r18, r24
    2d24:	39 07       	cpc	r19, r25
    2d26:	41 f4       	brne	.+16     	; 0x2d38 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d28:	eb 81       	ldd	r30, Y+3	; 0x03
    2d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d2c:	84 81       	ldd	r24, Z+4	; 0x04
    2d2e:	95 81       	ldd	r25, Z+5	; 0x05
    2d30:	e9 81       	ldd	r30, Y+1	; 0x01
    2d32:	fa 81       	ldd	r31, Y+2	; 0x02
    2d34:	92 83       	std	Z+2, r25	; 0x02
    2d36:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2d38:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3c:	11 86       	std	Z+9, r1	; 0x09
    2d3e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2d40:	e9 81       	ldd	r30, Y+1	; 0x01
    2d42:	fa 81       	ldd	r31, Y+2	; 0x02
    2d44:	80 81       	ld	r24, Z
    2d46:	81 50       	subi	r24, 0x01	; 1
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	80 83       	st	Z, r24
}
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	28 97       	sbiw	r28, 0x08	; 8
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	7e 83       	std	Y+6, r23	; 0x06
    2d76:	6d 83       	std	Y+5, r22	; 0x05
    2d78:	58 87       	std	Y+8, r21	; 0x08
    2d7a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d80:	81 e1       	ldi	r24, 0x11	; 17
    2d82:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9c 83       	std	Y+4, r25	; 0x04
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d90:	fc 81       	ldd	r31, Y+4	; 0x04
    2d92:	82 e2       	ldi	r24, 0x22	; 34
    2d94:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2da0:	eb 81       	ldd	r30, Y+3	; 0x03
    2da2:	fc 81       	ldd	r31, Y+4	; 0x04
    2da4:	83 e3       	ldi	r24, 0x33	; 51
    2da6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	89 2f       	mov	r24, r25
    2dd2:	99 27       	eor	r25, r25
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	eb 81       	ldd	r30, Y+3	; 0x03
    2ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dde:	80 83       	st	Z, r24
	pxTopOfStack--;
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2dea:	eb 81       	ldd	r30, Y+3	; 0x03
    2dec:	fc 81       	ldd	r31, Y+4	; 0x04
    2dee:	10 82       	st	Z, r1
	pxTopOfStack--;
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfe:	80 e8       	ldi	r24, 0x80	; 128
    2e00:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2e0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e10:	10 82       	st	Z, r1
	pxTopOfStack--;
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2e1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	9c 81       	ldd	r25, Y+4	; 0x04
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2e2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e30:	fc 81       	ldd	r31, Y+4	; 0x04
    2e32:	83 e0       	ldi	r24, 0x03	; 3
    2e34:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	9c 83       	std	Y+4, r25	; 0x04
    2e3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2e40:	eb 81       	ldd	r30, Y+3	; 0x03
    2e42:	fc 81       	ldd	r31, Y+4	; 0x04
    2e44:	84 e0       	ldi	r24, 0x04	; 4
    2e46:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9c 83       	std	Y+4, r25	; 0x04
    2e50:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2e52:	eb 81       	ldd	r30, Y+3	; 0x03
    2e54:	fc 81       	ldd	r31, Y+4	; 0x04
    2e56:	85 e0       	ldi	r24, 0x05	; 5
    2e58:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	9c 83       	std	Y+4, r25	; 0x04
    2e62:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2e64:	eb 81       	ldd	r30, Y+3	; 0x03
    2e66:	fc 81       	ldd	r31, Y+4	; 0x04
    2e68:	86 e0       	ldi	r24, 0x06	; 6
    2e6a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9c 83       	std	Y+4, r25	; 0x04
    2e74:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	87 e0       	ldi	r24, 0x07	; 7
    2e7c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	9c 81       	ldd	r25, Y+4	; 0x04
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9c 83       	std	Y+4, r25	; 0x04
    2e86:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2e88:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8c:	88 e0       	ldi	r24, 0x08	; 8
    2e8e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9e:	89 e0       	ldi	r24, 0x09	; 9
    2ea0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2eac:	eb 81       	ldd	r30, Y+3	; 0x03
    2eae:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb0:	80 e1       	ldi	r24, 0x10	; 16
    2eb2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9c 83       	std	Y+4, r25	; 0x04
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2ebe:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec2:	81 e1       	ldi	r24, 0x11	; 17
    2ec4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed4:	82 e1       	ldi	r24, 0x12	; 18
    2ed6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	9c 83       	std	Y+4, r25	; 0x04
    2ee0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee6:	83 e1       	ldi	r24, 0x13	; 19
    2ee8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9c 83       	std	Y+4, r25	; 0x04
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef8:	84 e1       	ldi	r24, 0x14	; 20
    2efa:	80 83       	st	Z, r24
	pxTopOfStack--;
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9c 83       	std	Y+4, r25	; 0x04
    2f04:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2f06:	eb 81       	ldd	r30, Y+3	; 0x03
    2f08:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0a:	85 e1       	ldi	r24, 0x15	; 21
    2f0c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9c 83       	std	Y+4, r25	; 0x04
    2f16:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2f18:	eb 81       	ldd	r30, Y+3	; 0x03
    2f1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f1c:	86 e1       	ldi	r24, 0x16	; 22
    2f1e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	9c 81       	ldd	r25, Y+4	; 0x04
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f2e:	87 e1       	ldi	r24, 0x17	; 23
    2f30:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2f3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f40:	88 e1       	ldi	r24, 0x18	; 24
    2f42:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	9c 81       	ldd	r25, Y+4	; 0x04
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9c 83       	std	Y+4, r25	; 0x04
    2f4c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f50:	fc 81       	ldd	r31, Y+4	; 0x04
    2f52:	89 e1       	ldi	r24, 0x19	; 25
    2f54:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2f60:	eb 81       	ldd	r30, Y+3	; 0x03
    2f62:	fc 81       	ldd	r31, Y+4	; 0x04
    2f64:	80 e2       	ldi	r24, 0x20	; 32
    2f66:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	9c 83       	std	Y+4, r25	; 0x04
    2f70:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2f72:	eb 81       	ldd	r30, Y+3	; 0x03
    2f74:	fc 81       	ldd	r31, Y+4	; 0x04
    2f76:	81 e2       	ldi	r24, 0x21	; 33
    2f78:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2f84:	eb 81       	ldd	r30, Y+3	; 0x03
    2f86:	fc 81       	ldd	r31, Y+4	; 0x04
    2f88:	82 e2       	ldi	r24, 0x22	; 34
    2f8a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9c 83       	std	Y+4, r25	; 0x04
    2f94:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2f96:	eb 81       	ldd	r30, Y+3	; 0x03
    2f98:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9a:	83 e2       	ldi	r24, 0x23	; 35
    2f9c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    2faa:	98 85       	ldd	r25, Y+8	; 0x08
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9c 83       	std	Y+4, r25	; 0x04
    2fc0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	89 2f       	mov	r24, r25
    2fc8:	99 27       	eor	r25, r25
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe4:	86 e2       	ldi	r24, 0x26	; 38
    2fe6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff6:	87 e2       	ldi	r24, 0x27	; 39
    2ff8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    3004:	eb 81       	ldd	r30, Y+3	; 0x03
    3006:	fc 81       	ldd	r31, Y+4	; 0x04
    3008:	88 e2       	ldi	r24, 0x28	; 40
    300a:	80 83       	st	Z, r24
	pxTopOfStack--;
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    3016:	eb 81       	ldd	r30, Y+3	; 0x03
    3018:	fc 81       	ldd	r31, Y+4	; 0x04
    301a:	89 e2       	ldi	r24, 0x29	; 41
    301c:	80 83       	st	Z, r24
	pxTopOfStack--;
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	9c 83       	std	Y+4, r25	; 0x04
    3026:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    3028:	eb 81       	ldd	r30, Y+3	; 0x03
    302a:	fc 81       	ldd	r31, Y+4	; 0x04
    302c:	80 e3       	ldi	r24, 0x30	; 48
    302e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	9c 81       	ldd	r25, Y+4	; 0x04
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    303a:	eb 81       	ldd	r30, Y+3	; 0x03
    303c:	fc 81       	ldd	r31, Y+4	; 0x04
    303e:	81 e3       	ldi	r24, 0x31	; 49
    3040:	80 83       	st	Z, r24
	pxTopOfStack--;
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3050:	28 96       	adiw	r28, 0x08	; 8
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    306a:	0e 94 21 19 	call	0x3242	; 0x3242 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    306e:	a0 91 8e 06 	lds	r26, 0x068E
    3072:	b0 91 8f 06 	lds	r27, 0x068F
    3076:	cd 91       	ld	r28, X+
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	dd 91       	ld	r29, X+
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	ff 91       	pop	r31
    3080:	ef 91       	pop	r30
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	bf 91       	pop	r27
    3088:	af 91       	pop	r26
    308a:	9f 91       	pop	r25
    308c:	8f 91       	pop	r24
    308e:	7f 91       	pop	r23
    3090:	6f 91       	pop	r22
    3092:	5f 91       	pop	r21
    3094:	4f 91       	pop	r20
    3096:	3f 91       	pop	r19
    3098:	2f 91       	pop	r18
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	cf 90       	pop	r12
    30a6:	bf 90       	pop	r11
    30a8:	af 90       	pop	r10
    30aa:	9f 90       	pop	r9
    30ac:	8f 90       	pop	r8
    30ae:	7f 90       	pop	r7
    30b0:	6f 90       	pop	r6
    30b2:	5f 90       	pop	r5
    30b4:	4f 90       	pop	r4
    30b6:	3f 90       	pop	r3
    30b8:	2f 90       	pop	r2
    30ba:	1f 90       	pop	r1
    30bc:	0f 90       	pop	r0
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    30c2:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
}
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    30da:	0f 92       	push	r0
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	0f 92       	push	r0
    30e2:	1f 92       	push	r1
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 92       	push	r2
    30e8:	3f 92       	push	r3
    30ea:	4f 92       	push	r4
    30ec:	5f 92       	push	r5
    30ee:	6f 92       	push	r6
    30f0:	7f 92       	push	r7
    30f2:	8f 92       	push	r8
    30f4:	9f 92       	push	r9
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	2f 93       	push	r18
    3108:	3f 93       	push	r19
    310a:	4f 93       	push	r20
    310c:	5f 93       	push	r21
    310e:	6f 93       	push	r22
    3110:	7f 93       	push	r23
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	ef 93       	push	r30
    3120:	ff 93       	push	r31
    3122:	a0 91 8e 06 	lds	r26, 0x068E
    3126:	b0 91 8f 06 	lds	r27, 0x068F
    312a:	0d b6       	in	r0, 0x3d	; 61
    312c:	0d 92       	st	X+, r0
    312e:	0e b6       	in	r0, 0x3e	; 62
    3130:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3132:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    3136:	a0 91 8e 06 	lds	r26, 0x068E
    313a:	b0 91 8f 06 	lds	r27, 0x068F
    313e:	cd 91       	ld	r28, X+
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	dd 91       	ld	r29, X+
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	ff 91       	pop	r31
    3148:	ef 91       	pop	r30
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	bf 91       	pop	r27
    3150:	af 91       	pop	r26
    3152:	9f 91       	pop	r25
    3154:	8f 91       	pop	r24
    3156:	7f 91       	pop	r23
    3158:	6f 91       	pop	r22
    315a:	5f 91       	pop	r21
    315c:	4f 91       	pop	r20
    315e:	3f 91       	pop	r19
    3160:	2f 91       	pop	r18
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	df 90       	pop	r13
    316c:	cf 90       	pop	r12
    316e:	bf 90       	pop	r11
    3170:	af 90       	pop	r10
    3172:	9f 90       	pop	r9
    3174:	8f 90       	pop	r8
    3176:	7f 90       	pop	r7
    3178:	6f 90       	pop	r6
    317a:	5f 90       	pop	r5
    317c:	4f 90       	pop	r4
    317e:	3f 90       	pop	r3
    3180:	2f 90       	pop	r2
    3182:	1f 90       	pop	r1
    3184:	0f 90       	pop	r0
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	0f 90       	pop	r0

	asm volatile ( "ret" );
    318a:	08 95       	ret

0000318c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	0f 92       	push	r0
    3194:	1f 92       	push	r1
    3196:	11 24       	eor	r1, r1
    3198:	2f 92       	push	r2
    319a:	3f 92       	push	r3
    319c:	4f 92       	push	r4
    319e:	5f 92       	push	r5
    31a0:	6f 92       	push	r6
    31a2:	7f 92       	push	r7
    31a4:	8f 92       	push	r8
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	2f 93       	push	r18
    31ba:	3f 93       	push	r19
    31bc:	4f 93       	push	r20
    31be:	5f 93       	push	r21
    31c0:	6f 93       	push	r22
    31c2:	7f 93       	push	r23
    31c4:	8f 93       	push	r24
    31c6:	9f 93       	push	r25
    31c8:	af 93       	push	r26
    31ca:	bf 93       	push	r27
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	ef 93       	push	r30
    31d2:	ff 93       	push	r31
    31d4:	a0 91 8e 06 	lds	r26, 0x068E
    31d8:	b0 91 8f 06 	lds	r27, 0x068F
    31dc:	0d b6       	in	r0, 0x3d	; 61
    31de:	0d 92       	st	X+, r0
    31e0:	0e b6       	in	r0, 0x3e	; 62
    31e2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    31e4:	0e 94 27 21 	call	0x424e	; 0x424e <vTaskIncrementTick>
	vTaskSwitchContext();
    31e8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    31ec:	a0 91 8e 06 	lds	r26, 0x068E
    31f0:	b0 91 8f 06 	lds	r27, 0x068F
    31f4:	cd 91       	ld	r28, X+
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	dd 91       	ld	r29, X+
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	ff 91       	pop	r31
    31fe:	ef 91       	pop	r30
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	bf 91       	pop	r27
    3206:	af 91       	pop	r26
    3208:	9f 91       	pop	r25
    320a:	8f 91       	pop	r24
    320c:	7f 91       	pop	r23
    320e:	6f 91       	pop	r22
    3210:	5f 91       	pop	r21
    3212:	4f 91       	pop	r20
    3214:	3f 91       	pop	r19
    3216:	2f 91       	pop	r18
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	bf 90       	pop	r11
    3226:	af 90       	pop	r10
    3228:	9f 90       	pop	r9
    322a:	8f 90       	pop	r8
    322c:	7f 90       	pop	r7
    322e:	6f 90       	pop	r6
    3230:	5f 90       	pop	r5
    3232:	4f 90       	pop	r4
    3234:	3f 90       	pop	r3
    3236:	2f 90       	pop	r2
    3238:	1f 90       	pop	r1
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3240:	08 95       	ret

00003242 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <prvSetupTimerInterrupt+0x6>
    3248:	00 d0       	rcall	.+0      	; 0x324a <prvSetupTimerInterrupt+0x8>
    324a:	00 d0       	rcall	.+0      	; 0x324c <prvSetupTimerInterrupt+0xa>
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3250:	80 e8       	ldi	r24, 0x80	; 128
    3252:	9e e3       	ldi	r25, 0x3E	; 62
    3254:	a0 e0       	ldi	r26, 0x00	; 0
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	ad 83       	std	Y+5, r26	; 0x05
    325e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	ad 81       	ldd	r26, Y+5	; 0x05
    3266:	be 81       	ldd	r27, Y+6	; 0x06
    3268:	68 94       	set
    326a:	15 f8       	bld	r1, 5
    326c:	b6 95       	lsr	r27
    326e:	a7 95       	ror	r26
    3270:	97 95       	ror	r25
    3272:	87 95       	ror	r24
    3274:	16 94       	lsr	r1
    3276:	d1 f7       	brne	.-12     	; 0x326c <prvSetupTimerInterrupt+0x2a>
    3278:	8b 83       	std	Y+3, r24	; 0x03
    327a:	9c 83       	std	Y+4, r25	; 0x04
    327c:	ad 83       	std	Y+5, r26	; 0x05
    327e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	ad 81       	ldd	r26, Y+5	; 0x05
    3286:	be 81       	ldd	r27, Y+6	; 0x06
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	a1 09       	sbc	r26, r1
    328c:	b1 09       	sbc	r27, r1
    328e:	8b 83       	std	Y+3, r24	; 0x03
    3290:	9c 83       	std	Y+4, r25	; 0x04
    3292:	ad 83       	std	Y+5, r26	; 0x05
    3294:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	9c 81       	ldd	r25, Y+4	; 0x04
    329e:	ad 81       	ldd	r26, Y+5	; 0x05
    32a0:	be 81       	ldd	r27, Y+6	; 0x06
    32a2:	89 2f       	mov	r24, r25
    32a4:	9a 2f       	mov	r25, r26
    32a6:	ab 2f       	mov	r26, r27
    32a8:	bb 27       	eor	r27, r27
    32aa:	8b 83       	std	Y+3, r24	; 0x03
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	ad 83       	std	Y+5, r26	; 0x05
    32b0:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    32b6:	eb e4       	ldi	r30, 0x4B	; 75
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    32be:	ea e4       	ldi	r30, 0x4A	; 74
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    32c6:	8b e0       	ldi	r24, 0x0B	; 11
    32c8:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    32ca:	ee e4       	ldi	r30, 0x4E	; 78
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    32d2:	e9 e5       	ldi	r30, 0x59	; 89
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	80 61       	ori	r24, 0x10	; 16
    32de:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    32e0:	e9 e5       	ldi	r30, 0x59	; 89
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	80 83       	st	Z, r24
}
    32e8:	26 96       	adiw	r28, 0x06	; 6
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    32fa:	0e 94 c6 18 	call	0x318c	; 0x318c <vPortYieldFromTick>
		asm volatile ( "reti" );
    32fe:	18 95       	reti

00003300 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	28 97       	sbiw	r28, 0x08	; 8
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	8f 83       	std	Y+7, r24	; 0x07
    3316:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3318:	1a 82       	std	Y+2, r1	; 0x02
    331a:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    331c:	8f 81       	ldd	r24, Y+7	; 0x07
    331e:	88 23       	and	r24, r24
    3320:	09 f4       	brne	.+2      	; 0x3324 <xQueueCreate+0x24>
    3322:	8c c0       	rjmp	.+280    	; 0x343c <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3324:	8f e1       	ldi	r24, 0x1F	; 31
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <pvPortMalloc>
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	09 f4       	brne	.+2      	; 0x333a <xQueueCreate+0x3a>
    3338:	81 c0       	rjmp	.+258    	; 0x343c <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    333a:	8f 81       	ldd	r24, Y+7	; 0x07
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	88 85       	ldd	r24, Y+8	; 0x08
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	ac 01       	movw	r20, r24
    3348:	24 9f       	mul	r18, r20
    334a:	c0 01       	movw	r24, r0
    334c:	25 9f       	mul	r18, r21
    334e:	90 0d       	add	r25, r0
    3350:	34 9f       	mul	r19, r20
    3352:	90 0d       	add	r25, r0
    3354:	11 24       	eor	r1, r1
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	9c 81       	ldd	r25, Y+4	; 0x04
    3360:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <pvPortMalloc>
    3364:	ed 81       	ldd	r30, Y+5	; 0x05
    3366:	fe 81       	ldd	r31, Y+6	; 0x06
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    336c:	ed 81       	ldd	r30, Y+5	; 0x05
    336e:	fe 81       	ldd	r31, Y+6	; 0x06
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	09 f4       	brne	.+2      	; 0x337a <xQueueCreate+0x7a>
    3378:	5d c0       	rjmp	.+186    	; 0x3434 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    337a:	ed 81       	ldd	r30, Y+5	; 0x05
    337c:	fe 81       	ldd	r31, Y+6	; 0x06
    337e:	40 81       	ld	r20, Z
    3380:	51 81       	ldd	r21, Z+1	; 0x01
    3382:	8f 81       	ldd	r24, Y+7	; 0x07
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	88 85       	ldd	r24, Y+8	; 0x08
    338a:	88 2f       	mov	r24, r24
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	bc 01       	movw	r22, r24
    3390:	26 9f       	mul	r18, r22
    3392:	c0 01       	movw	r24, r0
    3394:	27 9f       	mul	r18, r23
    3396:	90 0d       	add	r25, r0
    3398:	36 9f       	mul	r19, r22
    339a:	90 0d       	add	r25, r0
    339c:	11 24       	eor	r1, r1
    339e:	84 0f       	add	r24, r20
    33a0:	95 1f       	adc	r25, r21
    33a2:	ed 81       	ldd	r30, Y+5	; 0x05
    33a4:	fe 81       	ldd	r31, Y+6	; 0x06
    33a6:	93 83       	std	Z+3, r25	; 0x03
    33a8:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    33aa:	ed 81       	ldd	r30, Y+5	; 0x05
    33ac:	fe 81       	ldd	r31, Y+6	; 0x06
    33ae:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    33b0:	ed 81       	ldd	r30, Y+5	; 0x05
    33b2:	fe 81       	ldd	r31, Y+6	; 0x06
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	ed 81       	ldd	r30, Y+5	; 0x05
    33ba:	fe 81       	ldd	r31, Y+6	; 0x06
    33bc:	95 83       	std	Z+5, r25	; 0x05
    33be:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    33c0:	ed 81       	ldd	r30, Y+5	; 0x05
    33c2:	fe 81       	ldd	r31, Y+6	; 0x06
    33c4:	40 81       	ld	r20, Z
    33c6:	51 81       	ldd	r21, Z+1	; 0x01
    33c8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ca:	88 2f       	mov	r24, r24
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	9c 01       	movw	r18, r24
    33d0:	21 50       	subi	r18, 0x01	; 1
    33d2:	30 40       	sbci	r19, 0x00	; 0
    33d4:	88 85       	ldd	r24, Y+8	; 0x08
    33d6:	88 2f       	mov	r24, r24
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	bc 01       	movw	r22, r24
    33dc:	26 9f       	mul	r18, r22
    33de:	c0 01       	movw	r24, r0
    33e0:	27 9f       	mul	r18, r23
    33e2:	90 0d       	add	r25, r0
    33e4:	36 9f       	mul	r19, r22
    33e6:	90 0d       	add	r25, r0
    33e8:	11 24       	eor	r1, r1
    33ea:	84 0f       	add	r24, r20
    33ec:	95 1f       	adc	r25, r21
    33ee:	ed 81       	ldd	r30, Y+5	; 0x05
    33f0:	fe 81       	ldd	r31, Y+6	; 0x06
    33f2:	97 83       	std	Z+7, r25	; 0x07
    33f4:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    33f6:	ed 81       	ldd	r30, Y+5	; 0x05
    33f8:	fe 81       	ldd	r31, Y+6	; 0x06
    33fa:	8f 81       	ldd	r24, Y+7	; 0x07
    33fc:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    33fe:	ed 81       	ldd	r30, Y+5	; 0x05
    3400:	fe 81       	ldd	r31, Y+6	; 0x06
    3402:	88 85       	ldd	r24, Y+8	; 0x08
    3404:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    3406:	ed 81       	ldd	r30, Y+5	; 0x05
    3408:	fe 81       	ldd	r31, Y+6	; 0x06
    340a:	8f ef       	ldi	r24, 0xFF	; 255
    340c:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    340e:	ed 81       	ldd	r30, Y+5	; 0x05
    3410:	fe 81       	ldd	r31, Y+6	; 0x06
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    3414:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	08 96       	adiw	r24, 0x08	; 8
    341c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	41 96       	adiw	r24, 0x11	; 17
    3426:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	9a 83       	std	Y+2, r25	; 0x02
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	04 c0       	rjmp	.+8      	; 0x343c <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    3434:	8d 81       	ldd	r24, Y+5	; 0x05
    3436:	9e 81       	ldd	r25, Y+6	; 0x06
    3438:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3440:	28 96       	adiw	r28, 0x08	; 8
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	cf 91       	pop	r28
    344e:	df 91       	pop	r29
    3450:	08 95       	ret

00003452 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    3452:	df 93       	push	r29
    3454:	cf 93       	push	r28
    3456:	00 d0       	rcall	.+0      	; 0x3458 <xQueueCreateCountingSemaphore+0x6>
    3458:	00 d0       	rcall	.+0      	; 0x345a <xQueueCreateCountingSemaphore+0x8>
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	8b 83       	std	Y+3, r24	; 0x03
    3460:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	0e 94 80 19 	call	0x3300	; 0x3300 <xQueueCreate>
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	9a 81       	ldd	r25, Y+2	; 0x02
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	21 f0       	breq	.+8      	; 0x347e <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    3476:	e9 81       	ldd	r30, Y+1	; 0x01
    3478:	fa 81       	ldd	r31, Y+2	; 0x02
    347a:	8c 81       	ldd	r24, Y+4	; 0x04
    347c:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	2c 97       	sbiw	r28, 0x0c	; 12
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
    34a8:	78 87       	std	Y+8, r23	; 0x08
    34aa:	6f 83       	std	Y+7, r22	; 0x07
    34ac:	5a 87       	std	Y+10, r21	; 0x0a
    34ae:	49 87       	std	Y+9, r20	; 0x09
    34b0:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    34b2:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    34ba:	ed 81       	ldd	r30, Y+5	; 0x05
    34bc:	fe 81       	ldd	r31, Y+6	; 0x06
    34be:	92 8d       	ldd	r25, Z+26	; 0x1a
    34c0:	ed 81       	ldd	r30, Y+5	; 0x05
    34c2:	fe 81       	ldd	r31, Y+6	; 0x06
    34c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    34c6:	98 17       	cp	r25, r24
    34c8:	d8 f4       	brcc	.+54     	; 0x3500 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	2f 81       	ldd	r18, Y+7	; 0x07
    34d0:	38 85       	ldd	r19, Y+8	; 0x08
    34d2:	b9 01       	movw	r22, r18
    34d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    34d6:	0e 94 83 1c 	call	0x3906	; 0x3906 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    34da:	ed 81       	ldd	r30, Y+5	; 0x05
    34dc:	fe 81       	ldd	r31, Y+6	; 0x06
    34de:	81 89       	ldd	r24, Z+17	; 0x11
    34e0:	88 23       	and	r24, r24
    34e2:	49 f0       	breq	.+18     	; 0x34f6 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	41 96       	adiw	r24, 0x11	; 17
    34ea:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    34f2:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    34f6:	0f 90       	pop	r0
    34f8:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	8c 87       	std	Y+12, r24	; 0x0c
    34fe:	5c c0       	rjmp	.+184    	; 0x35b8 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	21 f4       	brne	.+8      	; 0x3510 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3508:	0f 90       	pop	r0
    350a:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    350c:	1c 86       	std	Y+12, r1	; 0x0c
    350e:	54 c0       	rjmp	.+168    	; 0x35b8 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	88 23       	and	r24, r24
    3514:	31 f4       	brne	.+12     	; 0x3522 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3516:	ce 01       	movw	r24, r28
    3518:	02 96       	adiw	r24, 0x02	; 2
    351a:	0e 94 00 23 	call	0x4600	; 0x4600 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    3522:	0f 90       	pop	r0
    3524:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3526:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	0f 92       	push	r0
    3530:	ed 81       	ldd	r30, Y+5	; 0x05
    3532:	fe 81       	ldd	r31, Y+6	; 0x06
    3534:	85 8d       	ldd	r24, Z+29	; 0x1d
    3536:	8f 3f       	cpi	r24, 0xFF	; 255
    3538:	19 f4       	brne	.+6      	; 0x3540 <xQueueGenericSend+0xb0>
    353a:	ed 81       	ldd	r30, Y+5	; 0x05
    353c:	fe 81       	ldd	r31, Y+6	; 0x06
    353e:	15 8e       	std	Z+29, r1	; 0x1d
    3540:	ed 81       	ldd	r30, Y+5	; 0x05
    3542:	fe 81       	ldd	r31, Y+6	; 0x06
    3544:	86 8d       	ldd	r24, Z+30	; 0x1e
    3546:	8f 3f       	cpi	r24, 0xFF	; 255
    3548:	19 f4       	brne	.+6      	; 0x3550 <xQueueGenericSend+0xc0>
    354a:	ed 81       	ldd	r30, Y+5	; 0x05
    354c:	fe 81       	ldd	r31, Y+6	; 0x06
    354e:	16 8e       	std	Z+30, r1	; 0x1e
    3550:	0f 90       	pop	r0
    3552:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3554:	ce 01       	movw	r24, r28
    3556:	02 96       	adiw	r24, 0x02	; 2
    3558:	9e 01       	movw	r18, r28
    355a:	27 5f       	subi	r18, 0xF7	; 247
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	b9 01       	movw	r22, r18
    3560:	0e 94 19 23 	call	0x4632	; 0x4632 <xTaskCheckForTimeOut>
    3564:	88 23       	and	r24, r24
    3566:	09 f5       	brne	.+66     	; 0x35aa <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <prvIsQueueFull>
    3570:	88 23       	and	r24, r24
    3572:	a1 f0       	breq	.+40     	; 0x359c <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	08 96       	adiw	r24, 0x08	; 8
    357a:	29 85       	ldd	r18, Y+9	; 0x09
    357c:	3a 85       	ldd	r19, Y+10	; 0x0a
    357e:	b9 01       	movw	r22, r18
    3580:	0e 94 62 22 	call	0x44c4	; 0x44c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    358c:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    3590:	88 23       	and	r24, r24
    3592:	09 f0       	breq	.+2      	; 0x3596 <xQueueGenericSend+0x106>
    3594:	8f cf       	rjmp	.-226    	; 0x34b4 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    3596:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
    359a:	8c cf       	rjmp	.-232    	; 0x34b4 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    35a4:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    35a8:	85 cf       	rjmp	.-246    	; 0x34b4 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    35b2:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    35b6:	1c 86       	std	Y+12, r1	; 0x0c
    35b8:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    35ba:	2c 96       	adiw	r28, 0x0c	; 12
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	08 95       	ret

000035cc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	29 97       	sbiw	r28, 0x09	; 9
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	9c 83       	std	Y+4, r25	; 0x04
    35e2:	8b 83       	std	Y+3, r24	; 0x03
    35e4:	7e 83       	std	Y+6, r23	; 0x06
    35e6:	6d 83       	std	Y+5, r22	; 0x05
    35e8:	58 87       	std	Y+8, r21	; 0x08
    35ea:	4f 83       	std	Y+7, r20	; 0x07
    35ec:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    35ee:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    35f0:	eb 81       	ldd	r30, Y+3	; 0x03
    35f2:	fc 81       	ldd	r31, Y+4	; 0x04
    35f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    35f6:	eb 81       	ldd	r30, Y+3	; 0x03
    35f8:	fc 81       	ldd	r31, Y+4	; 0x04
    35fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    35fc:	98 17       	cp	r25, r24
    35fe:	40 f5       	brcc	.+80     	; 0x3650 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3600:	8b 81       	ldd	r24, Y+3	; 0x03
    3602:	9c 81       	ldd	r25, Y+4	; 0x04
    3604:	2d 81       	ldd	r18, Y+5	; 0x05
    3606:	3e 81       	ldd	r19, Y+6	; 0x06
    3608:	b9 01       	movw	r22, r18
    360a:	49 85       	ldd	r20, Y+9	; 0x09
    360c:	0e 94 83 1c 	call	0x3906	; 0x3906 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3610:	eb 81       	ldd	r30, Y+3	; 0x03
    3612:	fc 81       	ldd	r31, Y+4	; 0x04
    3614:	86 8d       	ldd	r24, Z+30	; 0x1e
    3616:	8f 3f       	cpi	r24, 0xFF	; 255
    3618:	89 f4       	brne	.+34     	; 0x363c <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    361a:	eb 81       	ldd	r30, Y+3	; 0x03
    361c:	fc 81       	ldd	r31, Y+4	; 0x04
    361e:	81 89       	ldd	r24, Z+17	; 0x11
    3620:	88 23       	and	r24, r24
    3622:	99 f0       	breq	.+38     	; 0x364a <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	41 96       	adiw	r24, 0x11	; 17
    362a:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    362e:	88 23       	and	r24, r24
    3630:	61 f0       	breq	.+24     	; 0x364a <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3632:	ef 81       	ldd	r30, Y+7	; 0x07
    3634:	f8 85       	ldd	r31, Y+8	; 0x08
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	80 83       	st	Z, r24
    363a:	07 c0       	rjmp	.+14     	; 0x364a <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    363c:	eb 81       	ldd	r30, Y+3	; 0x03
    363e:	fc 81       	ldd	r31, Y+4	; 0x04
    3640:	86 8d       	ldd	r24, Z+30	; 0x1e
    3642:	8f 5f       	subi	r24, 0xFF	; 255
    3644:	eb 81       	ldd	r30, Y+3	; 0x03
    3646:	fc 81       	ldd	r31, Y+4	; 0x04
    3648:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	8a 83       	std	Y+2, r24	; 0x02
    364e:	01 c0       	rjmp	.+2      	; 0x3652 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3650:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3654:	29 96       	adiw	r28, 0x09	; 9
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	2e 97       	sbiw	r28, 0x0e	; 14
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	98 87       	std	Y+8, r25	; 0x08
    367c:	8f 83       	std	Y+7, r24	; 0x07
    367e:	7a 87       	std	Y+10, r23	; 0x0a
    3680:	69 87       	std	Y+9, r22	; 0x09
    3682:	5c 87       	std	Y+12, r21	; 0x0c
    3684:	4b 87       	std	Y+11, r20	; 0x0b
    3686:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3688:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3690:	ef 81       	ldd	r30, Y+7	; 0x07
    3692:	f8 85       	ldd	r31, Y+8	; 0x08
    3694:	82 8d       	ldd	r24, Z+26	; 0x1a
    3696:	88 23       	and	r24, r24
    3698:	09 f4       	brne	.+2      	; 0x369c <xQueueGenericReceive+0x36>
    369a:	3f c0       	rjmp	.+126    	; 0x371a <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    369c:	ef 81       	ldd	r30, Y+7	; 0x07
    369e:	f8 85       	ldd	r31, Y+8	; 0x08
    36a0:	86 81       	ldd	r24, Z+6	; 0x06
    36a2:	97 81       	ldd	r25, Z+7	; 0x07
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    36a8:	8f 81       	ldd	r24, Y+7	; 0x07
    36aa:	98 85       	ldd	r25, Y+8	; 0x08
    36ac:	29 85       	ldd	r18, Y+9	; 0x09
    36ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    36b0:	b9 01       	movw	r22, r18
    36b2:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    36b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b8:	88 23       	and	r24, r24
    36ba:	b1 f4       	brne	.+44     	; 0x36e8 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    36bc:	ef 81       	ldd	r30, Y+7	; 0x07
    36be:	f8 85       	ldd	r31, Y+8	; 0x08
    36c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    36c2:	81 50       	subi	r24, 0x01	; 1
    36c4:	ef 81       	ldd	r30, Y+7	; 0x07
    36c6:	f8 85       	ldd	r31, Y+8	; 0x08
    36c8:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    36ca:	ef 81       	ldd	r30, Y+7	; 0x07
    36cc:	f8 85       	ldd	r31, Y+8	; 0x08
    36ce:	80 85       	ldd	r24, Z+8	; 0x08
    36d0:	88 23       	and	r24, r24
    36d2:	f1 f0       	breq	.+60     	; 0x3710 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    36d4:	8f 81       	ldd	r24, Y+7	; 0x07
    36d6:	98 85       	ldd	r25, Y+8	; 0x08
    36d8:	08 96       	adiw	r24, 0x08	; 8
    36da:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	b9 f4       	brne	.+46     	; 0x3710 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    36e2:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
    36e6:	14 c0       	rjmp	.+40     	; 0x3710 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    36e8:	ef 81       	ldd	r30, Y+7	; 0x07
    36ea:	f8 85       	ldd	r31, Y+8	; 0x08
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	97 83       	std	Z+7, r25	; 0x07
    36f2:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    36f4:	ef 81       	ldd	r30, Y+7	; 0x07
    36f6:	f8 85       	ldd	r31, Y+8	; 0x08
    36f8:	81 89       	ldd	r24, Z+17	; 0x11
    36fa:	88 23       	and	r24, r24
    36fc:	49 f0       	breq	.+18     	; 0x3710 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    36fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3700:	98 85       	ldd	r25, Y+8	; 0x08
    3702:	41 96       	adiw	r24, 0x11	; 17
    3704:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    3708:	88 23       	and	r24, r24
    370a:	11 f0       	breq	.+4      	; 0x3710 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    370c:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    3710:	0f 90       	pop	r0
    3712:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	8e 87       	std	Y+14, r24	; 0x0e
    3718:	5c c0       	rjmp	.+184    	; 0x37d2 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    371a:	8b 85       	ldd	r24, Y+11	; 0x0b
    371c:	9c 85       	ldd	r25, Y+12	; 0x0c
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	21 f4       	brne	.+8      	; 0x372a <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3722:	0f 90       	pop	r0
    3724:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3726:	1e 86       	std	Y+14, r1	; 0x0e
    3728:	54 c0       	rjmp	.+168    	; 0x37d2 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	88 23       	and	r24, r24
    372e:	31 f4       	brne	.+12     	; 0x373c <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3730:	ce 01       	movw	r24, r28
    3732:	04 96       	adiw	r24, 0x04	; 4
    3734:	0e 94 00 23 	call	0x4600	; 0x4600 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    373c:	0f 90       	pop	r0
    373e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3740:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	0f 92       	push	r0
    374a:	ef 81       	ldd	r30, Y+7	; 0x07
    374c:	f8 85       	ldd	r31, Y+8	; 0x08
    374e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3750:	8f 3f       	cpi	r24, 0xFF	; 255
    3752:	19 f4       	brne	.+6      	; 0x375a <xQueueGenericReceive+0xf4>
    3754:	ef 81       	ldd	r30, Y+7	; 0x07
    3756:	f8 85       	ldd	r31, Y+8	; 0x08
    3758:	15 8e       	std	Z+29, r1	; 0x1d
    375a:	ef 81       	ldd	r30, Y+7	; 0x07
    375c:	f8 85       	ldd	r31, Y+8	; 0x08
    375e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3760:	8f 3f       	cpi	r24, 0xFF	; 255
    3762:	19 f4       	brne	.+6      	; 0x376a <xQueueGenericReceive+0x104>
    3764:	ef 81       	ldd	r30, Y+7	; 0x07
    3766:	f8 85       	ldd	r31, Y+8	; 0x08
    3768:	16 8e       	std	Z+30, r1	; 0x1e
    376a:	0f 90       	pop	r0
    376c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    376e:	ce 01       	movw	r24, r28
    3770:	04 96       	adiw	r24, 0x04	; 4
    3772:	9e 01       	movw	r18, r28
    3774:	25 5f       	subi	r18, 0xF5	; 245
    3776:	3f 4f       	sbci	r19, 0xFF	; 255
    3778:	b9 01       	movw	r22, r18
    377a:	0e 94 19 23 	call	0x4632	; 0x4632 <xTaskCheckForTimeOut>
    377e:	88 23       	and	r24, r24
    3780:	09 f5       	brne	.+66     	; 0x37c4 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3782:	8f 81       	ldd	r24, Y+7	; 0x07
    3784:	98 85       	ldd	r25, Y+8	; 0x08
    3786:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <prvIsQueueEmpty>
    378a:	88 23       	and	r24, r24
    378c:	a1 f0       	breq	.+40     	; 0x37b6 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    378e:	8f 81       	ldd	r24, Y+7	; 0x07
    3790:	98 85       	ldd	r25, Y+8	; 0x08
    3792:	41 96       	adiw	r24, 0x11	; 17
    3794:	2b 85       	ldd	r18, Y+11	; 0x0b
    3796:	3c 85       	ldd	r19, Y+12	; 0x0c
    3798:	b9 01       	movw	r22, r18
    379a:	0e 94 62 22 	call	0x44c4	; 0x44c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    379e:	8f 81       	ldd	r24, Y+7	; 0x07
    37a0:	98 85       	ldd	r25, Y+8	; 0x08
    37a2:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    37a6:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    37aa:	88 23       	and	r24, r24
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <xQueueGenericReceive+0x14a>
    37ae:	6d cf       	rjmp	.-294    	; 0x368a <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    37b0:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
    37b4:	6a cf       	rjmp	.-300    	; 0x368a <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    37b6:	8f 81       	ldd	r24, Y+7	; 0x07
    37b8:	98 85       	ldd	r25, Y+8	; 0x08
    37ba:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    37be:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    37c2:	63 cf       	rjmp	.-314    	; 0x368a <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    37c4:	8f 81       	ldd	r24, Y+7	; 0x07
    37c6:	98 85       	ldd	r25, Y+8	; 0x08
    37c8:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    37cc:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    37d0:	1e 86       	std	Y+14, r1	; 0x0e
    37d2:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    37d4:	2e 96       	adiw	r28, 0x0e	; 14
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	28 97       	sbiw	r28, 0x08	; 8
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	9c 83       	std	Y+4, r25	; 0x04
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	7e 83       	std	Y+6, r23	; 0x06
    3800:	6d 83       	std	Y+5, r22	; 0x05
    3802:	58 87       	std	Y+8, r21	; 0x08
    3804:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3806:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3808:	eb 81       	ldd	r30, Y+3	; 0x03
    380a:	fc 81       	ldd	r31, Y+4	; 0x04
    380c:	82 8d       	ldd	r24, Z+26	; 0x1a
    380e:	88 23       	and	r24, r24
    3810:	71 f1       	breq	.+92     	; 0x386e <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3812:	8b 81       	ldd	r24, Y+3	; 0x03
    3814:	9c 81       	ldd	r25, Y+4	; 0x04
    3816:	2d 81       	ldd	r18, Y+5	; 0x05
    3818:	3e 81       	ldd	r19, Y+6	; 0x06
    381a:	b9 01       	movw	r22, r18
    381c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3820:	eb 81       	ldd	r30, Y+3	; 0x03
    3822:	fc 81       	ldd	r31, Y+4	; 0x04
    3824:	82 8d       	ldd	r24, Z+26	; 0x1a
    3826:	81 50       	subi	r24, 0x01	; 1
    3828:	eb 81       	ldd	r30, Y+3	; 0x03
    382a:	fc 81       	ldd	r31, Y+4	; 0x04
    382c:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    382e:	eb 81       	ldd	r30, Y+3	; 0x03
    3830:	fc 81       	ldd	r31, Y+4	; 0x04
    3832:	85 8d       	ldd	r24, Z+29	; 0x1d
    3834:	8f 3f       	cpi	r24, 0xFF	; 255
    3836:	89 f4       	brne	.+34     	; 0x385a <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3838:	eb 81       	ldd	r30, Y+3	; 0x03
    383a:	fc 81       	ldd	r31, Y+4	; 0x04
    383c:	80 85       	ldd	r24, Z+8	; 0x08
    383e:	88 23       	and	r24, r24
    3840:	99 f0       	breq	.+38     	; 0x3868 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	9c 81       	ldd	r25, Y+4	; 0x04
    3846:	08 96       	adiw	r24, 0x08	; 8
    3848:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    384c:	88 23       	and	r24, r24
    384e:	61 f0       	breq	.+24     	; 0x3868 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3850:	ef 81       	ldd	r30, Y+7	; 0x07
    3852:	f8 85       	ldd	r31, Y+8	; 0x08
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 83       	st	Z, r24
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    385a:	eb 81       	ldd	r30, Y+3	; 0x03
    385c:	fc 81       	ldd	r31, Y+4	; 0x04
    385e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3860:	8f 5f       	subi	r24, 0xFF	; 255
    3862:	eb 81       	ldd	r30, Y+3	; 0x03
    3864:	fc 81       	ldd	r31, Y+4	; 0x04
    3866:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	8a 83       	std	Y+2, r24	; 0x02
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    386e:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3872:	28 96       	adiw	r28, 0x08	; 8
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	00 d0       	rcall	.+0      	; 0x388a <uxQueueMessagesWaiting+0x6>
    388a:	0f 92       	push	r0
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	9b 83       	std	Y+3, r25	; 0x03
    3892:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    389a:	ea 81       	ldd	r30, Y+2	; 0x02
    389c:	fb 81       	ldd	r31, Y+3	; 0x03
    389e:	82 8d       	ldd	r24, Z+26	; 0x1a
    38a0:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    38a2:	0f 90       	pop	r0
    38a4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	00 d0       	rcall	.+0      	; 0x38ba <uxQueueMessagesWaitingFromISR+0x6>
    38ba:	0f 92       	push	r0
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	9b 83       	std	Y+3, r25	; 0x03
    38c2:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    38c4:	ea 81       	ldd	r30, Y+2	; 0x02
    38c6:	fb 81       	ldd	r31, Y+3	; 0x03
    38c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ca:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <vQueueDelete+0x6>
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    38e8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ea:	fa 81       	ldd	r31, Y+2	; 0x02
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
	vPortFree( pxQueue );
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
}
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <prvCopyDataToQueue+0x6>
    390c:	00 d0       	rcall	.+0      	; 0x390e <prvCopyDataToQueue+0x8>
    390e:	0f 92       	push	r0
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	7c 83       	std	Y+4, r23	; 0x04
    391a:	6b 83       	std	Y+3, r22	; 0x03
    391c:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    391e:	e9 81       	ldd	r30, Y+1	; 0x01
    3920:	fa 81       	ldd	r31, Y+2	; 0x02
    3922:	84 8d       	ldd	r24, Z+28	; 0x1c
    3924:	88 23       	and	r24, r24
    3926:	09 f4       	brne	.+2      	; 0x392a <prvCopyDataToQueue+0x24>
    3928:	74 c0       	rjmp	.+232    	; 0x3a12 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	88 23       	and	r24, r24
    392e:	99 f5       	brne	.+102    	; 0x3996 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3930:	e9 81       	ldd	r30, Y+1	; 0x01
    3932:	fa 81       	ldd	r31, Y+2	; 0x02
    3934:	64 81       	ldd	r22, Z+4	; 0x04
    3936:	75 81       	ldd	r23, Z+5	; 0x05
    3938:	e9 81       	ldd	r30, Y+1	; 0x01
    393a:	fa 81       	ldd	r31, Y+2	; 0x02
    393c:	84 8d       	ldd	r24, Z+28	; 0x1c
    393e:	48 2f       	mov	r20, r24
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	2b 81       	ldd	r18, Y+3	; 0x03
    3944:	3c 81       	ldd	r19, Y+4	; 0x04
    3946:	cb 01       	movw	r24, r22
    3948:	b9 01       	movw	r22, r18
    394a:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    394e:	e9 81       	ldd	r30, Y+1	; 0x01
    3950:	fa 81       	ldd	r31, Y+2	; 0x02
    3952:	24 81       	ldd	r18, Z+4	; 0x04
    3954:	35 81       	ldd	r19, Z+5	; 0x05
    3956:	e9 81       	ldd	r30, Y+1	; 0x01
    3958:	fa 81       	ldd	r31, Y+2	; 0x02
    395a:	84 8d       	ldd	r24, Z+28	; 0x1c
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	82 0f       	add	r24, r18
    3962:	93 1f       	adc	r25, r19
    3964:	e9 81       	ldd	r30, Y+1	; 0x01
    3966:	fa 81       	ldd	r31, Y+2	; 0x02
    3968:	95 83       	std	Z+5, r25	; 0x05
    396a:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    396c:	e9 81       	ldd	r30, Y+1	; 0x01
    396e:	fa 81       	ldd	r31, Y+2	; 0x02
    3970:	24 81       	ldd	r18, Z+4	; 0x04
    3972:	35 81       	ldd	r19, Z+5	; 0x05
    3974:	e9 81       	ldd	r30, Y+1	; 0x01
    3976:	fa 81       	ldd	r31, Y+2	; 0x02
    3978:	82 81       	ldd	r24, Z+2	; 0x02
    397a:	93 81       	ldd	r25, Z+3	; 0x03
    397c:	28 17       	cp	r18, r24
    397e:	39 07       	cpc	r19, r25
    3980:	08 f4       	brcc	.+2      	; 0x3984 <prvCopyDataToQueue+0x7e>
    3982:	47 c0       	rjmp	.+142    	; 0x3a12 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3984:	e9 81       	ldd	r30, Y+1	; 0x01
    3986:	fa 81       	ldd	r31, Y+2	; 0x02
    3988:	80 81       	ld	r24, Z
    398a:	91 81       	ldd	r25, Z+1	; 0x01
    398c:	e9 81       	ldd	r30, Y+1	; 0x01
    398e:	fa 81       	ldd	r31, Y+2	; 0x02
    3990:	95 83       	std	Z+5, r25	; 0x05
    3992:	84 83       	std	Z+4, r24	; 0x04
    3994:	3e c0       	rjmp	.+124    	; 0x3a12 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3996:	e9 81       	ldd	r30, Y+1	; 0x01
    3998:	fa 81       	ldd	r31, Y+2	; 0x02
    399a:	66 81       	ldd	r22, Z+6	; 0x06
    399c:	77 81       	ldd	r23, Z+7	; 0x07
    399e:	e9 81       	ldd	r30, Y+1	; 0x01
    39a0:	fa 81       	ldd	r31, Y+2	; 0x02
    39a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    39a4:	48 2f       	mov	r20, r24
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	2b 81       	ldd	r18, Y+3	; 0x03
    39aa:	3c 81       	ldd	r19, Y+4	; 0x04
    39ac:	cb 01       	movw	r24, r22
    39ae:	b9 01       	movw	r22, r18
    39b0:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    39b4:	e9 81       	ldd	r30, Y+1	; 0x01
    39b6:	fa 81       	ldd	r31, Y+2	; 0x02
    39b8:	26 81       	ldd	r18, Z+6	; 0x06
    39ba:	37 81       	ldd	r19, Z+7	; 0x07
    39bc:	e9 81       	ldd	r30, Y+1	; 0x01
    39be:	fa 81       	ldd	r31, Y+2	; 0x02
    39c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    39c2:	88 2f       	mov	r24, r24
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	90 95       	com	r25
    39c8:	81 95       	neg	r24
    39ca:	9f 4f       	sbci	r25, 0xFF	; 255
    39cc:	82 0f       	add	r24, r18
    39ce:	93 1f       	adc	r25, r19
    39d0:	e9 81       	ldd	r30, Y+1	; 0x01
    39d2:	fa 81       	ldd	r31, Y+2	; 0x02
    39d4:	97 83       	std	Z+7, r25	; 0x07
    39d6:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    39d8:	e9 81       	ldd	r30, Y+1	; 0x01
    39da:	fa 81       	ldd	r31, Y+2	; 0x02
    39dc:	26 81       	ldd	r18, Z+6	; 0x06
    39de:	37 81       	ldd	r19, Z+7	; 0x07
    39e0:	e9 81       	ldd	r30, Y+1	; 0x01
    39e2:	fa 81       	ldd	r31, Y+2	; 0x02
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	28 17       	cp	r18, r24
    39ea:	39 07       	cpc	r19, r25
    39ec:	90 f4       	brcc	.+36     	; 0x3a12 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    39ee:	e9 81       	ldd	r30, Y+1	; 0x01
    39f0:	fa 81       	ldd	r31, Y+2	; 0x02
    39f2:	22 81       	ldd	r18, Z+2	; 0x02
    39f4:	33 81       	ldd	r19, Z+3	; 0x03
    39f6:	e9 81       	ldd	r30, Y+1	; 0x01
    39f8:	fa 81       	ldd	r31, Y+2	; 0x02
    39fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	90 95       	com	r25
    3a02:	81 95       	neg	r24
    3a04:	9f 4f       	sbci	r25, 0xFF	; 255
    3a06:	82 0f       	add	r24, r18
    3a08:	93 1f       	adc	r25, r19
    3a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a0e:	97 83       	std	Z+7, r25	; 0x07
    3a10:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3a12:	e9 81       	ldd	r30, Y+1	; 0x01
    3a14:	fa 81       	ldd	r31, Y+2	; 0x02
    3a16:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1e:	82 8f       	std	Z+26, r24	; 0x1a
}
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <prvCopyDataFromQueue+0x6>
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <prvCopyDataFromQueue+0x8>
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	9a 83       	std	Y+2, r25	; 0x02
    3a3e:	89 83       	std	Y+1, r24	; 0x01
    3a40:	7c 83       	std	Y+4, r23	; 0x04
    3a42:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3a44:	e9 81       	ldd	r30, Y+1	; 0x01
    3a46:	fa 81       	ldd	r31, Y+2	; 0x02
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	89 f1       	breq	.+98     	; 0x3ab2 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3a50:	e9 81       	ldd	r30, Y+1	; 0x01
    3a52:	fa 81       	ldd	r31, Y+2	; 0x02
    3a54:	26 81       	ldd	r18, Z+6	; 0x06
    3a56:	37 81       	ldd	r19, Z+7	; 0x07
    3a58:	e9 81       	ldd	r30, Y+1	; 0x01
    3a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a5e:	88 2f       	mov	r24, r24
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	82 0f       	add	r24, r18
    3a64:	93 1f       	adc	r25, r19
    3a66:	e9 81       	ldd	r30, Y+1	; 0x01
    3a68:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6a:	97 83       	std	Z+7, r25	; 0x07
    3a6c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a70:	fa 81       	ldd	r31, Y+2	; 0x02
    3a72:	26 81       	ldd	r18, Z+6	; 0x06
    3a74:	37 81       	ldd	r19, Z+7	; 0x07
    3a76:	e9 81       	ldd	r30, Y+1	; 0x01
    3a78:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	28 17       	cp	r18, r24
    3a80:	39 07       	cpc	r19, r25
    3a82:	40 f0       	brcs	.+16     	; 0x3a94 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3a84:	e9 81       	ldd	r30, Y+1	; 0x01
    3a86:	fa 81       	ldd	r31, Y+2	; 0x02
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a90:	97 83       	std	Z+7, r25	; 0x07
    3a92:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3a94:	e9 81       	ldd	r30, Y+1	; 0x01
    3a96:	fa 81       	ldd	r31, Y+2	; 0x02
    3a98:	46 81       	ldd	r20, Z+6	; 0x06
    3a9a:	57 81       	ldd	r21, Z+7	; 0x07
    3a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa0:	84 8d       	ldd	r24, Z+28	; 0x1c
    3aa2:	28 2f       	mov	r18, r24
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	ba 01       	movw	r22, r20
    3aac:	a9 01       	movw	r20, r18
    3aae:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <memcpy>
	}
}
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <prvUnlockQueue+0x6>
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	0f 92       	push	r0
    3ad4:	15 c0       	rjmp	.+42     	; 0x3b00 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    3ada:	81 89       	ldd	r24, Z+17	; 0x11
    3adc:	88 23       	and	r24, r24
    3ade:	a9 f0       	breq	.+42     	; 0x3b0a <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	41 96       	adiw	r24, 0x11	; 17
    3ae6:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    3aea:	88 23       	and	r24, r24
    3aec:	11 f0       	breq	.+4      	; 0x3af2 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3aee:	0e 94 76 23 	call	0x46ec	; 0x46ec <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3af2:	e9 81       	ldd	r30, Y+1	; 0x01
    3af4:	fa 81       	ldd	r31, Y+2	; 0x02
    3af6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3af8:	81 50       	subi	r24, 0x01	; 1
    3afa:	e9 81       	ldd	r30, Y+1	; 0x01
    3afc:	fa 81       	ldd	r31, Y+2	; 0x02
    3afe:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3b00:	e9 81       	ldd	r30, Y+1	; 0x01
    3b02:	fa 81       	ldd	r31, Y+2	; 0x02
    3b04:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b06:	18 16       	cp	r1, r24
    3b08:	34 f3       	brlt	.-52     	; 0x3ad6 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b0e:	8f ef       	ldi	r24, 0xFF	; 255
    3b10:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	0f 92       	push	r0
    3b1c:	15 c0       	rjmp	.+42     	; 0x3b48 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b20:	fa 81       	ldd	r31, Y+2	; 0x02
    3b22:	80 85       	ldd	r24, Z+8	; 0x08
    3b24:	88 23       	and	r24, r24
    3b26:	a9 f0       	breq	.+42     	; 0x3b52 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	08 96       	adiw	r24, 0x08	; 8
    3b2e:	0e 94 98 22 	call	0x4530	; 0x4530 <xTaskRemoveFromEventList>
    3b32:	88 23       	and	r24, r24
    3b34:	11 f0       	breq	.+4      	; 0x3b3a <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    3b36:	0e 94 76 23 	call	0x46ec	; 0x46ec <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b40:	81 50       	subi	r24, 0x01	; 1
    3b42:	e9 81       	ldd	r30, Y+1	; 0x01
    3b44:	fa 81       	ldd	r31, Y+2	; 0x02
    3b46:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3b48:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b4e:	18 16       	cp	r1, r24
    3b50:	34 f3       	brlt	.-52     	; 0x3b1e <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3b52:	e9 81       	ldd	r30, Y+1	; 0x01
    3b54:	fa 81       	ldd	r31, Y+2	; 0x02
    3b56:	8f ef       	ldi	r24, 0xFF	; 255
    3b58:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3b5a:	0f 90       	pop	r0
    3b5c:	0f be       	out	0x3f, r0	; 63
}
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <prvIsQueueEmpty+0x6>
    3b6e:	0f 92       	push	r0
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	9b 83       	std	Y+3, r25	; 0x03
    3b76:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3b7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3b80:	fb 81       	ldd	r31, Y+3	; 0x03
    3b82:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b84:	19 82       	std	Y+1, r1	; 0x01
    3b86:	88 23       	and	r24, r24
    3b88:	11 f4       	brne	.+4      	; 0x3b8e <prvIsQueueEmpty+0x26>
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	0f 90       	pop	r0
    3b9a:	cf 91       	pop	r28
    3b9c:	df 91       	pop	r29
    3b9e:	08 95       	ret

00003ba0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <xQueueIsQueueEmptyFromISR+0x6>
    3ba6:	0f 92       	push	r0
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	9b 83       	std	Y+3, r25	; 0x03
    3bae:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3bb0:	ea 81       	ldd	r30, Y+2	; 0x02
    3bb2:	fb 81       	ldd	r31, Y+3	; 0x03
    3bb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bb6:	19 82       	std	Y+1, r1	; 0x01
    3bb8:	88 23       	and	r24, r24
    3bba:	11 f4       	brne	.+4      	; 0x3bc0 <xQueueIsQueueEmptyFromISR+0x20>
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <prvIsQueueFull+0x6>
    3bd4:	0f 92       	push	r0
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	9b 83       	std	Y+3, r25	; 0x03
    3bdc:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3be4:	ea 81       	ldd	r30, Y+2	; 0x02
    3be6:	fb 81       	ldd	r31, Y+3	; 0x03
    3be8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bea:	ea 81       	ldd	r30, Y+2	; 0x02
    3bec:	fb 81       	ldd	r31, Y+3	; 0x03
    3bee:	83 8d       	ldd	r24, Z+27	; 0x1b
    3bf0:	19 82       	std	Y+1, r1	; 0x01
    3bf2:	98 17       	cp	r25, r24
    3bf4:	11 f4       	brne	.+4      	; 0x3bfa <prvIsQueueFull+0x2c>
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3bfa:	0f 90       	pop	r0
    3bfc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <xQueueIsQueueFullFromISR+0x6>
    3c12:	0f 92       	push	r0
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	9b 83       	std	Y+3, r25	; 0x03
    3c1a:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3c1c:	ea 81       	ldd	r30, Y+2	; 0x02
    3c1e:	fb 81       	ldd	r31, Y+3	; 0x03
    3c20:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c22:	ea 81       	ldd	r30, Y+2	; 0x02
    3c24:	fb 81       	ldd	r31, Y+3	; 0x03
    3c26:	83 8d       	ldd	r24, Z+27	; 0x1b
    3c28:	19 82       	std	Y+1, r1	; 0x01
    3c2a:	98 17       	cp	r25, r24
    3c2c:	11 f4       	brne	.+4      	; 0x3c32 <xQueueIsQueueFullFromISR+0x26>
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3c40:	af 92       	push	r10
    3c42:	bf 92       	push	r11
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	64 97       	sbiw	r28, 0x14	; 20
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	9f 83       	std	Y+7, r25	; 0x07
    3c66:	8e 83       	std	Y+6, r24	; 0x06
    3c68:	79 87       	std	Y+9, r23	; 0x09
    3c6a:	68 87       	std	Y+8, r22	; 0x08
    3c6c:	5b 87       	std	Y+11, r21	; 0x0b
    3c6e:	4a 87       	std	Y+10, r20	; 0x0a
    3c70:	3d 87       	std	Y+13, r19	; 0x0d
    3c72:	2c 87       	std	Y+12, r18	; 0x0c
    3c74:	0e 87       	std	Y+14, r16	; 0x0e
    3c76:	f8 8a       	std	Y+16, r15	; 0x10
    3c78:	ef 86       	std	Y+15, r14	; 0x0f
    3c7a:	da 8a       	std	Y+18, r13	; 0x12
    3c7c:	c9 8a       	std	Y+17, r12	; 0x11
    3c7e:	bc 8a       	std	Y+20, r11	; 0x14
    3c80:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3c82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c84:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c86:	29 89       	ldd	r18, Y+17	; 0x11
    3c88:	3a 89       	ldd	r19, Y+18	; 0x12
    3c8a:	b9 01       	movw	r22, r18
    3c8c:	0e 94 a5 24 	call	0x494a	; 0x494a <prvAllocateTCBAndStack>
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <xTaskGenericCreate+0x5e>
    3c9c:	99 c0       	rjmp	.+306    	; 0x3dd0 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca2:	27 89       	ldd	r18, Z+23	; 0x17
    3ca4:	30 8d       	ldd	r19, Z+24	; 0x18
    3ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	82 0f       	add	r24, r18
    3cae:	93 1f       	adc	r25, r19
    3cb0:	9a 83       	std	Y+2, r25	; 0x02
    3cb2:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb8:	28 85       	ldd	r18, Y+8	; 0x08
    3cba:	39 85       	ldd	r19, Y+9	; 0x09
    3cbc:	eb 89       	ldd	r30, Y+19	; 0x13
    3cbe:	fc 89       	ldd	r31, Y+20	; 0x14
    3cc0:	aa 85       	ldd	r26, Y+10	; 0x0a
    3cc2:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cc4:	b9 01       	movw	r22, r18
    3cc6:	4e 85       	ldd	r20, Y+14	; 0x0e
    3cc8:	9f 01       	movw	r18, r30
    3cca:	8d 01       	movw	r16, r26
    3ccc:	0e 94 8a 23 	call	0x4714	; 0x4714 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd8:	4c 85       	ldd	r20, Y+12	; 0x0c
    3cda:	5d 85       	ldd	r21, Y+13	; 0x0d
    3cdc:	b9 01       	movw	r22, r18
    3cde:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pxPortInitialiseStack>
    3ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce6:	91 83       	std	Z+1, r25	; 0x01
    3ce8:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3cea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cec:	98 89       	ldd	r25, Y+16	; 0x10
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	31 f0       	breq	.+12     	; 0x3cfe <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3cf2:	ef 85       	ldd	r30, Y+15	; 0x0f
    3cf4:	f8 89       	ldd	r31, Y+16	; 0x10
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    3d04:	80 91 91 06 	lds	r24, 0x0691
    3d08:	8f 5f       	subi	r24, 0xFF	; 255
    3d0a:	80 93 91 06 	sts	0x0691, r24
			if( pxCurrentTCB == NULL )
    3d0e:	80 91 8e 06 	lds	r24, 0x068E
    3d12:	90 91 8f 06 	lds	r25, 0x068F
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	69 f4       	brne	.+26     	; 0x3d34 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1e:	90 93 8f 06 	sts	0x068F, r25
    3d22:	80 93 8e 06 	sts	0x068E, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3d26:	80 91 91 06 	lds	r24, 0x0691
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	a9 f4       	brne	.+42     	; 0x3d58 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3d2e:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <prvInitialiseTaskLists>
    3d32:	12 c0       	rjmp	.+36     	; 0x3d58 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3d34:	80 91 96 06 	lds	r24, 0x0696
    3d38:	88 23       	and	r24, r24
    3d3a:	71 f4       	brne	.+28     	; 0x3d58 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3d3c:	e0 91 8e 06 	lds	r30, 0x068E
    3d40:	f0 91 8f 06 	lds	r31, 0x068F
    3d44:	96 89       	ldd	r25, Z+22	; 0x16
    3d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d48:	89 17       	cp	r24, r25
    3d4a:	30 f0       	brcs	.+12     	; 0x3d58 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	90 93 8f 06 	sts	0x068F, r25
    3d54:	80 93 8e 06 	sts	0x068E, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3d58:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d5c:	96 89       	ldd	r25, Z+22	; 0x16
    3d5e:	80 91 94 06 	lds	r24, 0x0694
    3d62:	89 17       	cp	r24, r25
    3d64:	28 f4       	brcc	.+10     	; 0x3d70 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3d66:	eb 81       	ldd	r30, Y+3	; 0x03
    3d68:	fc 81       	ldd	r31, Y+4	; 0x04
    3d6a:	86 89       	ldd	r24, Z+22	; 0x16
    3d6c:	80 93 94 06 	sts	0x0694, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3d70:	80 91 9b 06 	lds	r24, 0x069B
    3d74:	8f 5f       	subi	r24, 0xFF	; 255
    3d76:	80 93 9b 06 	sts	0x069B, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d7e:	96 89       	ldd	r25, Z+22	; 0x16
    3d80:	80 91 95 06 	lds	r24, 0x0695
    3d84:	89 17       	cp	r24, r25
    3d86:	28 f4       	brcc	.+10     	; 0x3d92 <xTaskGenericCreate+0x152>
    3d88:	eb 81       	ldd	r30, Y+3	; 0x03
    3d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d8c:	86 89       	ldd	r24, Z+22	; 0x16
    3d8e:	80 93 95 06 	sts	0x0695, r24
    3d92:	eb 81       	ldd	r30, Y+3	; 0x03
    3d94:	fc 81       	ldd	r31, Y+4	; 0x04
    3d96:	86 89       	ldd	r24, Z+22	; 0x16
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	c9 01       	movw	r24, r18
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	82 0f       	add	r24, r18
    3dac:	93 1f       	adc	r25, r19
    3dae:	ac 01       	movw	r20, r24
    3db0:	44 56       	subi	r20, 0x64	; 100
    3db2:	59 4f       	sbci	r21, 0xF9	; 249
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	9c 81       	ldd	r25, Y+4	; 0x04
    3db8:	9c 01       	movw	r18, r24
    3dba:	2e 5f       	subi	r18, 0xFE	; 254
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	ca 01       	movw	r24, r20
    3dc0:	b9 01       	movw	r22, r18
    3dc2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>

			xReturn = pdPASS;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3dca:	0f 90       	pop	r0
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3dd0:	8f ef       	ldi	r24, 0xFF	; 255
    3dd2:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	71 f4       	brne	.+28     	; 0x3df6 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3dda:	80 91 96 06 	lds	r24, 0x0696
    3dde:	88 23       	and	r24, r24
    3de0:	51 f0       	breq	.+20     	; 0x3df6 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3de2:	e0 91 8e 06 	lds	r30, 0x068E
    3de6:	f0 91 8f 06 	lds	r31, 0x068F
    3dea:	96 89       	ldd	r25, Z+22	; 0x16
    3dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dee:	98 17       	cp	r25, r24
    3df0:	10 f4       	brcc	.+4      	; 0x3df6 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3df2:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
			}
		}
	}

	return xReturn;
    3df6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3df8:	64 96       	adiw	r28, 0x14	; 20
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	f8 94       	cli
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	cd bf       	out	0x3d, r28	; 61
    3e04:	cf 91       	pop	r28
    3e06:	df 91       	pop	r29
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	ff 90       	pop	r15
    3e0e:	ef 90       	pop	r14
    3e10:	df 90       	pop	r13
    3e12:	cf 90       	pop	r12
    3e14:	bf 90       	pop	r11
    3e16:	af 90       	pop	r10
    3e18:	08 95       	ret

00003e1a <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3e1a:	df 93       	push	r29
    3e1c:	cf 93       	push	r28
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <vTaskDelete+0x6>
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <vTaskDelete+0x8>
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <vTaskDelete+0xa>
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	9c 83       	std	Y+4, r25	; 0x04
    3e2a:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3e32:	20 91 8e 06 	lds	r18, 0x068E
    3e36:	30 91 8f 06 	lds	r19, 0x068F
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	82 17       	cp	r24, r18
    3e40:	93 07       	cpc	r25, r19
    3e42:	11 f4       	brne	.+4      	; 0x3e48 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    3e44:	1c 82       	std	Y+4, r1	; 0x04
    3e46:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3e48:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	39 f4       	brne	.+14     	; 0x3e5e <vTaskDelete+0x44>
    3e50:	80 91 8e 06 	lds	r24, 0x068E
    3e54:	90 91 8f 06 	lds	r25, 0x068F
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
    3e5c:	04 c0       	rjmp	.+8      	; 0x3e66 <vTaskDelete+0x4c>
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	9e 83       	std	Y+6, r25	; 0x06
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	8d 81       	ldd	r24, Y+5	; 0x05
    3e68:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	9a 81       	ldd	r25, Y+2	; 0x02
    3e72:	02 96       	adiw	r24, 0x02	; 2
    3e74:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3e78:	e9 81       	ldd	r30, Y+1	; 0x01
    3e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e7c:	84 89       	ldd	r24, Z+20	; 0x14
    3e7e:	95 89       	ldd	r25, Z+21	; 0x15
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	29 f0       	breq	.+10     	; 0x3e8e <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	9a 81       	ldd	r25, Y+2	; 0x02
    3e88:	0c 96       	adiw	r24, 0x0c	; 12
    3e8a:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	9c 01       	movw	r18, r24
    3e94:	2e 5f       	subi	r18, 0xFE	; 254
    3e96:	3f 4f       	sbci	r19, 0xFF	; 255
    3e98:	81 ef       	ldi	r24, 0xF1	; 241
    3e9a:	96 e0       	ldi	r25, 0x06	; 6
    3e9c:	b9 01       	movw	r22, r18
    3e9e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3ea2:	80 91 90 06 	lds	r24, 0x0690
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	80 93 90 06 	sts	0x0690, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3eac:	80 91 9b 06 	lds	r24, 0x069B
    3eb0:	8f 5f       	subi	r24, 0xFF	; 255
    3eb2:	80 93 9b 06 	sts	0x069B, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3eb6:	0f 90       	pop	r0
    3eb8:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3eba:	80 91 96 06 	lds	r24, 0x0696
    3ebe:	88 23       	and	r24, r24
    3ec0:	31 f0       	breq	.+12     	; 0x3ece <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	11 f4       	brne	.+4      	; 0x3ece <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    3eca:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
			}
		}
	}
    3ece:	26 96       	adiw	r28, 0x06	; 6
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	28 97       	sbiw	r28, 0x08	; 8
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	78 87       	std	Y+8, r23	; 0x08
    3efa:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3efc:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3efe:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3f02:	ed 81       	ldd	r30, Y+5	; 0x05
    3f04:	fe 81       	ldd	r31, Y+6	; 0x06
    3f06:	20 81       	ld	r18, Z
    3f08:	31 81       	ldd	r19, Z+1	; 0x01
    3f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f0c:	98 85       	ldd	r25, Y+8	; 0x08
    3f0e:	82 0f       	add	r24, r18
    3f10:	93 1f       	adc	r25, r19
    3f12:	9c 83       	std	Y+4, r25	; 0x04
    3f14:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    3f16:	ed 81       	ldd	r30, Y+5	; 0x05
    3f18:	fe 81       	ldd	r31, Y+6	; 0x06
    3f1a:	20 81       	ld	r18, Z
    3f1c:	31 81       	ldd	r19, Z+1	; 0x01
    3f1e:	80 91 92 06 	lds	r24, 0x0692
    3f22:	90 91 93 06 	lds	r25, 0x0693
    3f26:	82 17       	cp	r24, r18
    3f28:	93 07       	cpc	r25, r19
    3f2a:	a8 f4       	brcc	.+42     	; 0x3f56 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3f2c:	ed 81       	ldd	r30, Y+5	; 0x05
    3f2e:	fe 81       	ldd	r31, Y+6	; 0x06
    3f30:	20 81       	ld	r18, Z
    3f32:	31 81       	ldd	r19, Z+1	; 0x01
    3f34:	8b 81       	ldd	r24, Y+3	; 0x03
    3f36:	9c 81       	ldd	r25, Y+4	; 0x04
    3f38:	82 17       	cp	r24, r18
    3f3a:	93 07       	cpc	r25, r19
    3f3c:	00 f5       	brcc	.+64     	; 0x3f7e <vTaskDelayUntil+0x9e>
    3f3e:	20 91 92 06 	lds	r18, 0x0692
    3f42:	30 91 93 06 	lds	r19, 0x0693
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
    3f48:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4a:	28 17       	cp	r18, r24
    3f4c:	39 07       	cpc	r19, r25
    3f4e:	b8 f4       	brcc	.+46     	; 0x3f7e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	14 c0       	rjmp	.+40     	; 0x3f7e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3f56:	ed 81       	ldd	r30, Y+5	; 0x05
    3f58:	fe 81       	ldd	r31, Y+6	; 0x06
    3f5a:	20 81       	ld	r18, Z
    3f5c:	31 81       	ldd	r19, Z+1	; 0x01
    3f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f60:	9c 81       	ldd	r25, Y+4	; 0x04
    3f62:	82 17       	cp	r24, r18
    3f64:	93 07       	cpc	r25, r19
    3f66:	48 f0       	brcs	.+18     	; 0x3f7a <vTaskDelayUntil+0x9a>
    3f68:	20 91 92 06 	lds	r18, 0x0692
    3f6c:	30 91 93 06 	lds	r19, 0x0693
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	9c 81       	ldd	r25, Y+4	; 0x04
    3f74:	28 17       	cp	r18, r24
    3f76:	39 07       	cpc	r19, r25
    3f78:	10 f4       	brcc	.+4      	; 0x3f7e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3f7e:	ed 81       	ldd	r30, Y+5	; 0x05
    3f80:	fe 81       	ldd	r31, Y+6	; 0x06
    3f82:	8b 81       	ldd	r24, Y+3	; 0x03
    3f84:	9c 81       	ldd	r25, Y+4	; 0x04
    3f86:	91 83       	std	Z+1, r25	; 0x01
    3f88:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	88 23       	and	r24, r24
    3f8e:	59 f0       	breq	.+22     	; 0x3fa6 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f90:	80 91 8e 06 	lds	r24, 0x068E
    3f94:	90 91 8f 06 	lds	r25, 0x068F
    3f98:	02 96       	adiw	r24, 0x02	; 2
    3f9a:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa2:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3fa6:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    3faa:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3fac:	8a 81       	ldd	r24, Y+2	; 0x02
    3fae:	88 23       	and	r24, r24
    3fb0:	11 f4       	brne	.+4      	; 0x3fb6 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    3fb2:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
		}
	}
    3fb6:	28 96       	adiw	r28, 0x08	; 8
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <vTaskDelay+0x6>
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <vTaskDelay+0x8>
    3fd0:	0f 92       	push	r0
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	9d 83       	std	Y+5, r25	; 0x05
    3fd8:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3fda:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    3fde:	9d 81       	ldd	r25, Y+5	; 0x05
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	d1 f0       	breq	.+52     	; 0x4018 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    3fe4:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3fe8:	20 91 92 06 	lds	r18, 0x0692
    3fec:	30 91 93 06 	lds	r19, 0x0693
    3ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ff4:	82 0f       	add	r24, r18
    3ff6:	93 1f       	adc	r25, r19
    3ff8:	9b 83       	std	Y+3, r25	; 0x03
    3ffa:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3ffc:	80 91 8e 06 	lds	r24, 0x068E
    4000:	90 91 8f 06 	lds	r25, 0x068F
    4004:	02 96       	adiw	r24, 0x02	; 2
    4006:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    400a:	8a 81       	ldd	r24, Y+2	; 0x02
    400c:	9b 81       	ldd	r25, Y+3	; 0x03
    400e:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4012:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>
    4016:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	88 23       	and	r24, r24
    401c:	11 f4       	brne	.+4      	; 0x4022 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    401e:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
		}
	}
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4032:	af 92       	push	r10
    4034:	bf 92       	push	r11
    4036:	cf 92       	push	r12
    4038:	df 92       	push	r13
    403a:	ef 92       	push	r14
    403c:	ff 92       	push	r15
    403e:	0f 93       	push	r16
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	0f 92       	push	r0
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    404a:	24 e7       	ldi	r18, 0x74	; 116
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	80 e8       	ldi	r24, 0x80	; 128
    4050:	93 e2       	ldi	r25, 0x23	; 35
    4052:	b9 01       	movw	r22, r18
    4054:	44 e6       	ldi	r20, 0x64	; 100
    4056:	50 e0       	ldi	r21, 0x00	; 0
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	00 e0       	ldi	r16, 0x00	; 0
    405e:	ee 24       	eor	r14, r14
    4060:	ff 24       	eor	r15, r15
    4062:	cc 24       	eor	r12, r12
    4064:	dd 24       	eor	r13, r13
    4066:	aa 24       	eor	r10, r10
    4068:	bb 24       	eor	r11, r11
    406a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <xTaskGenericCreate>
    406e:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	81 30       	cpi	r24, 0x01	; 1
    4074:	51 f4       	brne	.+20     	; 0x408a <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    4076:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	80 93 96 06 	sts	0x0696, r24
		xTickCount = ( portTickType ) 0U;
    407e:	10 92 93 06 	sts	0x0693, r1
    4082:	10 92 92 06 	sts	0x0692, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4086:	0e 94 31 18 	call	0x3062	; 0x3062 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    408a:	0f 90       	pop	r0
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	0f 91       	pop	r16
    4092:	ff 90       	pop	r15
    4094:	ef 90       	pop	r14
    4096:	df 90       	pop	r13
    4098:	cf 90       	pop	r12
    409a:	bf 90       	pop	r11
    409c:	af 90       	pop	r10
    409e:	08 95       	ret

000040a0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    40a0:	df 93       	push	r29
    40a2:	cf 93       	push	r28
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    40a8:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    40aa:	10 92 96 06 	sts	0x0696, r1
	vPortEndScheduler();
    40ae:	0e 94 66 18 	call	0x30cc	; 0x30cc <vPortEndScheduler>
}
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	08 95       	ret

000040b8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    40c0:	80 91 97 06 	lds	r24, 0x0697
    40c4:	8f 5f       	subi	r24, 0xFF	; 255
    40c6:	80 93 97 06 	sts	0x0697, r24
}
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	00 d0       	rcall	.+0      	; 0x40d6 <xTaskResumeAll+0x6>
    40d6:	00 d0       	rcall	.+0      	; 0x40d8 <xTaskResumeAll+0x8>
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    40dc:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    40e4:	80 91 97 06 	lds	r24, 0x0697
    40e8:	81 50       	subi	r24, 0x01	; 1
    40ea:	80 93 97 06 	sts	0x0697, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    40ee:	80 91 97 06 	lds	r24, 0x0697
    40f2:	88 23       	and	r24, r24
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <xTaskResumeAll+0x28>
    40f6:	6c c0       	rjmp	.+216    	; 0x41d0 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    40f8:	80 91 91 06 	lds	r24, 0x0691
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <xTaskResumeAll+0x32>
    4100:	67 c0       	rjmp	.+206    	; 0x41d0 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4102:	19 82       	std	Y+1, r1	; 0x01
    4104:	41 c0       	rjmp	.+130    	; 0x4188 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4106:	e0 91 ed 06 	lds	r30, 0x06ED
    410a:	f0 91 ee 06 	lds	r31, 0x06EE
    410e:	86 81       	ldd	r24, Z+6	; 0x06
    4110:	97 81       	ldd	r25, Z+7	; 0x07
    4112:	9c 83       	std	Y+4, r25	; 0x04
    4114:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    4116:	8b 81       	ldd	r24, Y+3	; 0x03
    4118:	9c 81       	ldd	r25, Y+4	; 0x04
    411a:	0c 96       	adiw	r24, 0x0c	; 12
    411c:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4120:	8b 81       	ldd	r24, Y+3	; 0x03
    4122:	9c 81       	ldd	r25, Y+4	; 0x04
    4124:	02 96       	adiw	r24, 0x02	; 2
    4126:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    412a:	eb 81       	ldd	r30, Y+3	; 0x03
    412c:	fc 81       	ldd	r31, Y+4	; 0x04
    412e:	96 89       	ldd	r25, Z+22	; 0x16
    4130:	80 91 95 06 	lds	r24, 0x0695
    4134:	89 17       	cp	r24, r25
    4136:	28 f4       	brcc	.+10     	; 0x4142 <xTaskResumeAll+0x72>
    4138:	eb 81       	ldd	r30, Y+3	; 0x03
    413a:	fc 81       	ldd	r31, Y+4	; 0x04
    413c:	86 89       	ldd	r24, Z+22	; 0x16
    413e:	80 93 95 06 	sts	0x0695, r24
    4142:	eb 81       	ldd	r30, Y+3	; 0x03
    4144:	fc 81       	ldd	r31, Y+4	; 0x04
    4146:	86 89       	ldd	r24, Z+22	; 0x16
    4148:	28 2f       	mov	r18, r24
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	c9 01       	movw	r24, r18
    414e:	88 0f       	add	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	82 0f       	add	r24, r18
    415c:	93 1f       	adc	r25, r19
    415e:	84 56       	subi	r24, 0x64	; 100
    4160:	99 4f       	sbci	r25, 0xF9	; 249
    4162:	2b 81       	ldd	r18, Y+3	; 0x03
    4164:	3c 81       	ldd	r19, Y+4	; 0x04
    4166:	2e 5f       	subi	r18, 0xFE	; 254
    4168:	3f 4f       	sbci	r19, 0xFF	; 255
    416a:	b9 01       	movw	r22, r18
    416c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4170:	eb 81       	ldd	r30, Y+3	; 0x03
    4172:	fc 81       	ldd	r31, Y+4	; 0x04
    4174:	96 89       	ldd	r25, Z+22	; 0x16
    4176:	e0 91 8e 06 	lds	r30, 0x068E
    417a:	f0 91 8f 06 	lds	r31, 0x068F
    417e:	86 89       	ldd	r24, Z+22	; 0x16
    4180:	98 17       	cp	r25, r24
    4182:	10 f0       	brcs	.+4      	; 0x4188 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4188:	80 91 e8 06 	lds	r24, 0x06E8
    418c:	88 23       	and	r24, r24
    418e:	09 f0       	breq	.+2      	; 0x4192 <xTaskResumeAll+0xc2>
    4190:	ba cf       	rjmp	.-140    	; 0x4106 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4192:	80 91 98 06 	lds	r24, 0x0698
    4196:	88 23       	and	r24, r24
    4198:	71 f0       	breq	.+28     	; 0x41b6 <xTaskResumeAll+0xe6>
    419a:	07 c0       	rjmp	.+14     	; 0x41aa <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    419c:	0e 94 27 21 	call	0x424e	; 0x424e <vTaskIncrementTick>
						--uxMissedTicks;
    41a0:	80 91 98 06 	lds	r24, 0x0698
    41a4:	81 50       	subi	r24, 0x01	; 1
    41a6:	80 93 98 06 	sts	0x0698, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    41aa:	80 91 98 06 	lds	r24, 0x0698
    41ae:	88 23       	and	r24, r24
    41b0:	a9 f7       	brne	.-22     	; 0x419c <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	21 f0       	breq	.+8      	; 0x41c4 <xTaskResumeAll+0xf4>
    41bc:	80 91 99 06 	lds	r24, 0x0699
    41c0:	81 30       	cpi	r24, 0x01	; 1
    41c2:	31 f4       	brne	.+12     	; 0x41d0 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    41c8:	10 92 99 06 	sts	0x0699, r1
					portYIELD_WITHIN_API();
    41cc:	0e 94 6d 18 	call	0x30da	; 0x30da <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    41d0:	0f 90       	pop	r0
    41d2:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	cf 91       	pop	r28
    41e0:	df 91       	pop	r29
    41e2:	08 95       	ret

000041e4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	00 d0       	rcall	.+0      	; 0x41ea <xTaskGetTickCount+0x6>
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    41f4:	80 91 92 06 	lds	r24, 0x0692
    41f8:	90 91 93 06 	lds	r25, 0x0693
    41fc:	9a 83       	std	Y+2, r25	; 0x02
    41fe:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	00 d0       	rcall	.+0      	; 0x4218 <xTaskGetTickCountFromISR+0x6>
    4218:	0f 92       	push	r0
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    421e:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    4220:	80 91 92 06 	lds	r24, 0x0692
    4224:	90 91 93 06 	lds	r25, 0x0693
    4228:	9b 83       	std	Y+3, r25	; 0x03
    422a:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    422c:	8a 81       	ldd	r24, Y+2	; 0x02
    422e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	08 95       	ret

0000423c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    423c:	df 93       	push	r29
    423e:	cf 93       	push	r28
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4244:	80 91 91 06 	lds	r24, 0x0691
}
    4248:	cf 91       	pop	r28
    424a:	df 91       	pop	r29
    424c:	08 95       	ret

0000424e <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	00 d0       	rcall	.+0      	; 0x4254 <vTaskIncrementTick+0x6>
    4254:	00 d0       	rcall	.+0      	; 0x4256 <vTaskIncrementTick+0x8>
    4256:	00 d0       	rcall	.+0      	; 0x4258 <vTaskIncrementTick+0xa>
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    425c:	80 91 97 06 	lds	r24, 0x0697
    4260:	88 23       	and	r24, r24
    4262:	09 f0       	breq	.+2      	; 0x4266 <vTaskIncrementTick+0x18>
    4264:	bb c0       	rjmp	.+374    	; 0x43dc <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    4266:	80 91 92 06 	lds	r24, 0x0692
    426a:	90 91 93 06 	lds	r25, 0x0693
    426e:	01 96       	adiw	r24, 0x01	; 1
    4270:	90 93 93 06 	sts	0x0693, r25
    4274:	80 93 92 06 	sts	0x0692, r24
		if( xTickCount == ( portTickType ) 0U )
    4278:	80 91 92 06 	lds	r24, 0x0692
    427c:	90 91 93 06 	lds	r25, 0x0693
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	d1 f5       	brne	.+116    	; 0x42f8 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4284:	80 91 e4 06 	lds	r24, 0x06E4
    4288:	90 91 e5 06 	lds	r25, 0x06E5
    428c:	9c 83       	std	Y+4, r25	; 0x04
    428e:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4290:	80 91 e6 06 	lds	r24, 0x06E6
    4294:	90 91 e7 06 	lds	r25, 0x06E7
    4298:	90 93 e5 06 	sts	0x06E5, r25
    429c:	80 93 e4 06 	sts	0x06E4, r24
			pxOverflowDelayedTaskList = pxTemp;
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	90 93 e7 06 	sts	0x06E7, r25
    42a8:	80 93 e6 06 	sts	0x06E6, r24
			xNumOfOverflows++;
    42ac:	80 91 9a 06 	lds	r24, 0x069A
    42b0:	8f 5f       	subi	r24, 0xFF	; 255
    42b2:	80 93 9a 06 	sts	0x069A, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    42b6:	e0 91 e4 06 	lds	r30, 0x06E4
    42ba:	f0 91 e5 06 	lds	r31, 0x06E5
    42be:	80 81       	ld	r24, Z
    42c0:	88 23       	and	r24, r24
    42c2:	39 f4       	brne	.+14     	; 0x42d2 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    42c4:	8f ef       	ldi	r24, 0xFF	; 255
    42c6:	9f ef       	ldi	r25, 0xFF	; 255
    42c8:	90 93 9e 01 	sts	0x019E, r25
    42cc:	80 93 9d 01 	sts	0x019D, r24
    42d0:	13 c0       	rjmp	.+38     	; 0x42f8 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    42d2:	e0 91 e4 06 	lds	r30, 0x06E4
    42d6:	f0 91 e5 06 	lds	r31, 0x06E5
    42da:	05 80       	ldd	r0, Z+5	; 0x05
    42dc:	f6 81       	ldd	r31, Z+6	; 0x06
    42de:	e0 2d       	mov	r30, r0
    42e0:	86 81       	ldd	r24, Z+6	; 0x06
    42e2:	97 81       	ldd	r25, Z+7	; 0x07
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    42e8:	ed 81       	ldd	r30, Y+5	; 0x05
    42ea:	fe 81       	ldd	r31, Y+6	; 0x06
    42ec:	82 81       	ldd	r24, Z+2	; 0x02
    42ee:	93 81       	ldd	r25, Z+3	; 0x03
    42f0:	90 93 9e 01 	sts	0x019E, r25
    42f4:	80 93 9d 01 	sts	0x019D, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    42f8:	20 91 92 06 	lds	r18, 0x0692
    42fc:	30 91 93 06 	lds	r19, 0x0693
    4300:	80 91 9d 01 	lds	r24, 0x019D
    4304:	90 91 9e 01 	lds	r25, 0x019E
    4308:	28 17       	cp	r18, r24
    430a:	39 07       	cpc	r19, r25
    430c:	08 f4       	brcc	.+2      	; 0x4310 <vTaskIncrementTick+0xc2>
    430e:	6b c0       	rjmp	.+214    	; 0x43e6 <vTaskIncrementTick+0x198>
    4310:	e0 91 e4 06 	lds	r30, 0x06E4
    4314:	f0 91 e5 06 	lds	r31, 0x06E5
    4318:	80 81       	ld	r24, Z
    431a:	88 23       	and	r24, r24
    431c:	39 f4       	brne	.+14     	; 0x432c <vTaskIncrementTick+0xde>
    431e:	8f ef       	ldi	r24, 0xFF	; 255
    4320:	9f ef       	ldi	r25, 0xFF	; 255
    4322:	90 93 9e 01 	sts	0x019E, r25
    4326:	80 93 9d 01 	sts	0x019D, r24
    432a:	5d c0       	rjmp	.+186    	; 0x43e6 <vTaskIncrementTick+0x198>
    432c:	e0 91 e4 06 	lds	r30, 0x06E4
    4330:	f0 91 e5 06 	lds	r31, 0x06E5
    4334:	05 80       	ldd	r0, Z+5	; 0x05
    4336:	f6 81       	ldd	r31, Z+6	; 0x06
    4338:	e0 2d       	mov	r30, r0
    433a:	86 81       	ldd	r24, Z+6	; 0x06
    433c:	97 81       	ldd	r25, Z+7	; 0x07
    433e:	9e 83       	std	Y+6, r25	; 0x06
    4340:	8d 83       	std	Y+5, r24	; 0x05
    4342:	ed 81       	ldd	r30, Y+5	; 0x05
    4344:	fe 81       	ldd	r31, Y+6	; 0x06
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	93 81       	ldd	r25, Z+3	; 0x03
    434a:	9a 83       	std	Y+2, r25	; 0x02
    434c:	89 83       	std	Y+1, r24	; 0x01
    434e:	20 91 92 06 	lds	r18, 0x0692
    4352:	30 91 93 06 	lds	r19, 0x0693
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	9a 81       	ldd	r25, Y+2	; 0x02
    435a:	28 17       	cp	r18, r24
    435c:	39 07       	cpc	r19, r25
    435e:	38 f4       	brcc	.+14     	; 0x436e <vTaskIncrementTick+0x120>
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	9a 81       	ldd	r25, Y+2	; 0x02
    4364:	90 93 9e 01 	sts	0x019E, r25
    4368:	80 93 9d 01 	sts	0x019D, r24
    436c:	3c c0       	rjmp	.+120    	; 0x43e6 <vTaskIncrementTick+0x198>
    436e:	8d 81       	ldd	r24, Y+5	; 0x05
    4370:	9e 81       	ldd	r25, Y+6	; 0x06
    4372:	02 96       	adiw	r24, 0x02	; 2
    4374:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
    4378:	ed 81       	ldd	r30, Y+5	; 0x05
    437a:	fe 81       	ldd	r31, Y+6	; 0x06
    437c:	84 89       	ldd	r24, Z+20	; 0x14
    437e:	95 89       	ldd	r25, Z+21	; 0x15
    4380:	00 97       	sbiw	r24, 0x00	; 0
    4382:	29 f0       	breq	.+10     	; 0x438e <vTaskIncrementTick+0x140>
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	9e 81       	ldd	r25, Y+6	; 0x06
    4388:	0c 96       	adiw	r24, 0x0c	; 12
    438a:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
    438e:	ed 81       	ldd	r30, Y+5	; 0x05
    4390:	fe 81       	ldd	r31, Y+6	; 0x06
    4392:	96 89       	ldd	r25, Z+22	; 0x16
    4394:	80 91 95 06 	lds	r24, 0x0695
    4398:	89 17       	cp	r24, r25
    439a:	28 f4       	brcc	.+10     	; 0x43a6 <vTaskIncrementTick+0x158>
    439c:	ed 81       	ldd	r30, Y+5	; 0x05
    439e:	fe 81       	ldd	r31, Y+6	; 0x06
    43a0:	86 89       	ldd	r24, Z+22	; 0x16
    43a2:	80 93 95 06 	sts	0x0695, r24
    43a6:	ed 81       	ldd	r30, Y+5	; 0x05
    43a8:	fe 81       	ldd	r31, Y+6	; 0x06
    43aa:	86 89       	ldd	r24, Z+22	; 0x16
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	c9 01       	movw	r24, r18
    43b2:	88 0f       	add	r24, r24
    43b4:	99 1f       	adc	r25, r25
    43b6:	88 0f       	add	r24, r24
    43b8:	99 1f       	adc	r25, r25
    43ba:	88 0f       	add	r24, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	82 0f       	add	r24, r18
    43c0:	93 1f       	adc	r25, r19
    43c2:	ac 01       	movw	r20, r24
    43c4:	44 56       	subi	r20, 0x64	; 100
    43c6:	59 4f       	sbci	r21, 0xF9	; 249
    43c8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ca:	9e 81       	ldd	r25, Y+6	; 0x06
    43cc:	9c 01       	movw	r18, r24
    43ce:	2e 5f       	subi	r18, 0xFE	; 254
    43d0:	3f 4f       	sbci	r19, 0xFF	; 255
    43d2:	ca 01       	movw	r24, r20
    43d4:	b9 01       	movw	r22, r18
    43d6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>
    43da:	9a cf       	rjmp	.-204    	; 0x4310 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    43dc:	80 91 98 06 	lds	r24, 0x0698
    43e0:	8f 5f       	subi	r24, 0xFF	; 255
    43e2:	80 93 98 06 	sts	0x0698, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    43e6:	26 96       	adiw	r28, 0x06	; 6
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	00 d0       	rcall	.+0      	; 0x43fe <vTaskSwitchContext+0x6>
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4402:	80 91 97 06 	lds	r24, 0x0697
    4406:	88 23       	and	r24, r24
    4408:	49 f0       	breq	.+18     	; 0x441c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	80 93 99 06 	sts	0x0699, r24
    4410:	54 c0       	rjmp	.+168    	; 0x44ba <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4412:	80 91 95 06 	lds	r24, 0x0695
    4416:	81 50       	subi	r24, 0x01	; 1
    4418:	80 93 95 06 	sts	0x0695, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    441c:	80 91 95 06 	lds	r24, 0x0695
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	c9 01       	movw	r24, r18
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	82 0f       	add	r24, r18
    4434:	93 1f       	adc	r25, r19
    4436:	fc 01       	movw	r30, r24
    4438:	e4 56       	subi	r30, 0x64	; 100
    443a:	f9 4f       	sbci	r31, 0xF9	; 249
    443c:	80 81       	ld	r24, Z
    443e:	88 23       	and	r24, r24
    4440:	41 f3       	breq	.-48     	; 0x4412 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4442:	80 91 95 06 	lds	r24, 0x0695
    4446:	28 2f       	mov	r18, r24
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	c9 01       	movw	r24, r18
    444c:	88 0f       	add	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	88 0f       	add	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	82 0f       	add	r24, r18
    445a:	93 1f       	adc	r25, r19
    445c:	84 56       	subi	r24, 0x64	; 100
    445e:	99 4f       	sbci	r25, 0xF9	; 249
    4460:	9a 83       	std	Y+2, r25	; 0x02
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	e9 81       	ldd	r30, Y+1	; 0x01
    4466:	fa 81       	ldd	r31, Y+2	; 0x02
    4468:	01 80       	ldd	r0, Z+1	; 0x01
    446a:	f2 81       	ldd	r31, Z+2	; 0x02
    446c:	e0 2d       	mov	r30, r0
    446e:	82 81       	ldd	r24, Z+2	; 0x02
    4470:	93 81       	ldd	r25, Z+3	; 0x03
    4472:	e9 81       	ldd	r30, Y+1	; 0x01
    4474:	fa 81       	ldd	r31, Y+2	; 0x02
    4476:	92 83       	std	Z+2, r25	; 0x02
    4478:	81 83       	std	Z+1, r24	; 0x01
    447a:	e9 81       	ldd	r30, Y+1	; 0x01
    447c:	fa 81       	ldd	r31, Y+2	; 0x02
    447e:	21 81       	ldd	r18, Z+1	; 0x01
    4480:	32 81       	ldd	r19, Z+2	; 0x02
    4482:	89 81       	ldd	r24, Y+1	; 0x01
    4484:	9a 81       	ldd	r25, Y+2	; 0x02
    4486:	03 96       	adiw	r24, 0x03	; 3
    4488:	28 17       	cp	r18, r24
    448a:	39 07       	cpc	r19, r25
    448c:	59 f4       	brne	.+22     	; 0x44a4 <vTaskSwitchContext+0xac>
    448e:	e9 81       	ldd	r30, Y+1	; 0x01
    4490:	fa 81       	ldd	r31, Y+2	; 0x02
    4492:	01 80       	ldd	r0, Z+1	; 0x01
    4494:	f2 81       	ldd	r31, Z+2	; 0x02
    4496:	e0 2d       	mov	r30, r0
    4498:	82 81       	ldd	r24, Z+2	; 0x02
    449a:	93 81       	ldd	r25, Z+3	; 0x03
    449c:	e9 81       	ldd	r30, Y+1	; 0x01
    449e:	fa 81       	ldd	r31, Y+2	; 0x02
    44a0:	92 83       	std	Z+2, r25	; 0x02
    44a2:	81 83       	std	Z+1, r24	; 0x01
    44a4:	e9 81       	ldd	r30, Y+1	; 0x01
    44a6:	fa 81       	ldd	r31, Y+2	; 0x02
    44a8:	01 80       	ldd	r0, Z+1	; 0x01
    44aa:	f2 81       	ldd	r31, Z+2	; 0x02
    44ac:	e0 2d       	mov	r30, r0
    44ae:	86 81       	ldd	r24, Z+6	; 0x06
    44b0:	97 81       	ldd	r25, Z+7	; 0x07
    44b2:	90 93 8f 06 	sts	0x068F, r25
    44b6:	80 93 8e 06 	sts	0x068E, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	00 d0       	rcall	.+0      	; 0x44ca <vTaskPlaceOnEventList+0x6>
    44ca:	00 d0       	rcall	.+0      	; 0x44cc <vTaskPlaceOnEventList+0x8>
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <vTaskPlaceOnEventList+0xa>
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	9c 83       	std	Y+4, r25	; 0x04
    44d4:	8b 83       	std	Y+3, r24	; 0x03
    44d6:	7e 83       	std	Y+6, r23	; 0x06
    44d8:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    44da:	4b 81       	ldd	r20, Y+3	; 0x03
    44dc:	5c 81       	ldd	r21, Y+4	; 0x04
    44de:	80 91 8e 06 	lds	r24, 0x068E
    44e2:	90 91 8f 06 	lds	r25, 0x068F
    44e6:	9c 01       	movw	r18, r24
    44e8:	24 5f       	subi	r18, 0xF4	; 244
    44ea:	3f 4f       	sbci	r19, 0xFF	; 255
    44ec:	ca 01       	movw	r24, r20
    44ee:	b9 01       	movw	r22, r18
    44f0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    44f4:	80 91 8e 06 	lds	r24, 0x068E
    44f8:	90 91 8f 06 	lds	r25, 0x068F
    44fc:	02 96       	adiw	r24, 0x02	; 2
    44fe:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4502:	20 91 92 06 	lds	r18, 0x0692
    4506:	30 91 93 06 	lds	r19, 0x0693
    450a:	8d 81       	ldd	r24, Y+5	; 0x05
    450c:	9e 81       	ldd	r25, Y+6	; 0x06
    450e:	82 0f       	add	r24, r18
    4510:	93 1f       	adc	r25, r19
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	9a 81       	ldd	r25, Y+2	; 0x02
    451a:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    451e:	26 96       	adiw	r28, 0x06	; 6
    4520:	0f b6       	in	r0, 0x3f	; 63
    4522:	f8 94       	cli
    4524:	de bf       	out	0x3e, r29	; 62
    4526:	0f be       	out	0x3f, r0	; 63
    4528:	cd bf       	out	0x3d, r28	; 61
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	08 95       	ret

00004530 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4530:	df 93       	push	r29
    4532:	cf 93       	push	r28
    4534:	00 d0       	rcall	.+0      	; 0x4536 <xTaskRemoveFromEventList+0x6>
    4536:	00 d0       	rcall	.+0      	; 0x4538 <xTaskRemoveFromEventList+0x8>
    4538:	0f 92       	push	r0
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    453e:	9d 83       	std	Y+5, r25	; 0x05
    4540:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4542:	ec 81       	ldd	r30, Y+4	; 0x04
    4544:	fd 81       	ldd	r31, Y+5	; 0x05
    4546:	05 80       	ldd	r0, Z+5	; 0x05
    4548:	f6 81       	ldd	r31, Z+6	; 0x06
    454a:	e0 2d       	mov	r30, r0
    454c:	86 81       	ldd	r24, Z+6	; 0x06
    454e:	97 81       	ldd	r25, Z+7	; 0x07
    4550:	9b 83       	std	Y+3, r25	; 0x03
    4552:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4554:	8a 81       	ldd	r24, Y+2	; 0x02
    4556:	9b 81       	ldd	r25, Y+3	; 0x03
    4558:	0c 96       	adiw	r24, 0x0c	; 12
    455a:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    455e:	80 91 97 06 	lds	r24, 0x0697
    4562:	88 23       	and	r24, r24
    4564:	61 f5       	brne	.+88     	; 0x45be <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4566:	8a 81       	ldd	r24, Y+2	; 0x02
    4568:	9b 81       	ldd	r25, Y+3	; 0x03
    456a:	02 96       	adiw	r24, 0x02	; 2
    456c:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4570:	ea 81       	ldd	r30, Y+2	; 0x02
    4572:	fb 81       	ldd	r31, Y+3	; 0x03
    4574:	96 89       	ldd	r25, Z+22	; 0x16
    4576:	80 91 95 06 	lds	r24, 0x0695
    457a:	89 17       	cp	r24, r25
    457c:	28 f4       	brcc	.+10     	; 0x4588 <xTaskRemoveFromEventList+0x58>
    457e:	ea 81       	ldd	r30, Y+2	; 0x02
    4580:	fb 81       	ldd	r31, Y+3	; 0x03
    4582:	86 89       	ldd	r24, Z+22	; 0x16
    4584:	80 93 95 06 	sts	0x0695, r24
    4588:	ea 81       	ldd	r30, Y+2	; 0x02
    458a:	fb 81       	ldd	r31, Y+3	; 0x03
    458c:	86 89       	ldd	r24, Z+22	; 0x16
    458e:	28 2f       	mov	r18, r24
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	c9 01       	movw	r24, r18
    4594:	88 0f       	add	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	88 0f       	add	r24, r24
    459a:	99 1f       	adc	r25, r25
    459c:	88 0f       	add	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	82 0f       	add	r24, r18
    45a2:	93 1f       	adc	r25, r19
    45a4:	ac 01       	movw	r20, r24
    45a6:	44 56       	subi	r20, 0x64	; 100
    45a8:	59 4f       	sbci	r21, 0xF9	; 249
    45aa:	8a 81       	ldd	r24, Y+2	; 0x02
    45ac:	9b 81       	ldd	r25, Y+3	; 0x03
    45ae:	9c 01       	movw	r18, r24
    45b0:	2e 5f       	subi	r18, 0xFE	; 254
    45b2:	3f 4f       	sbci	r19, 0xFF	; 255
    45b4:	ca 01       	movw	r24, r20
    45b6:	b9 01       	movw	r22, r18
    45b8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>
    45bc:	0a c0       	rjmp	.+20     	; 0x45d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    45be:	8a 81       	ldd	r24, Y+2	; 0x02
    45c0:	9b 81       	ldd	r25, Y+3	; 0x03
    45c2:	9c 01       	movw	r18, r24
    45c4:	24 5f       	subi	r18, 0xF4	; 244
    45c6:	3f 4f       	sbci	r19, 0xFF	; 255
    45c8:	88 ee       	ldi	r24, 0xE8	; 232
    45ca:	96 e0       	ldi	r25, 0x06	; 6
    45cc:	b9 01       	movw	r22, r18
    45ce:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    45d2:	ea 81       	ldd	r30, Y+2	; 0x02
    45d4:	fb 81       	ldd	r31, Y+3	; 0x03
    45d6:	96 89       	ldd	r25, Z+22	; 0x16
    45d8:	e0 91 8e 06 	lds	r30, 0x068E
    45dc:	f0 91 8f 06 	lds	r31, 0x068F
    45e0:	86 89       	ldd	r24, Z+22	; 0x16
    45e2:	98 17       	cp	r25, r24
    45e4:	18 f0       	brcs	.+6      	; 0x45ec <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	89 83       	std	Y+1, r24	; 0x01
    45ea:	01 c0       	rjmp	.+2      	; 0x45ee <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    45ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	00 d0       	rcall	.+0      	; 0x4606 <vTaskSetTimeOutState+0x6>
    4606:	cd b7       	in	r28, 0x3d	; 61
    4608:	de b7       	in	r29, 0x3e	; 62
    460a:	9a 83       	std	Y+2, r25	; 0x02
    460c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    460e:	80 91 9a 06 	lds	r24, 0x069A
    4612:	e9 81       	ldd	r30, Y+1	; 0x01
    4614:	fa 81       	ldd	r31, Y+2	; 0x02
    4616:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    4618:	80 91 92 06 	lds	r24, 0x0692
    461c:	90 91 93 06 	lds	r25, 0x0693
    4620:	e9 81       	ldd	r30, Y+1	; 0x01
    4622:	fa 81       	ldd	r31, Y+2	; 0x02
    4624:	92 83       	std	Z+2, r25	; 0x02
    4626:	81 83       	std	Z+1, r24	; 0x01
}
    4628:	0f 90       	pop	r0
    462a:	0f 90       	pop	r0
    462c:	cf 91       	pop	r28
    462e:	df 91       	pop	r29
    4630:	08 95       	ret

00004632 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4632:	df 93       	push	r29
    4634:	cf 93       	push	r28
    4636:	00 d0       	rcall	.+0      	; 0x4638 <xTaskCheckForTimeOut+0x6>
    4638:	00 d0       	rcall	.+0      	; 0x463a <xTaskCheckForTimeOut+0x8>
    463a:	0f 92       	push	r0
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62
    4640:	9b 83       	std	Y+3, r25	; 0x03
    4642:	8a 83       	std	Y+2, r24	; 0x02
    4644:	7d 83       	std	Y+5, r23	; 0x05
    4646:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4648:	0f b6       	in	r0, 0x3f	; 63
    464a:	f8 94       	cli
    464c:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    464e:	ea 81       	ldd	r30, Y+2	; 0x02
    4650:	fb 81       	ldd	r31, Y+3	; 0x03
    4652:	90 81       	ld	r25, Z
    4654:	80 91 9a 06 	lds	r24, 0x069A
    4658:	98 17       	cp	r25, r24
    465a:	71 f0       	breq	.+28     	; 0x4678 <xTaskCheckForTimeOut+0x46>
    465c:	ea 81       	ldd	r30, Y+2	; 0x02
    465e:	fb 81       	ldd	r31, Y+3	; 0x03
    4660:	21 81       	ldd	r18, Z+1	; 0x01
    4662:	32 81       	ldd	r19, Z+2	; 0x02
    4664:	80 91 92 06 	lds	r24, 0x0692
    4668:	90 91 93 06 	lds	r25, 0x0693
    466c:	82 17       	cp	r24, r18
    466e:	93 07       	cpc	r25, r19
    4670:	18 f0       	brcs	.+6      	; 0x4678 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	89 83       	std	Y+1, r24	; 0x01
    4676:	2f c0       	rjmp	.+94     	; 0x46d6 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4678:	20 91 92 06 	lds	r18, 0x0692
    467c:	30 91 93 06 	lds	r19, 0x0693
    4680:	ea 81       	ldd	r30, Y+2	; 0x02
    4682:	fb 81       	ldd	r31, Y+3	; 0x03
    4684:	81 81       	ldd	r24, Z+1	; 0x01
    4686:	92 81       	ldd	r25, Z+2	; 0x02
    4688:	28 1b       	sub	r18, r24
    468a:	39 0b       	sbc	r19, r25
    468c:	ec 81       	ldd	r30, Y+4	; 0x04
    468e:	fd 81       	ldd	r31, Y+5	; 0x05
    4690:	80 81       	ld	r24, Z
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	28 17       	cp	r18, r24
    4696:	39 07       	cpc	r19, r25
    4698:	e0 f4       	brcc	.+56     	; 0x46d2 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    469a:	ec 81       	ldd	r30, Y+4	; 0x04
    469c:	fd 81       	ldd	r31, Y+5	; 0x05
    469e:	40 81       	ld	r20, Z
    46a0:	51 81       	ldd	r21, Z+1	; 0x01
    46a2:	ea 81       	ldd	r30, Y+2	; 0x02
    46a4:	fb 81       	ldd	r31, Y+3	; 0x03
    46a6:	21 81       	ldd	r18, Z+1	; 0x01
    46a8:	32 81       	ldd	r19, Z+2	; 0x02
    46aa:	80 91 92 06 	lds	r24, 0x0692
    46ae:	90 91 93 06 	lds	r25, 0x0693
    46b2:	b9 01       	movw	r22, r18
    46b4:	68 1b       	sub	r22, r24
    46b6:	79 0b       	sbc	r23, r25
    46b8:	cb 01       	movw	r24, r22
    46ba:	84 0f       	add	r24, r20
    46bc:	95 1f       	adc	r25, r21
    46be:	ec 81       	ldd	r30, Y+4	; 0x04
    46c0:	fd 81       	ldd	r31, Y+5	; 0x05
    46c2:	91 83       	std	Z+1, r25	; 0x01
    46c4:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    46c6:	8a 81       	ldd	r24, Y+2	; 0x02
    46c8:	9b 81       	ldd	r25, Y+3	; 0x03
    46ca:	0e 94 00 23 	call	0x4600	; 0x4600 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    46ce:	19 82       	std	Y+1, r1	; 0x01
    46d0:	02 c0       	rjmp	.+4      	; 0x46d6 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    46d6:	0f 90       	pop	r0
    46d8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    46da:	89 81       	ldd	r24, Y+1	; 0x01
}
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	80 93 99 06 	sts	0x0699, r24
}
    46fa:	cf 91       	pop	r28
    46fc:	df 91       	pop	r29
    46fe:	08 95       	ret

00004700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4700:	df 93       	push	r29
    4702:	cf 93       	push	r28
    4704:	00 d0       	rcall	.+0      	; 0x4706 <prvIdleTask+0x6>
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
    470a:	9a 83       	std	Y+2, r25	; 0x02
    470c:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    470e:	0e 94 1e 24 	call	0x483c	; 0x483c <prvCheckTasksWaitingTermination>
    4712:	fd cf       	rjmp	.-6      	; 0x470e <prvIdleTask+0xe>

00004714 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	29 97       	sbiw	r28, 0x09	; 9
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	7c 83       	std	Y+4, r23	; 0x04
    4732:	6b 83       	std	Y+3, r22	; 0x03
    4734:	4d 83       	std	Y+5, r20	; 0x05
    4736:	3f 83       	std	Y+7, r19	; 0x07
    4738:	2e 83       	std	Y+6, r18	; 0x06
    473a:	19 87       	std	Y+9, r17	; 0x09
    473c:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    473e:	89 81       	ldd	r24, Y+1	; 0x01
    4740:	9a 81       	ldd	r25, Y+2	; 0x02
    4742:	49 96       	adiw	r24, 0x19	; 25
    4744:	2b 81       	ldd	r18, Y+3	; 0x03
    4746:	3c 81       	ldd	r19, Y+4	; 0x04
    4748:	b9 01       	movw	r22, r18
    474a:	48 e0       	ldi	r20, 0x08	; 8
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	0e 94 84 2a 	call	0x5508	; 0x5508 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4752:	e9 81       	ldd	r30, Y+1	; 0x01
    4754:	fa 81       	ldd	r31, Y+2	; 0x02
    4756:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4758:	8d 81       	ldd	r24, Y+5	; 0x05
    475a:	86 30       	cpi	r24, 0x06	; 6
    475c:	10 f0       	brcs	.+4      	; 0x4762 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    475e:	85 e0       	ldi	r24, 0x05	; 5
    4760:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    4762:	e9 81       	ldd	r30, Y+1	; 0x01
    4764:	fa 81       	ldd	r31, Y+2	; 0x02
    4766:	8d 81       	ldd	r24, Y+5	; 0x05
    4768:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	02 96       	adiw	r24, 0x02	; 2
    4770:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	9a 81       	ldd	r25, Y+2	; 0x02
    4778:	0c 96       	adiw	r24, 0x0c	; 12
    477a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    477e:	e9 81       	ldd	r30, Y+1	; 0x01
    4780:	fa 81       	ldd	r31, Y+2	; 0x02
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	9a 81       	ldd	r25, Y+2	; 0x02
    4786:	91 87       	std	Z+9, r25	; 0x09
    4788:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    478a:	8d 81       	ldd	r24, Y+5	; 0x05
    478c:	28 2f       	mov	r18, r24
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	86 e0       	ldi	r24, 0x06	; 6
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	82 1b       	sub	r24, r18
    4796:	93 0b       	sbc	r25, r19
    4798:	e9 81       	ldd	r30, Y+1	; 0x01
    479a:	fa 81       	ldd	r31, Y+2	; 0x02
    479c:	95 87       	std	Z+13, r25	; 0x0d
    479e:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    47a0:	e9 81       	ldd	r30, Y+1	; 0x01
    47a2:	fa 81       	ldd	r31, Y+2	; 0x02
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	9a 81       	ldd	r25, Y+2	; 0x02
    47a8:	93 8b       	std	Z+19, r25	; 0x13
    47aa:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    47ac:	29 96       	adiw	r28, 0x09	; 9
    47ae:	0f b6       	in	r0, 0x3f	; 63
    47b0:	f8 94       	cli
    47b2:	de bf       	out	0x3e, r29	; 62
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	cd bf       	out	0x3d, r28	; 61
    47b8:	cf 91       	pop	r28
    47ba:	df 91       	pop	r29
    47bc:	1f 91       	pop	r17
    47be:	0f 91       	pop	r16
    47c0:	08 95       	ret

000047c2 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    47c2:	df 93       	push	r29
    47c4:	cf 93       	push	r28
    47c6:	0f 92       	push	r0
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    47cc:	19 82       	std	Y+1, r1	; 0x01
    47ce:	13 c0       	rjmp	.+38     	; 0x47f6 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	28 2f       	mov	r18, r24
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	c9 01       	movw	r24, r18
    47d8:	88 0f       	add	r24, r24
    47da:	99 1f       	adc	r25, r25
    47dc:	88 0f       	add	r24, r24
    47de:	99 1f       	adc	r25, r25
    47e0:	88 0f       	add	r24, r24
    47e2:	99 1f       	adc	r25, r25
    47e4:	82 0f       	add	r24, r18
    47e6:	93 1f       	adc	r25, r19
    47e8:	84 56       	subi	r24, 0x64	; 100
    47ea:	99 4f       	sbci	r25, 0xF9	; 249
    47ec:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    47f0:	89 81       	ldd	r24, Y+1	; 0x01
    47f2:	8f 5f       	subi	r24, 0xFF	; 255
    47f4:	89 83       	std	Y+1, r24	; 0x01
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	86 30       	cpi	r24, 0x06	; 6
    47fa:	50 f3       	brcs	.-44     	; 0x47d0 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    47fc:	82 ed       	ldi	r24, 0xD2	; 210
    47fe:	96 e0       	ldi	r25, 0x06	; 6
    4800:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4804:	8b ed       	ldi	r24, 0xDB	; 219
    4806:	96 e0       	ldi	r25, 0x06	; 6
    4808:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    480c:	88 ee       	ldi	r24, 0xE8	; 232
    480e:	96 e0       	ldi	r25, 0x06	; 6
    4810:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4814:	81 ef       	ldi	r24, 0xF1	; 241
    4816:	96 e0       	ldi	r25, 0x06	; 6
    4818:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    481c:	82 ed       	ldi	r24, 0xD2	; 210
    481e:	96 e0       	ldi	r25, 0x06	; 6
    4820:	90 93 e5 06 	sts	0x06E5, r25
    4824:	80 93 e4 06 	sts	0x06E4, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4828:	8b ed       	ldi	r24, 0xDB	; 219
    482a:	96 e0       	ldi	r25, 0x06	; 6
    482c:	90 93 e7 06 	sts	0x06E7, r25
    4830:	80 93 e6 06 	sts	0x06E6, r24
}
    4834:	0f 90       	pop	r0
    4836:	cf 91       	pop	r28
    4838:	df 91       	pop	r29
    483a:	08 95       	ret

0000483c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    483c:	df 93       	push	r29
    483e:	cf 93       	push	r28
    4840:	00 d0       	rcall	.+0      	; 0x4842 <prvCheckTasksWaitingTermination+0x6>
    4842:	0f 92       	push	r0
    4844:	cd b7       	in	r28, 0x3d	; 61
    4846:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4848:	80 91 90 06 	lds	r24, 0x0690
    484c:	88 23       	and	r24, r24
    484e:	71 f1       	breq	.+92     	; 0x48ac <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    4850:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4854:	80 91 f1 06 	lds	r24, 0x06F1
    4858:	1b 82       	std	Y+3, r1	; 0x03
    485a:	88 23       	and	r24, r24
    485c:	11 f4       	brne	.+4      	; 0x4862 <prvCheckTasksWaitingTermination+0x26>
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    4862:	0e 94 68 20 	call	0x40d0	; 0x40d0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4866:	8b 81       	ldd	r24, Y+3	; 0x03
    4868:	88 23       	and	r24, r24
    486a:	01 f5       	brne	.+64     	; 0x48ac <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4872:	e0 91 f6 06 	lds	r30, 0x06F6
    4876:	f0 91 f7 06 	lds	r31, 0x06F7
    487a:	86 81       	ldd	r24, Z+6	; 0x06
    487c:	97 81       	ldd	r25, Z+7	; 0x07
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	9a 81       	ldd	r25, Y+2	; 0x02
    4886:	02 96       	adiw	r24, 0x02	; 2
    4888:	0e 94 65 16 	call	0x2cca	; 0x2cca <vListRemove>
					--uxCurrentNumberOfTasks;
    488c:	80 91 91 06 	lds	r24, 0x0691
    4890:	81 50       	subi	r24, 0x01	; 1
    4892:	80 93 91 06 	sts	0x0691, r24
					--uxTasksDeleted;
    4896:	80 91 90 06 	lds	r24, 0x0690
    489a:	81 50       	subi	r24, 0x01	; 1
    489c:	80 93 90 06 	sts	0x0690, r24
				}
				taskEXIT_CRITICAL();
    48a0:	0f 90       	pop	r0
    48a2:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	9a 81       	ldd	r25, Y+2	; 0x02
    48a8:	0e 94 f5 24 	call	0x49ea	; 0x49ea <prvDeleteTCB>
			}
		}
	}
	#endif
}
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	00 d0       	rcall	.+0      	; 0x48be <prvAddCurrentTaskToDelayedList+0x6>
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    48c6:	e0 91 8e 06 	lds	r30, 0x068E
    48ca:	f0 91 8f 06 	lds	r31, 0x068F
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	9a 81       	ldd	r25, Y+2	; 0x02
    48d2:	93 83       	std	Z+3, r25	; 0x03
    48d4:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    48d6:	20 91 92 06 	lds	r18, 0x0692
    48da:	30 91 93 06 	lds	r19, 0x0693
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	9a 81       	ldd	r25, Y+2	; 0x02
    48e2:	82 17       	cp	r24, r18
    48e4:	93 07       	cpc	r25, r19
    48e6:	70 f4       	brcc	.+28     	; 0x4904 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48e8:	80 91 e6 06 	lds	r24, 0x06E6
    48ec:	90 91 e7 06 	lds	r25, 0x06E7
    48f0:	20 91 8e 06 	lds	r18, 0x068E
    48f4:	30 91 8f 06 	lds	r19, 0x068F
    48f8:	2e 5f       	subi	r18, 0xFE	; 254
    48fa:	3f 4f       	sbci	r19, 0xFF	; 255
    48fc:	b9 01       	movw	r22, r18
    48fe:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>
    4902:	1e c0       	rjmp	.+60     	; 0x4940 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4904:	40 91 e4 06 	lds	r20, 0x06E4
    4908:	50 91 e5 06 	lds	r21, 0x06E5
    490c:	80 91 8e 06 	lds	r24, 0x068E
    4910:	90 91 8f 06 	lds	r25, 0x068F
    4914:	9c 01       	movw	r18, r24
    4916:	2e 5f       	subi	r18, 0xFE	; 254
    4918:	3f 4f       	sbci	r19, 0xFF	; 255
    491a:	ca 01       	movw	r24, r20
    491c:	b9 01       	movw	r22, r18
    491e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4922:	20 91 9d 01 	lds	r18, 0x019D
    4926:	30 91 9e 01 	lds	r19, 0x019E
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	82 17       	cp	r24, r18
    4930:	93 07       	cpc	r25, r19
    4932:	30 f4       	brcc	.+12     	; 0x4940 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	9a 81       	ldd	r25, Y+2	; 0x02
    4938:	90 93 9e 01 	sts	0x019E, r25
    493c:	80 93 9d 01 	sts	0x019D, r24
		}
	}
}
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	cf 91       	pop	r28
    4946:	df 91       	pop	r29
    4948:	08 95       	ret

0000494a <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    494a:	df 93       	push	r29
    494c:	cf 93       	push	r28
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
    4952:	28 97       	sbiw	r28, 0x08	; 8
    4954:	0f b6       	in	r0, 0x3f	; 63
    4956:	f8 94       	cli
    4958:	de bf       	out	0x3e, r29	; 62
    495a:	0f be       	out	0x3f, r0	; 63
    495c:	cd bf       	out	0x3d, r28	; 61
    495e:	9c 83       	std	Y+4, r25	; 0x04
    4960:	8b 83       	std	Y+3, r24	; 0x03
    4962:	7e 83       	std	Y+6, r23	; 0x06
    4964:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4966:	81 e2       	ldi	r24, 0x21	; 33
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <pvPortMalloc>
    496e:	9a 83       	std	Y+2, r25	; 0x02
    4970:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4972:	89 81       	ldd	r24, Y+1	; 0x01
    4974:	9a 81       	ldd	r25, Y+2	; 0x02
    4976:	00 97       	sbiw	r24, 0x00	; 0
    4978:	69 f1       	breq	.+90     	; 0x49d4 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	39 f4       	brne	.+14     	; 0x4990 <prvAllocateTCBAndStack+0x46>
    4982:	8b 81       	ldd	r24, Y+3	; 0x03
    4984:	9c 81       	ldd	r25, Y+4	; 0x04
    4986:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <pvPortMalloc>
    498a:	98 87       	std	Y+8, r25	; 0x08
    498c:	8f 83       	std	Y+7, r24	; 0x07
    498e:	04 c0       	rjmp	.+8      	; 0x4998 <prvAllocateTCBAndStack+0x4e>
    4990:	8d 81       	ldd	r24, Y+5	; 0x05
    4992:	9e 81       	ldd	r25, Y+6	; 0x06
    4994:	98 87       	std	Y+8, r25	; 0x08
    4996:	8f 83       	std	Y+7, r24	; 0x07
    4998:	e9 81       	ldd	r30, Y+1	; 0x01
    499a:	fa 81       	ldd	r31, Y+2	; 0x02
    499c:	8f 81       	ldd	r24, Y+7	; 0x07
    499e:	98 85       	ldd	r25, Y+8	; 0x08
    49a0:	90 8f       	std	Z+24, r25	; 0x18
    49a2:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    49a4:	e9 81       	ldd	r30, Y+1	; 0x01
    49a6:	fa 81       	ldd	r31, Y+2	; 0x02
    49a8:	87 89       	ldd	r24, Z+23	; 0x17
    49aa:	90 8d       	ldd	r25, Z+24	; 0x18
    49ac:	00 97       	sbiw	r24, 0x00	; 0
    49ae:	39 f4       	brne	.+14     	; 0x49be <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	9a 81       	ldd	r25, Y+2	; 0x02
    49b4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
			pxNewTCB = NULL;
    49b8:	1a 82       	std	Y+2, r1	; 0x02
    49ba:	19 82       	std	Y+1, r1	; 0x01
    49bc:	0b c0       	rjmp	.+22     	; 0x49d4 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    49be:	e9 81       	ldd	r30, Y+1	; 0x01
    49c0:	fa 81       	ldd	r31, Y+2	; 0x02
    49c2:	87 89       	ldd	r24, Z+23	; 0x17
    49c4:	90 8d       	ldd	r25, Z+24	; 0x18
    49c6:	2b 81       	ldd	r18, Y+3	; 0x03
    49c8:	3c 81       	ldd	r19, Y+4	; 0x04
    49ca:	65 ea       	ldi	r22, 0xA5	; 165
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	a9 01       	movw	r20, r18
    49d0:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <memset>
		}
	}

	return pxNewTCB;
    49d4:	89 81       	ldd	r24, Y+1	; 0x01
    49d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    49d8:	28 96       	adiw	r28, 0x08	; 8
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	de bf       	out	0x3e, r29	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	08 95       	ret

000049ea <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <prvDeleteTCB+0x6>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	9a 83       	std	Y+2, r25	; 0x02
    49f6:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    49f8:	e9 81       	ldd	r30, Y+1	; 0x01
    49fa:	fa 81       	ldd	r31, Y+2	; 0x02
    49fc:	87 89       	ldd	r24, Z+23	; 0x17
    49fe:	90 8d       	ldd	r25, Z+24	; 0x18
    4a00:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
		vPortFree( pxTCB );
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	9a 81       	ldd	r25, Y+2	; 0x02
    4a08:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vPortFree>
	}
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <main>:

/********* System Task ***********/
void Task_vDisplaytime(void* pv);
void Task_vDisplaySensors(void* pv);

int main(void) {
    4a16:	af 92       	push	r10
    4a18:	bf 92       	push	r11
    4a1a:	cf 92       	push	r12
    4a1c:	df 92       	push	r13
    4a1e:	ef 92       	push	r14
    4a20:	ff 92       	push	r15
    4a22:	0f 93       	push	r16
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62

	/* interfaces                       */
	LCD_INIT();
    4a2c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <LCD_INIT>
	MADC_VidInit();
    4a30:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <MADC_VidInit>
	//TIMER0_VidInit();

	/*External interrupt intialization*/
	CLR_BIT(DDRD, 2);
    4a34:	a1 e3       	ldi	r26, 0x31	; 49
    4a36:	b0 e0       	ldi	r27, 0x00	; 0
    4a38:	e1 e3       	ldi	r30, 0x31	; 49
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	8b 7f       	andi	r24, 0xFB	; 251
    4a40:	8c 93       	st	X, r24
	CLR_BIT(DDRD, 3);
    4a42:	a1 e3       	ldi	r26, 0x31	; 49
    4a44:	b0 e0       	ldi	r27, 0x00	; 0
    4a46:	e1 e3       	ldi	r30, 0x31	; 49
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	80 81       	ld	r24, Z
    4a4c:	87 7f       	andi	r24, 0xF7	; 247
    4a4e:	8c 93       	st	X, r24
	CLR_BIT(DDRB, 2);
    4a50:	a7 e3       	ldi	r26, 0x37	; 55
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	e7 e3       	ldi	r30, 0x37	; 55
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	8b 7f       	andi	r24, 0xFB	; 251
    4a5c:	8c 93       	st	X, r24
	SET_BIT(PORTD, 2);
    4a5e:	a2 e3       	ldi	r26, 0x32	; 50
    4a60:	b0 e0       	ldi	r27, 0x00	; 0
    4a62:	e2 e3       	ldi	r30, 0x32	; 50
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	84 60       	ori	r24, 0x04	; 4
    4a6a:	8c 93       	st	X, r24
	SET_BIT(PORTD, 3);
    4a6c:	a2 e3       	ldi	r26, 0x32	; 50
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	e2 e3       	ldi	r30, 0x32	; 50
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	80 81       	ld	r24, Z
    4a76:	88 60       	ori	r24, 0x08	; 8
    4a78:	8c 93       	st	X, r24
	SET_BIT(PORTB, 2);
    4a7a:	a8 e3       	ldi	r26, 0x38	; 56
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	e8 e3       	ldi	r30, 0x38	; 56
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	80 81       	ld	r24, Z
    4a84:	84 60       	ori	r24, 0x04	; 4
    4a86:	8c 93       	st	X, r24
	MEXTI0_VidInit();
    4a88:	0e 94 3e 07 	call	0xe7c	; 0xe7c <MEXTI0_VidInit>
	MEXTI1_VidInit();
    4a8c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <MEXTI1_VidInit>
	MEXTI2_VidInit();
    4a90:	0e 94 76 07 	call	0xeec	; 0xeec <MEXTI2_VidInit>

	MEXTI_VidSenseControl( MEXTI_LOW_LEVEL, EXTI0);
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	0e 94 41 08 	call	0x1082	; 0x1082 <MEXTI_VidSenseControl>
	MEXTI_VidSenseControl( MEXTI_LOW_LEVEL, EXTI1);
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	61 e0       	ldi	r22, 0x01	; 1
    4aa6:	70 e0       	ldi	r23, 0x00	; 0
    4aa8:	0e 94 41 08 	call	0x1082	; 0x1082 <MEXTI_VidSenseControl>
	MEXTI_VidSenseControl( MEXTI_LOW_LEVEL, EXTI2);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	62 e0       	ldi	r22, 0x02	; 2
    4ab2:	70 e0       	ldi	r23, 0x00	; 0
    4ab4:	0e 94 41 08 	call	0x1082	; 0x1082 <MEXTI_VidSenseControl>

	EXTI0_Set_CallBackFunction(ClockEditMode);
    4ab8:	8c e4       	ldi	r24, 0x4C	; 76
    4aba:	99 e2       	ldi	r25, 0x29	; 41
    4abc:	0e 94 84 07 	call	0xf08	; 0xf08 <EXTI0_Set_CallBackFunction>
	EXTI1_Set_CallBackFunction(CLK_SENSOR_SELECT);
    4ac0:	8b e3       	ldi	r24, 0x3B	; 59
    4ac2:	99 e2       	ldi	r25, 0x29	; 41
    4ac4:	0e 94 c3 07 	call	0xf86	; 0xf86 <EXTI1_Set_CallBackFunction>
	EXTI2_Set_CallBackFunction(SELECT);
    4ac8:	85 e2       	ldi	r24, 0x25	; 37
    4aca:	99 e2       	ldi	r25, 0x29	; 41
    4acc:	0e 94 02 08 	call	0x1004	; 0x1004 <EXTI2_Set_CallBackFunction>

	MGIE_VidEnable();
    4ad0:	0e 94 22 07 	call	0xe44	; 0xe44 <MGIE_VidEnable>
	// clock initializations 
	P->HOUR = 11U;
    4ad4:	e0 91 9f 01 	lds	r30, 0x019F
    4ad8:	f0 91 a0 01 	lds	r31, 0x01A0
    4adc:	8b e0       	ldi	r24, 0x0B	; 11
    4ade:	82 83       	std	Z+2, r24	; 0x02
	P->MIN = 59U;
    4ae0:	e0 91 9f 01 	lds	r30, 0x019F
    4ae4:	f0 91 a0 01 	lds	r31, 0x01A0
    4ae8:	8b e3       	ldi	r24, 0x3B	; 59
    4aea:	81 83       	std	Z+1, r24	; 0x01
	P->SEC = 50U;
    4aec:	e0 91 9f 01 	lds	r30, 0x019F
    4af0:	f0 91 a0 01 	lds	r31, 0x01A0
    4af4:	82 e3       	ldi	r24, 0x32	; 50
    4af6:	80 83       	st	Z, r24
	P->Mode[0] = 'A';
    4af8:	e0 91 9f 01 	lds	r30, 0x019F
    4afc:	f0 91 a0 01 	lds	r31, 0x01A0
    4b00:	81 e4       	ldi	r24, 0x41	; 65
    4b02:	83 83       	std	Z+3, r24	; 0x03
	P->Mode[1] = 'M';
    4b04:	e0 91 9f 01 	lds	r30, 0x019F
    4b08:	f0 91 a0 01 	lds	r31, 0x01A0
    4b0c:	8d e4       	ldi	r24, 0x4D	; 77
    4b0e:	84 83       	std	Z+4, r24	; 0x04
	P->Mode[2] = '\0';
    4b10:	e0 91 9f 01 	lds	r30, 0x019F
    4b14:	f0 91 a0 01 	lds	r31, 0x01A0
    4b18:	15 82       	std	Z+5, r1	; 0x05

	P->DAY = 26U;
    4b1a:	e0 91 9f 01 	lds	r30, 0x019F
    4b1e:	f0 91 a0 01 	lds	r31, 0x01A0
    4b22:	8a e1       	ldi	r24, 0x1A	; 26
    4b24:	86 83       	std	Z+6, r24	; 0x06
	P->MONTH = 3U;
    4b26:	e0 91 9f 01 	lds	r30, 0x019F
    4b2a:	f0 91 a0 01 	lds	r31, 0x01A0
    4b2e:	83 e0       	ldi	r24, 0x03	; 3
    4b30:	87 83       	std	Z+7, r24	; 0x07
	P->YEAR = 2022U;
    4b32:	e0 91 9f 01 	lds	r30, 0x019F
    4b36:	f0 91 a0 01 	lds	r31, 0x01A0
    4b3a:	86 ee       	ldi	r24, 0xE6	; 230
    4b3c:	97 e0       	ldi	r25, 0x07	; 7
    4b3e:	a0 e0       	ldi	r26, 0x00	; 0
    4b40:	b0 e0       	ldi	r27, 0x00	; 0
    4b42:	80 87       	std	Z+8, r24	; 0x08
    4b44:	91 87       	std	Z+9, r25	; 0x09
    4b46:	a2 87       	std	Z+10, r26	; 0x0a
    4b48:	b3 87       	std	Z+11, r27	; 0x0b

	xTaskCreate(Task_vDisplaytime, NULL, 300, NULL, 1, NULL);
    4b4a:	8f e4       	ldi	r24, 0x4F	; 79
    4b4c:	98 e2       	ldi	r25, 0x28	; 40
    4b4e:	60 e0       	ldi	r22, 0x00	; 0
    4b50:	70 e0       	ldi	r23, 0x00	; 0
    4b52:	4c e2       	ldi	r20, 0x2C	; 44
    4b54:	51 e0       	ldi	r21, 0x01	; 1
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	01 e0       	ldi	r16, 0x01	; 1
    4b5c:	ee 24       	eor	r14, r14
    4b5e:	ff 24       	eor	r15, r15
    4b60:	cc 24       	eor	r12, r12
    4b62:	dd 24       	eor	r13, r13
    4b64:	aa 24       	eor	r10, r10
    4b66:	bb 24       	eor	r11, r11
    4b68:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <xTaskGenericCreate>
	xTaskCreate(Task_vDisplaySensors, NULL, 150, NULL, 0, NULL);
    4b6c:	82 ea       	ldi	r24, 0xA2	; 162
    4b6e:	96 e2       	ldi	r25, 0x26	; 38
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	70 e0       	ldi	r23, 0x00	; 0
    4b74:	46 e9       	ldi	r20, 0x96	; 150
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	00 e0       	ldi	r16, 0x00	; 0
    4b7e:	ee 24       	eor	r14, r14
    4b80:	ff 24       	eor	r15, r15
    4b82:	cc 24       	eor	r12, r12
    4b84:	dd 24       	eor	r13, r13
    4b86:	aa 24       	eor	r10, r10
    4b88:	bb 24       	eor	r11, r11
    4b8a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <xTaskGenericCreate>

	vTaskStartScheduler();
    4b8e:	0e 94 19 20 	call	0x4032	; 0x4032 <vTaskStartScheduler>
    4b92:	ff cf       	rjmp	.-2      	; 0x4b92 <main+0x17c>

00004b94 <LCD_UPDATE_SEC>:
	}

}

/*  private APIS */
void LCD_UPDATE_SEC(u8 s) {
    4b94:	df 93       	push	r29
    4b96:	cf 93       	push	r28
    4b98:	0f 92       	push	r0
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
    4b9e:	89 83       	std	Y+1, r24	; 0x01

	LCD_GOTO_XY(1, 6);
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	66 e0       	ldi	r22, 0x06	; 6
    4ba4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT(s);
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>

}
    4bae:	0f 90       	pop	r0
    4bb0:	cf 91       	pop	r28
    4bb2:	df 91       	pop	r29
    4bb4:	08 95       	ret

00004bb6 <LCD_UPDATE_MIN>:

void LCD_UPDATE_MIN(u8 m) {
    4bb6:	df 93       	push	r29
    4bb8:	cf 93       	push	r28
    4bba:	0f 92       	push	r0
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	89 83       	std	Y+1, r24	; 0x01

	LCD_GOTO_XY(1, 3);
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	63 e0       	ldi	r22, 0x03	; 3
    4bc6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT(m);
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>

}
    4bd0:	0f 90       	pop	r0
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <LCD_UPDATE_HOUR>:

void LCD_UPDATE_HOUR(u8 h) {
    4bd8:	df 93       	push	r29
    4bda:	cf 93       	push	r28
    4bdc:	0f 92       	push	r0
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
    4be2:	89 83       	std	Y+1, r24	; 0x01

	LCD_GOTO_XY(1, 0);
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT(h);
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>

}
    4bf2:	0f 90       	pop	r0
    4bf4:	cf 91       	pop	r28
    4bf6:	df 91       	pop	r29
    4bf8:	08 95       	ret

00004bfa <LCD_UPDATE_MODE>:

void LCD_UPDATE_MODE(char * M) {
    4bfa:	df 93       	push	r29
    4bfc:	cf 93       	push	r28
    4bfe:	00 d0       	rcall	.+0      	; 0x4c00 <LCD_UPDATE_MODE+0x6>
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	9a 83       	std	Y+2, r25	; 0x02
    4c06:	89 83       	std	Y+1, r24	; 0x01
	LCD_GOTO_XY(1, 9);
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	69 e0       	ldi	r22, 0x09	; 9
    4c0c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(M);
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>

}
    4c18:	0f 90       	pop	r0
    4c1a:	0f 90       	pop	r0
    4c1c:	cf 91       	pop	r28
    4c1e:	df 91       	pop	r29
    4c20:	08 95       	ret

00004c22 <LCD_UPDATE_DAY>:

void LCD_UPDATE_DAY(u8 D) {
    4c22:	df 93       	push	r29
    4c24:	cf 93       	push	r28
    4c26:	0f 92       	push	r0
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	89 83       	std	Y+1, r24	; 0x01
	LCD_GOTO_XY(0, 0);
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	60 e0       	ldi	r22, 0x00	; 0
    4c32:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT(D);
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>
}
    4c3c:	0f 90       	pop	r0
    4c3e:	cf 91       	pop	r28
    4c40:	df 91       	pop	r29
    4c42:	08 95       	ret

00004c44 <LCD_UPDATE_MONTH>:

void LCD_UPDATE_MONTH(u8 M) {
    4c44:	df 93       	push	r29
    4c46:	cf 93       	push	r28
    4c48:	0f 92       	push	r0
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
    4c4e:	89 83       	std	Y+1, r24	; 0x01
	LCD_GOTO_XY(0, 3);
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	63 e0       	ldi	r22, 0x03	; 3
    4c54:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT(M);
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>
}
    4c5e:	0f 90       	pop	r0
    4c60:	cf 91       	pop	r28
    4c62:	df 91       	pop	r29
    4c64:	08 95       	ret

00004c66 <LCD_UPDATE_YEAR>:
void LCD_UPDATE_YEAR(u16 Y) {
    4c66:	df 93       	push	r29
    4c68:	cf 93       	push	r28
    4c6a:	00 d0       	rcall	.+0      	; 0x4c6c <LCD_UPDATE_YEAR+0x6>
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	9a 83       	std	Y+2, r25	; 0x02
    4c72:	89 83       	std	Y+1, r24	; 0x01

	LCD_GOTO_XY(0, 6);
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	66 e0       	ldi	r22, 0x06	; 6
    4c78:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_INT4(Y);
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c80:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_SEND_INT4>

}
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	cf 91       	pop	r28
    4c8a:	df 91       	pop	r29
    4c8c:	08 95       	ret

00004c8e <LCD_UPATE_CLOCK>:

/* function to dispaly */
void LCD_UPATE_CLOCK(u8 HOUR, u8 MIN, u8 SEC, char* Mode, u8 DAY, u8 MONTH,
		u16 YEAR) {
    4c8e:	cf 92       	push	r12
    4c90:	df 92       	push	r13
    4c92:	ef 92       	push	r14
    4c94:	0f 93       	push	r16
    4c96:	df 93       	push	r29
    4c98:	cf 93       	push	r28
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	29 97       	sbiw	r28, 0x09	; 9
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	89 83       	std	Y+1, r24	; 0x01
    4cac:	6a 83       	std	Y+2, r22	; 0x02
    4cae:	4b 83       	std	Y+3, r20	; 0x03
    4cb0:	3d 83       	std	Y+5, r19	; 0x05
    4cb2:	2c 83       	std	Y+4, r18	; 0x04
    4cb4:	0e 83       	std	Y+6, r16	; 0x06
    4cb6:	ef 82       	std	Y+7, r14	; 0x07
    4cb8:	d9 86       	std	Y+9, r13	; 0x09
    4cba:	c8 86       	std	Y+8, r12	; 0x08

	LCD_UPDATE_DAY(DAY);
    4cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    4cbe:	0e 94 11 26 	call	0x4c22	; 0x4c22 <LCD_UPDATE_DAY>
	LCD_GOTO_XY(0U, 2U);
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	62 e0       	ldi	r22, 0x02	; 2
    4cc6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_A_STRING("/");
    4cca:	89 e7       	ldi	r24, 0x79	; 121
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
	LCD_UPDATE_MONTH(MONTH);
    4cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    4cd4:	0e 94 22 26 	call	0x4c44	; 0x4c44 <LCD_UPDATE_MONTH>
	LCD_GOTO_XY(0U, 5U);
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	65 e0       	ldi	r22, 0x05	; 5
    4cdc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_A_STRING("/");
    4ce0:	89 e7       	ldi	r24, 0x79	; 121
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
	LCD_UPDATE_YEAR(YEAR);
    4ce8:	88 85       	ldd	r24, Y+8	; 0x08
    4cea:	99 85       	ldd	r25, Y+9	; 0x09
    4cec:	0e 94 33 26 	call	0x4c66	; 0x4c66 <LCD_UPDATE_YEAR>

	// TIME
	LCD_UPDATE_HOUR(HOUR);
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <LCD_UPDATE_HOUR>
	LCD_GOTO_XY(1U, 2U);
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	62 e0       	ldi	r22, 0x02	; 2
    4cfa:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(":");
    4cfe:	8b e7       	ldi	r24, 0x7B	; 123
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
	LCD_UPDATE_MIN(MIN);
    4d06:	8a 81       	ldd	r24, Y+2	; 0x02
    4d08:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <LCD_UPDATE_MIN>
	LCD_GOTO_XY(1U, 5U);
    4d0c:	81 e0       	ldi	r24, 0x01	; 1
    4d0e:	65 e0       	ldi	r22, 0x05	; 5
    4d10:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
	LCD_SEND_A_STRING(":");
    4d14:	8b e7       	ldi	r24, 0x7B	; 123
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
	LCD_UPDATE_SEC(SEC);
    4d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1e:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <LCD_UPDATE_SEC>
	LCD_UPDATE_MODE(Mode);
    4d22:	8c 81       	ldd	r24, Y+4	; 0x04
    4d24:	9d 81       	ldd	r25, Y+5	; 0x05
    4d26:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <LCD_UPDATE_MODE>
}
    4d2a:	29 96       	adiw	r28, 0x09	; 9
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	f8 94       	cli
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	cd bf       	out	0x3d, r28	; 61
    4d36:	cf 91       	pop	r28
    4d38:	df 91       	pop	r29
    4d3a:	0f 91       	pop	r16
    4d3c:	ef 90       	pop	r14
    4d3e:	df 90       	pop	r13
    4d40:	cf 90       	pop	r12
    4d42:	08 95       	ret

00004d44 <Task_vDisplaySensors>:

/* Function that reads the sensors values and display them on the LCD*/
void Task_vDisplaySensors(void* pv) {
    4d44:	df 93       	push	r29
    4d46:	cf 93       	push	r28
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	a5 97       	sbiw	r28, 0x25	; 37
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	9d a3       	std	Y+37, r25	; 0x25
    4d5a:	8c a3       	std	Y+36, r24	; 0x24

	u8 i;
	u16 Loc_u16Digital_Temp;
	u16 Loc_u16Digital_BBM;
	u16 Loc_u16BBM = 0;
    4d5c:	1a 86       	std	Y+10, r1	; 0x0a
    4d5e:	19 86       	std	Y+9, r1	; 0x09
	u16 Loc_u16TimeValue[10] = { 0 };
    4d60:	84 e1       	ldi	r24, 0x14	; 20
    4d62:	fe 01       	movw	r30, r28
    4d64:	70 96       	adiw	r30, 0x10	; 16
    4d66:	df 01       	movw	r26, r30
    4d68:	98 2f       	mov	r25, r24
    4d6a:	1d 92       	st	X+, r1
    4d6c:	9a 95       	dec	r25
    4d6e:	e9 f7       	brne	.-6      	; 0x4d6a <Task_vDisplaySensors+0x26>
	u16 Analog;
	u16 Average = 0;
    4d70:	1e 82       	std	Y+6, r1	; 0x06
    4d72:	1d 82       	std	Y+5, r1	; 0x05
	u16 Loc_u8Temperature;
	u16 Loc_u16Threshold = 550; // Determine which Signal to "count as a beat" and which to ignore.
    4d74:	86 e2       	ldi	r24, 0x26	; 38
    4d76:	92 e0       	ldi	r25, 0x02	; 2
    4d78:	9a 83       	std	Y+2, r25	; 0x02
    4d7a:	89 83       	std	Y+1, r24	; 0x01
	static u8 Ticks = 0;
	static u8 FirstTimeFlag = 0;
	static u8_Time = 0;
	while (1) {
		if (Global_MOOD == 1) {
    4d7c:	80 91 fb 06 	lds	r24, 0x06FB
    4d80:	81 30       	cpi	r24, 0x01	; 1
    4d82:	09 f0       	breq	.+2      	; 0x4d86 <Task_vDisplaySensors+0x42>
    4d84:	a5 c0       	rjmp	.+330    	; 0x4ed0 <Task_vDisplaySensors+0x18c>
			u8_Time++;
    4d86:	80 91 fc 06 	lds	r24, 0x06FC
    4d8a:	90 91 fd 06 	lds	r25, 0x06FD
    4d8e:	01 96       	adiw	r24, 0x01	; 1
    4d90:	90 93 fd 06 	sts	0x06FD, r25
    4d94:	80 93 fc 06 	sts	0x06FC, r24
			LCD_CLEAR();
    4d98:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_CLEAR>
			LCD_GOTO_XY(0, 0);
    4d9c:	80 e0       	ldi	r24, 0x00	; 0
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_A_STRING("H_Rate=");
    4da4:	8d e7       	ldi	r24, 0x7D	; 125
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
			LCD_GOTO_XY(0, 9);
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	69 e0       	ldi	r22, 0x09	; 9
    4db0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_A_STRING("BBM");
    4db4:	85 e8       	ldi	r24, 0x85	; 133
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
			LCD_GOTO_XY(1, 0);
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	60 e0       	ldi	r22, 0x00	; 0
    4dc0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_A_STRING("TEMP=");
    4dc4:	89 e8       	ldi	r24, 0x89	; 137
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>
			LCD_GOTO_XY(1, 9);
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	69 e0       	ldi	r22, 0x09	; 9
    4dd0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_A_STRING("C");
    4dd4:	8f e8       	ldi	r24, 0x8F	; 143
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_SEND_A_STRING>

			Loc_u16Digital_Temp = MADC_u16ADC_StartConversion(CHANNEL_0);
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MADC_u16ADC_StartConversion>
    4de2:	9e 87       	std	Y+14, r25	; 0x0e
    4de4:	8d 87       	std	Y+13, r24	; 0x0d
			Analog = ((u32) (Loc_u16Digital_Temp * 5000UL)) / 1024;
    4de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dea:	cc 01       	movw	r24, r24
    4dec:	a0 e0       	ldi	r26, 0x00	; 0
    4dee:	b0 e0       	ldi	r27, 0x00	; 0
    4df0:	28 e8       	ldi	r18, 0x88	; 136
    4df2:	33 e1       	ldi	r19, 0x13	; 19
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	50 e0       	ldi	r21, 0x00	; 0
    4df8:	bc 01       	movw	r22, r24
    4dfa:	cd 01       	movw	r24, r26
    4dfc:	0e 94 0a 2a 	call	0x5414	; 0x5414 <__mulsi3>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	07 2e       	mov	r0, r23
    4e06:	7a e0       	ldi	r23, 0x0A	; 10
    4e08:	b6 95       	lsr	r27
    4e0a:	a7 95       	ror	r26
    4e0c:	97 95       	ror	r25
    4e0e:	87 95       	ror	r24
    4e10:	7a 95       	dec	r23
    4e12:	d1 f7       	brne	.-12     	; 0x4e08 <Task_vDisplaySensors+0xc4>
    4e14:	70 2d       	mov	r23, r0
    4e16:	98 87       	std	Y+8, r25	; 0x08
    4e18:	8f 83       	std	Y+7, r24	; 0x07
			Loc_u8Temperature = Analog / 10;
    4e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e1c:	98 85       	ldd	r25, Y+8	; 0x08
    4e1e:	2a e0       	ldi	r18, 0x0A	; 10
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	b9 01       	movw	r22, r18
    4e24:	0e 94 29 2a 	call	0x5452	; 0x5452 <__udivmodhi4>
    4e28:	cb 01       	movw	r24, r22
    4e2a:	9c 83       	std	Y+4, r25	; 0x04
    4e2c:	8b 83       	std	Y+3, r24	; 0x03

			LCD_GOTO_XY(1, 5);
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	65 e0       	ldi	r22, 0x05	; 5
    4e32:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_INT(Loc_u8Temperature);
    4e36:	8b 81       	ldd	r24, Y+3	; 0x03
    4e38:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>

			Loc_u16Digital_BBM = MADC_u16ADC_StartConversion(CHANNEL_1);
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MADC_u16ADC_StartConversion>
    4e42:	9c 87       	std	Y+12, r25	; 0x0c
    4e44:	8b 87       	std	Y+11, r24	; 0x0b

			if (Loc_u16Digital_BBM > Loc_u16Threshold) {
    4e46:	2b 85       	ldd	r18, Y+11	; 0x0b
    4e48:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e4e:	82 17       	cp	r24, r18
    4e50:	93 07       	cpc	r25, r19
    4e52:	b8 f5       	brcc	.+110    	; 0x4ec2 <Task_vDisplaySensors+0x17e>
				if (FirstTimeFlag == 0) {
    4e54:	80 91 fe 06 	lds	r24, 0x06FE
    4e58:	88 23       	and	r24, r24
    4e5a:	21 f4       	brne	.+8      	; 0x4e64 <Task_vDisplaySensors+0x120>
					//TIMER0_VidSetPreload(0);
					FirstTimeFlag = 1;
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	80 93 fe 06 	sts	0x06FE, r24
    4e62:	05 c0       	rjmp	.+10     	; 0x4e6e <Task_vDisplaySensors+0x12a>
				} else {
					//Loc_u16TimeValue[Ticks] = TCNT0;
					//TIMER0_VidSetPreload(0);
					Ticks++;
    4e64:	80 91 ff 06 	lds	r24, 0x06FF
    4e68:	8f 5f       	subi	r24, 0xFF	; 255
    4e6a:	80 93 ff 06 	sts	0x06FF, r24
				}
				if (Ticks == 10) {
    4e6e:	80 91 ff 06 	lds	r24, 0x06FF
    4e72:	8a 30       	cpi	r24, 0x0A	; 10
    4e74:	31 f5       	brne	.+76     	; 0x4ec2 <Task_vDisplaySensors+0x17e>
					for (i = 0; i < 10; i++) {
    4e76:	1f 86       	std	Y+15, r1	; 0x0f
    4e78:	17 c0       	rjmp	.+46     	; 0x4ea8 <Task_vDisplaySensors+0x164>
						Average += Loc_u16TimeValue[i];
    4e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e7c:	88 2f       	mov	r24, r24
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	9c 01       	movw	r18, r24
    4e82:	22 0f       	add	r18, r18
    4e84:	33 1f       	adc	r19, r19
    4e86:	ce 01       	movw	r24, r28
    4e88:	01 96       	adiw	r24, 0x01	; 1
    4e8a:	82 0f       	add	r24, r18
    4e8c:	93 1f       	adc	r25, r19
    4e8e:	fc 01       	movw	r30, r24
    4e90:	3f 96       	adiw	r30, 0x0f	; 15
    4e92:	20 81       	ld	r18, Z
    4e94:	31 81       	ldd	r19, Z+1	; 0x01
    4e96:	8d 81       	ldd	r24, Y+5	; 0x05
    4e98:	9e 81       	ldd	r25, Y+6	; 0x06
    4e9a:	82 0f       	add	r24, r18
    4e9c:	93 1f       	adc	r25, r19
    4e9e:	9e 83       	std	Y+6, r25	; 0x06
    4ea0:	8d 83       	std	Y+5, r24	; 0x05
					//Loc_u16TimeValue[Ticks] = TCNT0;
					//TIMER0_VidSetPreload(0);
					Ticks++;
				}
				if (Ticks == 10) {
					for (i = 0; i < 10; i++) {
    4ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ea4:	8f 5f       	subi	r24, 0xFF	; 255
    4ea6:	8f 87       	std	Y+15, r24	; 0x0f
    4ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eaa:	8a 30       	cpi	r24, 0x0A	; 10
    4eac:	30 f3       	brcs	.-52     	; 0x4e7a <Task_vDisplaySensors+0x136>
						Average += Loc_u16TimeValue[i];
					}
					Loc_u16BBM = Average / 10;
    4eae:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb2:	2a e0       	ldi	r18, 0x0A	; 10
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	b9 01       	movw	r22, r18
    4eb8:	0e 94 29 2a 	call	0x5452	; 0x5452 <__udivmodhi4>
    4ebc:	cb 01       	movw	r24, r22
    4ebe:	9a 87       	std	Y+10, r25	; 0x0a
    4ec0:	89 87       	std	Y+9, r24	; 0x09
				}
			}

			LCD_GOTO_XY(0, 8);
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	68 e0       	ldi	r22, 0x08	; 8
    4ec6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LCD_GOTO_XY>
			LCD_SEND_INT(Loc_u16BBM);
    4eca:	89 85       	ldd	r24, Y+9	; 0x09
    4ecc:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_SEND_INT>

		}
		if (u8_Time == 10) {
    4ed0:	80 91 fc 06 	lds	r24, 0x06FC
    4ed4:	90 91 fd 06 	lds	r25, 0x06FD
    4ed8:	8a 30       	cpi	r24, 0x0A	; 10
    4eda:	91 05       	cpc	r25, r1
    4edc:	69 f4       	brne	.+26     	; 0x4ef8 <Task_vDisplaySensors+0x1b4>
			(P->SEC)++;
    4ede:	e0 91 9f 01 	lds	r30, 0x019F
    4ee2:	f0 91 a0 01 	lds	r31, 0x01A0
    4ee6:	80 81       	ld	r24, Z
    4ee8:	8f 5f       	subi	r24, 0xFF	; 255
    4eea:	80 83       	st	Z, r24
			clock_EDITp();
    4eec:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
			u8_Time = 0;
    4ef0:	10 92 fd 06 	sts	0x06FD, r1
    4ef4:	10 92 fc 06 	sts	0x06FC, r1
		}
		vTaskDelay(100);
    4ef8:	84 e6       	ldi	r24, 0x64	; 100
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <vTaskDelay>
    4f00:	3d cf       	rjmp	.-390    	; 0x4d7c <Task_vDisplaySensors+0x38>

00004f02 <clock_EDITp>:
	}
}

/* function to handle the increasing cases */
void clock_EDITp(void) {
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	cd b7       	in	r28, 0x3d	; 61
    4f08:	de b7       	in	r29, 0x3e	; 62

	if ((P->SEC) == 60U) {
    4f0a:	e0 91 9f 01 	lds	r30, 0x019F
    4f0e:	f0 91 a0 01 	lds	r31, 0x01A0
    4f12:	80 81       	ld	r24, Z
    4f14:	8c 33       	cpi	r24, 0x3C	; 60
    4f16:	69 f4       	brne	.+26     	; 0x4f32 <clock_EDITp+0x30>
		(P->SEC) = 1U;
    4f18:	e0 91 9f 01 	lds	r30, 0x019F
    4f1c:	f0 91 a0 01 	lds	r31, 0x01A0
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	80 83       	st	Z, r24
		(P->MIN)++;
    4f24:	e0 91 9f 01 	lds	r30, 0x019F
    4f28:	f0 91 a0 01 	lds	r31, 0x01A0
    4f2c:	81 81       	ldd	r24, Z+1	; 0x01
    4f2e:	8f 5f       	subi	r24, 0xFF	; 255
    4f30:	81 83       	std	Z+1, r24	; 0x01
	} else {
	}

	if (P->MIN == 60U) {
    4f32:	e0 91 9f 01 	lds	r30, 0x019F
    4f36:	f0 91 a0 01 	lds	r31, 0x01A0
    4f3a:	81 81       	ldd	r24, Z+1	; 0x01
    4f3c:	8c 33       	cpi	r24, 0x3C	; 60
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <clock_EDITp+0x40>
    4f40:	50 c0       	rjmp	.+160    	; 0x4fe2 <clock_EDITp+0xe0>
		(P->MIN) = 1U;
    4f42:	e0 91 9f 01 	lds	r30, 0x019F
    4f46:	f0 91 a0 01 	lds	r31, 0x01A0
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	81 83       	std	Z+1, r24	; 0x01
		(P->HOUR)++;
    4f4e:	e0 91 9f 01 	lds	r30, 0x019F
    4f52:	f0 91 a0 01 	lds	r31, 0x01A0
    4f56:	82 81       	ldd	r24, Z+2	; 0x02
    4f58:	8f 5f       	subi	r24, 0xFF	; 255
    4f5a:	82 83       	std	Z+2, r24	; 0x02
		if (P->HOUR == 12U && P->Mode[0] == 'P' && P->Mode[1] == 'M') {
    4f5c:	e0 91 9f 01 	lds	r30, 0x019F
    4f60:	f0 91 a0 01 	lds	r31, 0x01A0
    4f64:	82 81       	ldd	r24, Z+2	; 0x02
    4f66:	8c 30       	cpi	r24, 0x0C	; 12
    4f68:	d9 f4       	brne	.+54     	; 0x4fa0 <clock_EDITp+0x9e>
    4f6a:	e0 91 9f 01 	lds	r30, 0x019F
    4f6e:	f0 91 a0 01 	lds	r31, 0x01A0
    4f72:	83 81       	ldd	r24, Z+3	; 0x03
    4f74:	80 35       	cpi	r24, 0x50	; 80
    4f76:	a1 f4       	brne	.+40     	; 0x4fa0 <clock_EDITp+0x9e>
    4f78:	e0 91 9f 01 	lds	r30, 0x019F
    4f7c:	f0 91 a0 01 	lds	r31, 0x01A0
    4f80:	84 81       	ldd	r24, Z+4	; 0x04
    4f82:	8d 34       	cpi	r24, 0x4D	; 77
    4f84:	69 f4       	brne	.+26     	; 0x4fa0 <clock_EDITp+0x9e>
			P->Mode[0] = 'A';
    4f86:	e0 91 9f 01 	lds	r30, 0x019F
    4f8a:	f0 91 a0 01 	lds	r31, 0x01A0
    4f8e:	81 e4       	ldi	r24, 0x41	; 65
    4f90:	83 83       	std	Z+3, r24	; 0x03
			P->Mode[1] = 'M';
    4f92:	e0 91 9f 01 	lds	r30, 0x019F
    4f96:	f0 91 a0 01 	lds	r31, 0x01A0
    4f9a:	8d e4       	ldi	r24, 0x4D	; 77
    4f9c:	84 83       	std	Z+4, r24	; 0x04
    4f9e:	21 c0       	rjmp	.+66     	; 0x4fe2 <clock_EDITp+0xe0>
		} else if (P->HOUR == 12U && P->Mode[0] == 'A' && P->Mode[1] == 'M') {
    4fa0:	e0 91 9f 01 	lds	r30, 0x019F
    4fa4:	f0 91 a0 01 	lds	r31, 0x01A0
    4fa8:	82 81       	ldd	r24, Z+2	; 0x02
    4faa:	8c 30       	cpi	r24, 0x0C	; 12
    4fac:	d1 f4       	brne	.+52     	; 0x4fe2 <clock_EDITp+0xe0>
    4fae:	e0 91 9f 01 	lds	r30, 0x019F
    4fb2:	f0 91 a0 01 	lds	r31, 0x01A0
    4fb6:	83 81       	ldd	r24, Z+3	; 0x03
    4fb8:	81 34       	cpi	r24, 0x41	; 65
    4fba:	99 f4       	brne	.+38     	; 0x4fe2 <clock_EDITp+0xe0>
    4fbc:	e0 91 9f 01 	lds	r30, 0x019F
    4fc0:	f0 91 a0 01 	lds	r31, 0x01A0
    4fc4:	84 81       	ldd	r24, Z+4	; 0x04
    4fc6:	8d 34       	cpi	r24, 0x4D	; 77
    4fc8:	61 f4       	brne	.+24     	; 0x4fe2 <clock_EDITp+0xe0>
			P->Mode[0] = 'P';
    4fca:	e0 91 9f 01 	lds	r30, 0x019F
    4fce:	f0 91 a0 01 	lds	r31, 0x01A0
    4fd2:	80 e5       	ldi	r24, 0x50	; 80
    4fd4:	83 83       	std	Z+3, r24	; 0x03
			P->Mode[1] = 'M';
    4fd6:	e0 91 9f 01 	lds	r30, 0x019F
    4fda:	f0 91 a0 01 	lds	r31, 0x01A0
    4fde:	8d e4       	ldi	r24, 0x4D	; 77
    4fe0:	84 83       	std	Z+4, r24	; 0x04
		} else {
		}
	} else {
	}

	if (P->HOUR == 13U) {
    4fe2:	e0 91 9f 01 	lds	r30, 0x019F
    4fe6:	f0 91 a0 01 	lds	r31, 0x01A0
    4fea:	82 81       	ldd	r24, Z+2	; 0x02
    4fec:	8d 30       	cpi	r24, 0x0D	; 13
    4fee:	31 f4       	brne	.+12     	; 0x4ffc <clock_EDITp+0xfa>
		P->HOUR = 1U;
    4ff0:	e0 91 9f 01 	lds	r30, 0x019F
    4ff4:	f0 91 a0 01 	lds	r31, 0x01A0
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	82 83       	std	Z+2, r24	; 0x02
	} else {
	}

	if (P->HOUR == 12U && P->Mode[0] == 'A' && P->Mode[1] == 'M' && P->MIN == 1
    4ffc:	e0 91 9f 01 	lds	r30, 0x019F
    5000:	f0 91 a0 01 	lds	r31, 0x01A0
    5004:	82 81       	ldd	r24, Z+2	; 0x02
    5006:	8c 30       	cpi	r24, 0x0C	; 12
    5008:	19 f5       	brne	.+70     	; 0x5050 <clock_EDITp+0x14e>
    500a:	e0 91 9f 01 	lds	r30, 0x019F
    500e:	f0 91 a0 01 	lds	r31, 0x01A0
    5012:	83 81       	ldd	r24, Z+3	; 0x03
    5014:	81 34       	cpi	r24, 0x41	; 65
    5016:	e1 f4       	brne	.+56     	; 0x5050 <clock_EDITp+0x14e>
    5018:	e0 91 9f 01 	lds	r30, 0x019F
    501c:	f0 91 a0 01 	lds	r31, 0x01A0
    5020:	84 81       	ldd	r24, Z+4	; 0x04
    5022:	8d 34       	cpi	r24, 0x4D	; 77
    5024:	a9 f4       	brne	.+42     	; 0x5050 <clock_EDITp+0x14e>
    5026:	e0 91 9f 01 	lds	r30, 0x019F
    502a:	f0 91 a0 01 	lds	r31, 0x01A0
    502e:	81 81       	ldd	r24, Z+1	; 0x01
    5030:	81 30       	cpi	r24, 0x01	; 1
    5032:	71 f4       	brne	.+28     	; 0x5050 <clock_EDITp+0x14e>
    5034:	e0 91 9f 01 	lds	r30, 0x019F
    5038:	f0 91 a0 01 	lds	r31, 0x01A0
    503c:	80 81       	ld	r24, Z
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	39 f4       	brne	.+14     	; 0x5050 <clock_EDITp+0x14e>
			&& P->SEC == 1) {

		P->DAY++;
    5042:	e0 91 9f 01 	lds	r30, 0x019F
    5046:	f0 91 a0 01 	lds	r31, 0x01A0
    504a:	86 81       	ldd	r24, Z+6	; 0x06
    504c:	8f 5f       	subi	r24, 0xFF	; 255
    504e:	86 83       	std	Z+6, r24	; 0x06

	} else {
	}

	if (P->DAY == 31) {
    5050:	e0 91 9f 01 	lds	r30, 0x019F
    5054:	f0 91 a0 01 	lds	r31, 0x01A0
    5058:	86 81       	ldd	r24, Z+6	; 0x06
    505a:	8f 31       	cpi	r24, 0x1F	; 31
    505c:	39 f4       	brne	.+14     	; 0x506c <clock_EDITp+0x16a>
		P->MONTH++;
    505e:	e0 91 9f 01 	lds	r30, 0x019F
    5062:	f0 91 a0 01 	lds	r31, 0x01A0
    5066:	87 81       	ldd	r24, Z+7	; 0x07
    5068:	8f 5f       	subi	r24, 0xFF	; 255
    506a:	87 83       	std	Z+7, r24	; 0x07
	} else {
	}

	if (P->MONTH == 13) {
    506c:	e0 91 9f 01 	lds	r30, 0x019F
    5070:	f0 91 a0 01 	lds	r31, 0x01A0
    5074:	87 81       	ldd	r24, Z+7	; 0x07
    5076:	8d 30       	cpi	r24, 0x0D	; 13
    5078:	79 f4       	brne	.+30     	; 0x5098 <clock_EDITp+0x196>
		P->YEAR++;
    507a:	e0 91 9f 01 	lds	r30, 0x019F
    507e:	f0 91 a0 01 	lds	r31, 0x01A0
    5082:	80 85       	ldd	r24, Z+8	; 0x08
    5084:	91 85       	ldd	r25, Z+9	; 0x09
    5086:	a2 85       	ldd	r26, Z+10	; 0x0a
    5088:	b3 85       	ldd	r27, Z+11	; 0x0b
    508a:	01 96       	adiw	r24, 0x01	; 1
    508c:	a1 1d       	adc	r26, r1
    508e:	b1 1d       	adc	r27, r1
    5090:	80 87       	std	Z+8, r24	; 0x08
    5092:	91 87       	std	Z+9, r25	; 0x09
    5094:	a2 87       	std	Z+10, r26	; 0x0a
    5096:	b3 87       	std	Z+11, r27	; 0x0b
	}

}
    5098:	cf 91       	pop	r28
    509a:	df 91       	pop	r29
    509c:	08 95       	ret

0000509e <Task_vDisplaytime>:

/*DISPLAY TASK */
void Task_vDisplaytime(void* pv) {
    509e:	cf 92       	push	r12
    50a0:	df 92       	push	r13
    50a2:	ef 92       	push	r14
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	df 93       	push	r29
    50aa:	cf 93       	push	r28
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <Task_vDisplaytime+0x10>
    50ae:	cd b7       	in	r28, 0x3d	; 61
    50b0:	de b7       	in	r29, 0x3e	; 62
    50b2:	9a 83       	std	Y+2, r25	; 0x02
    50b4:	89 83       	std	Y+1, r24	; 0x01

	while (1) {
		if (Global_MOOD == 0) {
    50b6:	80 91 fb 06 	lds	r24, 0x06FB
    50ba:	88 23       	and	r24, r24
    50bc:	09 f0       	breq	.+2      	; 0x50c0 <Task_vDisplaytime+0x22>
    50be:	c0 c0       	rjmp	.+384    	; 0x5240 <Task_vDisplaytime+0x1a2>
			if (EDIT_flag == 0U) {
    50c0:	80 91 fa 06 	lds	r24, 0x06FA
    50c4:	88 23       	and	r24, r24
    50c6:	d1 f5       	brne	.+116    	; 0x513c <Task_vDisplaytime+0x9e>

				(P->SEC)++;
    50c8:	e0 91 9f 01 	lds	r30, 0x019F
    50cc:	f0 91 a0 01 	lds	r31, 0x01A0
    50d0:	80 81       	ld	r24, Z
    50d2:	8f 5f       	subi	r24, 0xFF	; 255
    50d4:	80 83       	st	Z, r24
				clock_EDITp();
    50d6:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
				LCD_UPATE_CLOCK(P->HOUR, P->MIN, P->SEC, P->Mode, P->DAY,
    50da:	e0 91 9f 01 	lds	r30, 0x019F
    50de:	f0 91 a0 01 	lds	r31, 0x01A0
    50e2:	42 81       	ldd	r20, Z+2	; 0x02
    50e4:	e0 91 9f 01 	lds	r30, 0x019F
    50e8:	f0 91 a0 01 	lds	r31, 0x01A0
    50ec:	61 81       	ldd	r22, Z+1	; 0x01
    50ee:	e0 91 9f 01 	lds	r30, 0x019F
    50f2:	f0 91 a0 01 	lds	r31, 0x01A0
    50f6:	10 81       	ld	r17, Z
    50f8:	80 91 9f 01 	lds	r24, 0x019F
    50fc:	90 91 a0 01 	lds	r25, 0x01A0
    5100:	9c 01       	movw	r18, r24
    5102:	2d 5f       	subi	r18, 0xFD	; 253
    5104:	3f 4f       	sbci	r19, 0xFF	; 255
    5106:	e0 91 9f 01 	lds	r30, 0x019F
    510a:	f0 91 a0 01 	lds	r31, 0x01A0
    510e:	56 81       	ldd	r21, Z+6	; 0x06
    5110:	e0 91 9f 01 	lds	r30, 0x019F
    5114:	f0 91 a0 01 	lds	r31, 0x01A0
    5118:	77 81       	ldd	r23, Z+7	; 0x07
    511a:	e0 91 9f 01 	lds	r30, 0x019F
    511e:	f0 91 a0 01 	lds	r31, 0x01A0
    5122:	80 85       	ldd	r24, Z+8	; 0x08
    5124:	91 85       	ldd	r25, Z+9	; 0x09
    5126:	a2 85       	ldd	r26, Z+10	; 0x0a
    5128:	b3 85       	ldd	r27, Z+11	; 0x0b
    512a:	fc 01       	movw	r30, r24
    512c:	84 2f       	mov	r24, r20
    512e:	41 2f       	mov	r20, r17
    5130:	05 2f       	mov	r16, r21
    5132:	e7 2e       	mov	r14, r23
    5134:	6f 01       	movw	r12, r30
    5136:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <LCD_UPATE_CLOCK>
    513a:	82 c0       	rjmp	.+260    	; 0x5240 <Task_vDisplaytime+0x1a2>
						P->MONTH, P->YEAR);

			}
			// Edit hours
			else if (EDIT_flag >= 1U) {
    513c:	80 91 fa 06 	lds	r24, 0x06FA
    5140:	88 23       	and	r24, r24
    5142:	09 f4       	brne	.+2      	; 0x5146 <Task_vDisplaytime+0xa8>
    5144:	7d c0       	rjmp	.+250    	; 0x5240 <Task_vDisplaytime+0x1a2>

				if (EDIT_flag == 1U) {
    5146:	80 91 fa 06 	lds	r24, 0x06FA
    514a:	81 30       	cpi	r24, 0x01	; 1
    514c:	49 f4       	brne	.+18     	; 0x5160 <Task_vDisplaytime+0xc2>
					LCD_ENABLE_CURSOR();
    514e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(1U, 1U);
    5152:	81 e0       	ldi	r24, 0x01	; 1
    5154:	61 e0       	ldi	r22, 0x01	; 1
    5156:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>
					LCD_DISABLE_CURSOR();
    515a:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>
    515e:	40 c0       	rjmp	.+128    	; 0x51e0 <Task_vDisplaytime+0x142>
				}
				//Edit MIN
				else if (EDIT_flag == 2U) {
    5160:	80 91 fa 06 	lds	r24, 0x06FA
    5164:	82 30       	cpi	r24, 0x02	; 2
    5166:	49 f4       	brne	.+18     	; 0x517a <Task_vDisplaytime+0xdc>

					LCD_ENABLE_CURSOR();
    5168:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(4U, 1U);
    516c:	84 e0       	ldi	r24, 0x04	; 4
    516e:	61 e0       	ldi	r22, 0x01	; 1
    5170:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>
					LCD_DISABLE_CURSOR();
    5174:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>
    5178:	33 c0       	rjmp	.+102    	; 0x51e0 <Task_vDisplaytime+0x142>

				}

				//Edit sec
				else if (EDIT_flag == 3U) {
    517a:	80 91 fa 06 	lds	r24, 0x06FA
    517e:	83 30       	cpi	r24, 0x03	; 3
    5180:	49 f4       	brne	.+18     	; 0x5194 <Task_vDisplaytime+0xf6>

					LCD_ENABLE_CURSOR();
    5182:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(7U, 1U);
    5186:	87 e0       	ldi	r24, 0x07	; 7
    5188:	61 e0       	ldi	r22, 0x01	; 1
    518a:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>

					LCD_DISABLE_CURSOR();
    518e:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>
    5192:	26 c0       	rjmp	.+76     	; 0x51e0 <Task_vDisplaytime+0x142>

				}

				else if (EDIT_flag == 4U) {
    5194:	80 91 fa 06 	lds	r24, 0x06FA
    5198:	84 30       	cpi	r24, 0x04	; 4
    519a:	49 f4       	brne	.+18     	; 0x51ae <Task_vDisplaytime+0x110>

					LCD_ENABLE_CURSOR();
    519c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(1U, 0U);
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	60 e0       	ldi	r22, 0x00	; 0
    51a4:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>
					LCD_DISABLE_CURSOR();
    51a8:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>
    51ac:	19 c0       	rjmp	.+50     	; 0x51e0 <Task_vDisplaytime+0x142>
				}

				else if (EDIT_flag == 5U) {
    51ae:	80 91 fa 06 	lds	r24, 0x06FA
    51b2:	85 30       	cpi	r24, 0x05	; 5
    51b4:	49 f4       	brne	.+18     	; 0x51c8 <Task_vDisplaytime+0x12a>

					LCD_ENABLE_CURSOR();
    51b6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(4U, 0U);
    51ba:	84 e0       	ldi	r24, 0x04	; 4
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>
					LCD_DISABLE_CURSOR();
    51c2:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>
    51c6:	0c c0       	rjmp	.+24     	; 0x51e0 <Task_vDisplaytime+0x142>

				} else if (EDIT_flag == 6U) {
    51c8:	80 91 fa 06 	lds	r24, 0x06FA
    51cc:	86 30       	cpi	r24, 0x06	; 6
    51ce:	41 f4       	brne	.+16     	; 0x51e0 <Task_vDisplaytime+0x142>

					LCD_ENABLE_CURSOR();
    51d0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_ENABLE_CURSOR>
					LCD_SET_CURSOR(9U, 0U);
    51d4:	89 e0       	ldi	r24, 0x09	; 9
    51d6:	60 e0       	ldi	r22, 0x00	; 0
    51d8:	0e 94 12 12 	call	0x2424	; 0x2424 <LCD_SET_CURSOR>
					LCD_DISABLE_CURSOR();
    51dc:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_DISABLE_CURSOR>

				}

				else {
				}
				LCD_UPATE_CLOCK(P->HOUR, P->MIN, P->SEC, P->Mode, P->DAY,
    51e0:	e0 91 9f 01 	lds	r30, 0x019F
    51e4:	f0 91 a0 01 	lds	r31, 0x01A0
    51e8:	42 81       	ldd	r20, Z+2	; 0x02
    51ea:	e0 91 9f 01 	lds	r30, 0x019F
    51ee:	f0 91 a0 01 	lds	r31, 0x01A0
    51f2:	61 81       	ldd	r22, Z+1	; 0x01
    51f4:	e0 91 9f 01 	lds	r30, 0x019F
    51f8:	f0 91 a0 01 	lds	r31, 0x01A0
    51fc:	10 81       	ld	r17, Z
    51fe:	80 91 9f 01 	lds	r24, 0x019F
    5202:	90 91 a0 01 	lds	r25, 0x01A0
    5206:	9c 01       	movw	r18, r24
    5208:	2d 5f       	subi	r18, 0xFD	; 253
    520a:	3f 4f       	sbci	r19, 0xFF	; 255
    520c:	e0 91 9f 01 	lds	r30, 0x019F
    5210:	f0 91 a0 01 	lds	r31, 0x01A0
    5214:	56 81       	ldd	r21, Z+6	; 0x06
    5216:	e0 91 9f 01 	lds	r30, 0x019F
    521a:	f0 91 a0 01 	lds	r31, 0x01A0
    521e:	77 81       	ldd	r23, Z+7	; 0x07
    5220:	e0 91 9f 01 	lds	r30, 0x019F
    5224:	f0 91 a0 01 	lds	r31, 0x01A0
    5228:	80 85       	ldd	r24, Z+8	; 0x08
    522a:	91 85       	ldd	r25, Z+9	; 0x09
    522c:	a2 85       	ldd	r26, Z+10	; 0x0a
    522e:	b3 85       	ldd	r27, Z+11	; 0x0b
    5230:	fc 01       	movw	r30, r24
    5232:	84 2f       	mov	r24, r20
    5234:	41 2f       	mov	r20, r17
    5236:	05 2f       	mov	r16, r21
    5238:	e7 2e       	mov	r14, r23
    523a:	6f 01       	movw	r12, r30
    523c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <LCD_UPATE_CLOCK>
						P->MONTH, P->YEAR);
			} else {
			}
		}
		vTaskDelay(1000);
    5240:	88 ee       	ldi	r24, 0xE8	; 232
    5242:	93 e0       	ldi	r25, 0x03	; 3
    5244:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <vTaskDelay>
    5248:	36 cf       	rjmp	.-404    	; 0x50b6 <Task_vDisplaytime+0x18>

0000524a <SELECT>:
	}
}

/*Function to pass to callback of EXTI2 to select different mode */
void SELECT(void) {
    524a:	df 93       	push	r29
    524c:	cf 93       	push	r28
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
	if (Global_MOOD == 0) {
    5252:	80 91 fb 06 	lds	r24, 0x06FB
    5256:	88 23       	and	r24, r24
    5258:	59 f4       	brne	.+22     	; 0x5270 <SELECT+0x26>
		EDIT_flag++;
    525a:	80 91 fa 06 	lds	r24, 0x06FA
    525e:	8f 5f       	subi	r24, 0xFF	; 255
    5260:	80 93 fa 06 	sts	0x06FA, r24
		if (EDIT_flag == 7U) {
    5264:	80 91 fa 06 	lds	r24, 0x06FA
    5268:	87 30       	cpi	r24, 0x07	; 7
    526a:	11 f4       	brne	.+4      	; 0x5270 <SELECT+0x26>
			EDIT_flag = 0U;
    526c:	10 92 fa 06 	sts	0x06FA, r1
		}
	}
}
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <CLK_SENSOR_SELECT>:

void CLK_SENSOR_SELECT(void) {
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	cd b7       	in	r28, 0x3d	; 61
    527c:	de b7       	in	r29, 0x3e	; 62
	if (Global_MOOD == 0) {
    527e:	80 91 fb 06 	lds	r24, 0x06FB
    5282:	88 23       	and	r24, r24
    5284:	21 f4       	brne	.+8      	; 0x528e <CLK_SENSOR_SELECT+0x18>
		Global_MOOD = 1;
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	80 93 fb 06 	sts	0x06FB, r24
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <CLK_SENSOR_SELECT+0x1c>
	} else {
		Global_MOOD = 0;
    528e:	10 92 fb 06 	sts	0x06FB, r1
	}
}
    5292:	cf 91       	pop	r28
    5294:	df 91       	pop	r29
    5296:	08 95       	ret

00005298 <ClockEditMode>:

/* Function to pass to callback of EXTI0 to update time debending on Edit_flag*/
void ClockEditMode(void) {
    5298:	df 93       	push	r29
    529a:	cf 93       	push	r28
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
	if (Global_MOOD == 0) {
    52a0:	80 91 fb 06 	lds	r24, 0x06FB
    52a4:	88 23       	and	r24, r24
    52a6:	09 f0       	breq	.+2      	; 0x52aa <ClockEditMode+0x12>
    52a8:	b2 c0       	rjmp	.+356    	; 0x540e <ClockEditMode+0x176>
		if (EDIT_flag == 1U) {
    52aa:	80 91 fa 06 	lds	r24, 0x06FA
    52ae:	81 30       	cpi	r24, 0x01	; 1
    52b0:	09 f0       	breq	.+2      	; 0x52b4 <ClockEditMode+0x1c>
    52b2:	60 c0       	rjmp	.+192    	; 0x5374 <ClockEditMode+0xdc>
			P->HOUR++;
    52b4:	e0 91 9f 01 	lds	r30, 0x019F
    52b8:	f0 91 a0 01 	lds	r31, 0x01A0
    52bc:	82 81       	ldd	r24, Z+2	; 0x02
    52be:	8f 5f       	subi	r24, 0xFF	; 255
    52c0:	82 83       	std	Z+2, r24	; 0x02
			if (P->HOUR == 12U && P->Mode[0] == 'P' && P->Mode[1] == 'M') {
    52c2:	e0 91 9f 01 	lds	r30, 0x019F
    52c6:	f0 91 a0 01 	lds	r31, 0x01A0
    52ca:	82 81       	ldd	r24, Z+2	; 0x02
    52cc:	8c 30       	cpi	r24, 0x0C	; 12
    52ce:	11 f5       	brne	.+68     	; 0x5314 <ClockEditMode+0x7c>
    52d0:	e0 91 9f 01 	lds	r30, 0x019F
    52d4:	f0 91 a0 01 	lds	r31, 0x01A0
    52d8:	83 81       	ldd	r24, Z+3	; 0x03
    52da:	80 35       	cpi	r24, 0x50	; 80
    52dc:	d9 f4       	brne	.+54     	; 0x5314 <ClockEditMode+0x7c>
    52de:	e0 91 9f 01 	lds	r30, 0x019F
    52e2:	f0 91 a0 01 	lds	r31, 0x01A0
    52e6:	84 81       	ldd	r24, Z+4	; 0x04
    52e8:	8d 34       	cpi	r24, 0x4D	; 77
    52ea:	a1 f4       	brne	.+40     	; 0x5314 <ClockEditMode+0x7c>
				P->Mode[0] = 'A';
    52ec:	e0 91 9f 01 	lds	r30, 0x019F
    52f0:	f0 91 a0 01 	lds	r31, 0x01A0
    52f4:	81 e4       	ldi	r24, 0x41	; 65
    52f6:	83 83       	std	Z+3, r24	; 0x03
				P->Mode[1] = 'M';
    52f8:	e0 91 9f 01 	lds	r30, 0x019F
    52fc:	f0 91 a0 01 	lds	r31, 0x01A0
    5300:	8d e4       	ldi	r24, 0x4D	; 77
    5302:	84 83       	std	Z+4, r24	; 0x04
				P->DAY++;
    5304:	e0 91 9f 01 	lds	r30, 0x019F
    5308:	f0 91 a0 01 	lds	r31, 0x01A0
    530c:	86 81       	ldd	r24, Z+6	; 0x06
    530e:	8f 5f       	subi	r24, 0xFF	; 255
    5310:	86 83       	std	Z+6, r24	; 0x06
    5312:	21 c0       	rjmp	.+66     	; 0x5356 <ClockEditMode+0xbe>
			} else if (P->HOUR == 12U && P->Mode[0] == 'A'
    5314:	e0 91 9f 01 	lds	r30, 0x019F
    5318:	f0 91 a0 01 	lds	r31, 0x01A0
    531c:	82 81       	ldd	r24, Z+2	; 0x02
    531e:	8c 30       	cpi	r24, 0x0C	; 12
    5320:	d1 f4       	brne	.+52     	; 0x5356 <ClockEditMode+0xbe>
    5322:	e0 91 9f 01 	lds	r30, 0x019F
    5326:	f0 91 a0 01 	lds	r31, 0x01A0
    532a:	83 81       	ldd	r24, Z+3	; 0x03
    532c:	81 34       	cpi	r24, 0x41	; 65
    532e:	99 f4       	brne	.+38     	; 0x5356 <ClockEditMode+0xbe>
    5330:	e0 91 9f 01 	lds	r30, 0x019F
    5334:	f0 91 a0 01 	lds	r31, 0x01A0
    5338:	84 81       	ldd	r24, Z+4	; 0x04
    533a:	8d 34       	cpi	r24, 0x4D	; 77
    533c:	61 f4       	brne	.+24     	; 0x5356 <ClockEditMode+0xbe>
					&& P->Mode[1] == 'M') {
				P->Mode[0] = 'P';
    533e:	e0 91 9f 01 	lds	r30, 0x019F
    5342:	f0 91 a0 01 	lds	r31, 0x01A0
    5346:	80 e5       	ldi	r24, 0x50	; 80
    5348:	83 83       	std	Z+3, r24	; 0x03
				P->Mode[1] = 'M';
    534a:	e0 91 9f 01 	lds	r30, 0x019F
    534e:	f0 91 a0 01 	lds	r31, 0x01A0
    5352:	8d e4       	ldi	r24, 0x4D	; 77
    5354:	84 83       	std	Z+4, r24	; 0x04
			} else {
			}

			if (P->HOUR == 13)
    5356:	e0 91 9f 01 	lds	r30, 0x019F
    535a:	f0 91 a0 01 	lds	r31, 0x01A0
    535e:	82 81       	ldd	r24, Z+2	; 0x02
    5360:	8d 30       	cpi	r24, 0x0D	; 13
    5362:	09 f0       	breq	.+2      	; 0x5366 <ClockEditMode+0xce>
    5364:	54 c0       	rjmp	.+168    	; 0x540e <ClockEditMode+0x176>
				P->HOUR = 1;
    5366:	e0 91 9f 01 	lds	r30, 0x019F
    536a:	f0 91 a0 01 	lds	r31, 0x01A0
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	82 83       	std	Z+2, r24	; 0x02
    5372:	4d c0       	rjmp	.+154    	; 0x540e <ClockEditMode+0x176>
			else {
			}

		} else if (EDIT_flag == 2U) {
    5374:	80 91 fa 06 	lds	r24, 0x06FA
    5378:	82 30       	cpi	r24, 0x02	; 2
    537a:	51 f4       	brne	.+20     	; 0x5390 <ClockEditMode+0xf8>
			P->MIN++;
    537c:	e0 91 9f 01 	lds	r30, 0x019F
    5380:	f0 91 a0 01 	lds	r31, 0x01A0
    5384:	81 81       	ldd	r24, Z+1	; 0x01
    5386:	8f 5f       	subi	r24, 0xFF	; 255
    5388:	81 83       	std	Z+1, r24	; 0x01
			clock_EDITp();
    538a:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
    538e:	3f c0       	rjmp	.+126    	; 0x540e <ClockEditMode+0x176>
		} else if (EDIT_flag == 3U) {
    5390:	80 91 fa 06 	lds	r24, 0x06FA
    5394:	83 30       	cpi	r24, 0x03	; 3
    5396:	51 f4       	brne	.+20     	; 0x53ac <ClockEditMode+0x114>
			P->SEC++;
    5398:	e0 91 9f 01 	lds	r30, 0x019F
    539c:	f0 91 a0 01 	lds	r31, 0x01A0
    53a0:	80 81       	ld	r24, Z
    53a2:	8f 5f       	subi	r24, 0xFF	; 255
    53a4:	80 83       	st	Z, r24
			clock_EDITp();
    53a6:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
    53aa:	31 c0       	rjmp	.+98     	; 0x540e <ClockEditMode+0x176>
		} else if (EDIT_flag == 4U) {
    53ac:	80 91 fa 06 	lds	r24, 0x06FA
    53b0:	84 30       	cpi	r24, 0x04	; 4
    53b2:	51 f4       	brne	.+20     	; 0x53c8 <ClockEditMode+0x130>
			P->DAY++;
    53b4:	e0 91 9f 01 	lds	r30, 0x019F
    53b8:	f0 91 a0 01 	lds	r31, 0x01A0
    53bc:	86 81       	ldd	r24, Z+6	; 0x06
    53be:	8f 5f       	subi	r24, 0xFF	; 255
    53c0:	86 83       	std	Z+6, r24	; 0x06
			clock_EDITp();
    53c2:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
    53c6:	23 c0       	rjmp	.+70     	; 0x540e <ClockEditMode+0x176>
		} else if (EDIT_flag == 5U) {
    53c8:	80 91 fa 06 	lds	r24, 0x06FA
    53cc:	85 30       	cpi	r24, 0x05	; 5
    53ce:	51 f4       	brne	.+20     	; 0x53e4 <ClockEditMode+0x14c>
			P->MONTH++;
    53d0:	e0 91 9f 01 	lds	r30, 0x019F
    53d4:	f0 91 a0 01 	lds	r31, 0x01A0
    53d8:	87 81       	ldd	r24, Z+7	; 0x07
    53da:	8f 5f       	subi	r24, 0xFF	; 255
    53dc:	87 83       	std	Z+7, r24	; 0x07
			clock_EDITp();
    53de:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
    53e2:	15 c0       	rjmp	.+42     	; 0x540e <ClockEditMode+0x176>
		} else if (EDIT_flag == 6U) {
    53e4:	80 91 fa 06 	lds	r24, 0x06FA
    53e8:	86 30       	cpi	r24, 0x06	; 6
    53ea:	89 f4       	brne	.+34     	; 0x540e <ClockEditMode+0x176>
			P->YEAR++;
    53ec:	e0 91 9f 01 	lds	r30, 0x019F
    53f0:	f0 91 a0 01 	lds	r31, 0x01A0
    53f4:	80 85       	ldd	r24, Z+8	; 0x08
    53f6:	91 85       	ldd	r25, Z+9	; 0x09
    53f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    53fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	a1 1d       	adc	r26, r1
    5400:	b1 1d       	adc	r27, r1
    5402:	80 87       	std	Z+8, r24	; 0x08
    5404:	91 87       	std	Z+9, r25	; 0x09
    5406:	a2 87       	std	Z+10, r26	; 0x0a
    5408:	b3 87       	std	Z+11, r27	; 0x0b
			clock_EDITp();
    540a:	0e 94 81 27 	call	0x4f02	; 0x4f02 <clock_EDITp>
		} else {
		}
	}
}
    540e:	cf 91       	pop	r28
    5410:	df 91       	pop	r29
    5412:	08 95       	ret

00005414 <__mulsi3>:
    5414:	62 9f       	mul	r22, r18
    5416:	d0 01       	movw	r26, r0
    5418:	73 9f       	mul	r23, r19
    541a:	f0 01       	movw	r30, r0
    541c:	82 9f       	mul	r24, r18
    541e:	e0 0d       	add	r30, r0
    5420:	f1 1d       	adc	r31, r1
    5422:	64 9f       	mul	r22, r20
    5424:	e0 0d       	add	r30, r0
    5426:	f1 1d       	adc	r31, r1
    5428:	92 9f       	mul	r25, r18
    542a:	f0 0d       	add	r31, r0
    542c:	83 9f       	mul	r24, r19
    542e:	f0 0d       	add	r31, r0
    5430:	74 9f       	mul	r23, r20
    5432:	f0 0d       	add	r31, r0
    5434:	65 9f       	mul	r22, r21
    5436:	f0 0d       	add	r31, r0
    5438:	99 27       	eor	r25, r25
    543a:	72 9f       	mul	r23, r18
    543c:	b0 0d       	add	r27, r0
    543e:	e1 1d       	adc	r30, r1
    5440:	f9 1f       	adc	r31, r25
    5442:	63 9f       	mul	r22, r19
    5444:	b0 0d       	add	r27, r0
    5446:	e1 1d       	adc	r30, r1
    5448:	f9 1f       	adc	r31, r25
    544a:	bd 01       	movw	r22, r26
    544c:	cf 01       	movw	r24, r30
    544e:	11 24       	eor	r1, r1
    5450:	08 95       	ret

00005452 <__udivmodhi4>:
    5452:	aa 1b       	sub	r26, r26
    5454:	bb 1b       	sub	r27, r27
    5456:	51 e1       	ldi	r21, 0x11	; 17
    5458:	07 c0       	rjmp	.+14     	; 0x5468 <__udivmodhi4_ep>

0000545a <__udivmodhi4_loop>:
    545a:	aa 1f       	adc	r26, r26
    545c:	bb 1f       	adc	r27, r27
    545e:	a6 17       	cp	r26, r22
    5460:	b7 07       	cpc	r27, r23
    5462:	10 f0       	brcs	.+4      	; 0x5468 <__udivmodhi4_ep>
    5464:	a6 1b       	sub	r26, r22
    5466:	b7 0b       	sbc	r27, r23

00005468 <__udivmodhi4_ep>:
    5468:	88 1f       	adc	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	5a 95       	dec	r21
    546e:	a9 f7       	brne	.-22     	; 0x545a <__udivmodhi4_loop>
    5470:	80 95       	com	r24
    5472:	90 95       	com	r25
    5474:	bc 01       	movw	r22, r24
    5476:	cd 01       	movw	r24, r26
    5478:	08 95       	ret

0000547a <__prologue_saves__>:
    547a:	2f 92       	push	r2
    547c:	3f 92       	push	r3
    547e:	4f 92       	push	r4
    5480:	5f 92       	push	r5
    5482:	6f 92       	push	r6
    5484:	7f 92       	push	r7
    5486:	8f 92       	push	r8
    5488:	9f 92       	push	r9
    548a:	af 92       	push	r10
    548c:	bf 92       	push	r11
    548e:	cf 92       	push	r12
    5490:	df 92       	push	r13
    5492:	ef 92       	push	r14
    5494:	ff 92       	push	r15
    5496:	0f 93       	push	r16
    5498:	1f 93       	push	r17
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	cd b7       	in	r28, 0x3d	; 61
    54a0:	de b7       	in	r29, 0x3e	; 62
    54a2:	ca 1b       	sub	r28, r26
    54a4:	db 0b       	sbc	r29, r27
    54a6:	0f b6       	in	r0, 0x3f	; 63
    54a8:	f8 94       	cli
    54aa:	de bf       	out	0x3e, r29	; 62
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	cd bf       	out	0x3d, r28	; 61
    54b0:	09 94       	ijmp

000054b2 <__epilogue_restores__>:
    54b2:	2a 88       	ldd	r2, Y+18	; 0x12
    54b4:	39 88       	ldd	r3, Y+17	; 0x11
    54b6:	48 88       	ldd	r4, Y+16	; 0x10
    54b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    54ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    54bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    54be:	8c 84       	ldd	r8, Y+12	; 0x0c
    54c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    54c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    54c4:	b9 84       	ldd	r11, Y+9	; 0x09
    54c6:	c8 84       	ldd	r12, Y+8	; 0x08
    54c8:	df 80       	ldd	r13, Y+7	; 0x07
    54ca:	ee 80       	ldd	r14, Y+6	; 0x06
    54cc:	fd 80       	ldd	r15, Y+5	; 0x05
    54ce:	0c 81       	ldd	r16, Y+4	; 0x04
    54d0:	1b 81       	ldd	r17, Y+3	; 0x03
    54d2:	aa 81       	ldd	r26, Y+2	; 0x02
    54d4:	b9 81       	ldd	r27, Y+1	; 0x01
    54d6:	ce 0f       	add	r28, r30
    54d8:	d1 1d       	adc	r29, r1
    54da:	0f b6       	in	r0, 0x3f	; 63
    54dc:	f8 94       	cli
    54de:	de bf       	out	0x3e, r29	; 62
    54e0:	0f be       	out	0x3f, r0	; 63
    54e2:	cd bf       	out	0x3d, r28	; 61
    54e4:	ed 01       	movw	r28, r26
    54e6:	08 95       	ret

000054e8 <memcpy>:
    54e8:	fb 01       	movw	r30, r22
    54ea:	dc 01       	movw	r26, r24
    54ec:	02 c0       	rjmp	.+4      	; 0x54f2 <memcpy+0xa>
    54ee:	01 90       	ld	r0, Z+
    54f0:	0d 92       	st	X+, r0
    54f2:	41 50       	subi	r20, 0x01	; 1
    54f4:	50 40       	sbci	r21, 0x00	; 0
    54f6:	d8 f7       	brcc	.-10     	; 0x54ee <memcpy+0x6>
    54f8:	08 95       	ret

000054fa <memset>:
    54fa:	dc 01       	movw	r26, r24
    54fc:	01 c0       	rjmp	.+2      	; 0x5500 <memset+0x6>
    54fe:	6d 93       	st	X+, r22
    5500:	41 50       	subi	r20, 0x01	; 1
    5502:	50 40       	sbci	r21, 0x00	; 0
    5504:	e0 f7       	brcc	.-8      	; 0x54fe <memset+0x4>
    5506:	08 95       	ret

00005508 <strncpy>:
    5508:	fb 01       	movw	r30, r22
    550a:	dc 01       	movw	r26, r24
    550c:	41 50       	subi	r20, 0x01	; 1
    550e:	50 40       	sbci	r21, 0x00	; 0
    5510:	48 f0       	brcs	.+18     	; 0x5524 <strncpy+0x1c>
    5512:	01 90       	ld	r0, Z+
    5514:	0d 92       	st	X+, r0
    5516:	00 20       	and	r0, r0
    5518:	c9 f7       	brne	.-14     	; 0x550c <strncpy+0x4>
    551a:	01 c0       	rjmp	.+2      	; 0x551e <strncpy+0x16>
    551c:	1d 92       	st	X+, r1
    551e:	41 50       	subi	r20, 0x01	; 1
    5520:	50 40       	sbci	r21, 0x00	; 0
    5522:	e0 f7       	brcc	.-8      	; 0x551c <strncpy+0x14>
    5524:	08 95       	ret

00005526 <sprintf>:
    5526:	ae e0       	ldi	r26, 0x0E	; 14
    5528:	b0 e0       	ldi	r27, 0x00	; 0
    552a:	e9 e9       	ldi	r30, 0x99	; 153
    552c:	fa e2       	ldi	r31, 0x2A	; 42
    552e:	0c 94 4b 2a 	jmp	0x5496	; 0x5496 <__prologue_saves__+0x1c>
    5532:	0d 89       	ldd	r16, Y+21	; 0x15
    5534:	1e 89       	ldd	r17, Y+22	; 0x16
    5536:	86 e0       	ldi	r24, 0x06	; 6
    5538:	8c 83       	std	Y+4, r24	; 0x04
    553a:	1a 83       	std	Y+2, r17	; 0x02
    553c:	09 83       	std	Y+1, r16	; 0x01
    553e:	8f ef       	ldi	r24, 0xFF	; 255
    5540:	9f e7       	ldi	r25, 0x7F	; 127
    5542:	9e 83       	std	Y+6, r25	; 0x06
    5544:	8d 83       	std	Y+5, r24	; 0x05
    5546:	9e 01       	movw	r18, r28
    5548:	27 5e       	subi	r18, 0xE7	; 231
    554a:	3f 4f       	sbci	r19, 0xFF	; 255
    554c:	ce 01       	movw	r24, r28
    554e:	01 96       	adiw	r24, 0x01	; 1
    5550:	6f 89       	ldd	r22, Y+23	; 0x17
    5552:	78 8d       	ldd	r23, Y+24	; 0x18
    5554:	a9 01       	movw	r20, r18
    5556:	0e 94 b7 2a 	call	0x556e	; 0x556e <vfprintf>
    555a:	2f 81       	ldd	r18, Y+7	; 0x07
    555c:	38 85       	ldd	r19, Y+8	; 0x08
    555e:	02 0f       	add	r16, r18
    5560:	13 1f       	adc	r17, r19
    5562:	f8 01       	movw	r30, r16
    5564:	10 82       	st	Z, r1
    5566:	2e 96       	adiw	r28, 0x0e	; 14
    5568:	e4 e0       	ldi	r30, 0x04	; 4
    556a:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__epilogue_restores__+0x1c>

0000556e <vfprintf>:
    556e:	ab e0       	ldi	r26, 0x0B	; 11
    5570:	b0 e0       	ldi	r27, 0x00	; 0
    5572:	ed eb       	ldi	r30, 0xBD	; 189
    5574:	fa e2       	ldi	r31, 0x2A	; 42
    5576:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <__prologue_saves__>
    557a:	3c 01       	movw	r6, r24
    557c:	2b 01       	movw	r4, r22
    557e:	5a 01       	movw	r10, r20
    5580:	fc 01       	movw	r30, r24
    5582:	17 82       	std	Z+7, r1	; 0x07
    5584:	16 82       	std	Z+6, r1	; 0x06
    5586:	83 81       	ldd	r24, Z+3	; 0x03
    5588:	81 fd       	sbrc	r24, 1
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <vfprintf+0x24>
    558c:	6f ef       	ldi	r22, 0xFF	; 255
    558e:	7f ef       	ldi	r23, 0xFF	; 255
    5590:	c6 c1       	rjmp	.+908    	; 0x591e <vfprintf+0x3b0>
    5592:	9a e0       	ldi	r25, 0x0A	; 10
    5594:	89 2e       	mov	r8, r25
    5596:	1e 01       	movw	r2, r28
    5598:	08 94       	sec
    559a:	21 1c       	adc	r2, r1
    559c:	31 1c       	adc	r3, r1
    559e:	f3 01       	movw	r30, r6
    55a0:	23 81       	ldd	r18, Z+3	; 0x03
    55a2:	f2 01       	movw	r30, r4
    55a4:	23 fd       	sbrc	r18, 3
    55a6:	85 91       	lpm	r24, Z+
    55a8:	23 ff       	sbrs	r18, 3
    55aa:	81 91       	ld	r24, Z+
    55ac:	2f 01       	movw	r4, r30
    55ae:	88 23       	and	r24, r24
    55b0:	09 f4       	brne	.+2      	; 0x55b4 <vfprintf+0x46>
    55b2:	b2 c1       	rjmp	.+868    	; 0x5918 <vfprintf+0x3aa>
    55b4:	85 32       	cpi	r24, 0x25	; 37
    55b6:	39 f4       	brne	.+14     	; 0x55c6 <vfprintf+0x58>
    55b8:	23 fd       	sbrc	r18, 3
    55ba:	85 91       	lpm	r24, Z+
    55bc:	23 ff       	sbrs	r18, 3
    55be:	81 91       	ld	r24, Z+
    55c0:	2f 01       	movw	r4, r30
    55c2:	85 32       	cpi	r24, 0x25	; 37
    55c4:	29 f4       	brne	.+10     	; 0x55d0 <vfprintf+0x62>
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	b3 01       	movw	r22, r6
    55ca:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    55ce:	e7 cf       	rjmp	.-50     	; 0x559e <vfprintf+0x30>
    55d0:	98 2f       	mov	r25, r24
    55d2:	ff 24       	eor	r15, r15
    55d4:	ee 24       	eor	r14, r14
    55d6:	99 24       	eor	r9, r9
    55d8:	ff e1       	ldi	r31, 0x1F	; 31
    55da:	ff 15       	cp	r31, r15
    55dc:	d0 f0       	brcs	.+52     	; 0x5612 <vfprintf+0xa4>
    55de:	9b 32       	cpi	r25, 0x2B	; 43
    55e0:	69 f0       	breq	.+26     	; 0x55fc <vfprintf+0x8e>
    55e2:	9c 32       	cpi	r25, 0x2C	; 44
    55e4:	28 f4       	brcc	.+10     	; 0x55f0 <vfprintf+0x82>
    55e6:	90 32       	cpi	r25, 0x20	; 32
    55e8:	59 f0       	breq	.+22     	; 0x5600 <vfprintf+0x92>
    55ea:	93 32       	cpi	r25, 0x23	; 35
    55ec:	91 f4       	brne	.+36     	; 0x5612 <vfprintf+0xa4>
    55ee:	0e c0       	rjmp	.+28     	; 0x560c <vfprintf+0x9e>
    55f0:	9d 32       	cpi	r25, 0x2D	; 45
    55f2:	49 f0       	breq	.+18     	; 0x5606 <vfprintf+0x98>
    55f4:	90 33       	cpi	r25, 0x30	; 48
    55f6:	69 f4       	brne	.+26     	; 0x5612 <vfprintf+0xa4>
    55f8:	41 e0       	ldi	r20, 0x01	; 1
    55fa:	24 c0       	rjmp	.+72     	; 0x5644 <vfprintf+0xd6>
    55fc:	52 e0       	ldi	r21, 0x02	; 2
    55fe:	f5 2a       	or	r15, r21
    5600:	84 e0       	ldi	r24, 0x04	; 4
    5602:	f8 2a       	or	r15, r24
    5604:	28 c0       	rjmp	.+80     	; 0x5656 <vfprintf+0xe8>
    5606:	98 e0       	ldi	r25, 0x08	; 8
    5608:	f9 2a       	or	r15, r25
    560a:	25 c0       	rjmp	.+74     	; 0x5656 <vfprintf+0xe8>
    560c:	e0 e1       	ldi	r30, 0x10	; 16
    560e:	fe 2a       	or	r15, r30
    5610:	22 c0       	rjmp	.+68     	; 0x5656 <vfprintf+0xe8>
    5612:	f7 fc       	sbrc	r15, 7
    5614:	29 c0       	rjmp	.+82     	; 0x5668 <vfprintf+0xfa>
    5616:	89 2f       	mov	r24, r25
    5618:	80 53       	subi	r24, 0x30	; 48
    561a:	8a 30       	cpi	r24, 0x0A	; 10
    561c:	70 f4       	brcc	.+28     	; 0x563a <vfprintf+0xcc>
    561e:	f6 fe       	sbrs	r15, 6
    5620:	05 c0       	rjmp	.+10     	; 0x562c <vfprintf+0xbe>
    5622:	98 9c       	mul	r9, r8
    5624:	90 2c       	mov	r9, r0
    5626:	11 24       	eor	r1, r1
    5628:	98 0e       	add	r9, r24
    562a:	15 c0       	rjmp	.+42     	; 0x5656 <vfprintf+0xe8>
    562c:	e8 9c       	mul	r14, r8
    562e:	e0 2c       	mov	r14, r0
    5630:	11 24       	eor	r1, r1
    5632:	e8 0e       	add	r14, r24
    5634:	f0 e2       	ldi	r31, 0x20	; 32
    5636:	ff 2a       	or	r15, r31
    5638:	0e c0       	rjmp	.+28     	; 0x5656 <vfprintf+0xe8>
    563a:	9e 32       	cpi	r25, 0x2E	; 46
    563c:	29 f4       	brne	.+10     	; 0x5648 <vfprintf+0xda>
    563e:	f6 fc       	sbrc	r15, 6
    5640:	6b c1       	rjmp	.+726    	; 0x5918 <vfprintf+0x3aa>
    5642:	40 e4       	ldi	r20, 0x40	; 64
    5644:	f4 2a       	or	r15, r20
    5646:	07 c0       	rjmp	.+14     	; 0x5656 <vfprintf+0xe8>
    5648:	9c 36       	cpi	r25, 0x6C	; 108
    564a:	19 f4       	brne	.+6      	; 0x5652 <vfprintf+0xe4>
    564c:	50 e8       	ldi	r21, 0x80	; 128
    564e:	f5 2a       	or	r15, r21
    5650:	02 c0       	rjmp	.+4      	; 0x5656 <vfprintf+0xe8>
    5652:	98 36       	cpi	r25, 0x68	; 104
    5654:	49 f4       	brne	.+18     	; 0x5668 <vfprintf+0xfa>
    5656:	f2 01       	movw	r30, r4
    5658:	23 fd       	sbrc	r18, 3
    565a:	95 91       	lpm	r25, Z+
    565c:	23 ff       	sbrs	r18, 3
    565e:	91 91       	ld	r25, Z+
    5660:	2f 01       	movw	r4, r30
    5662:	99 23       	and	r25, r25
    5664:	09 f0       	breq	.+2      	; 0x5668 <vfprintf+0xfa>
    5666:	b8 cf       	rjmp	.-144    	; 0x55d8 <vfprintf+0x6a>
    5668:	89 2f       	mov	r24, r25
    566a:	85 54       	subi	r24, 0x45	; 69
    566c:	83 30       	cpi	r24, 0x03	; 3
    566e:	18 f0       	brcs	.+6      	; 0x5676 <vfprintf+0x108>
    5670:	80 52       	subi	r24, 0x20	; 32
    5672:	83 30       	cpi	r24, 0x03	; 3
    5674:	38 f4       	brcc	.+14     	; 0x5684 <vfprintf+0x116>
    5676:	44 e0       	ldi	r20, 0x04	; 4
    5678:	50 e0       	ldi	r21, 0x00	; 0
    567a:	a4 0e       	add	r10, r20
    567c:	b5 1e       	adc	r11, r21
    567e:	5f e3       	ldi	r21, 0x3F	; 63
    5680:	59 83       	std	Y+1, r21	; 0x01
    5682:	0f c0       	rjmp	.+30     	; 0x56a2 <vfprintf+0x134>
    5684:	93 36       	cpi	r25, 0x63	; 99
    5686:	31 f0       	breq	.+12     	; 0x5694 <vfprintf+0x126>
    5688:	93 37       	cpi	r25, 0x73	; 115
    568a:	79 f0       	breq	.+30     	; 0x56aa <vfprintf+0x13c>
    568c:	93 35       	cpi	r25, 0x53	; 83
    568e:	09 f0       	breq	.+2      	; 0x5692 <vfprintf+0x124>
    5690:	56 c0       	rjmp	.+172    	; 0x573e <vfprintf+0x1d0>
    5692:	20 c0       	rjmp	.+64     	; 0x56d4 <vfprintf+0x166>
    5694:	f5 01       	movw	r30, r10
    5696:	80 81       	ld	r24, Z
    5698:	89 83       	std	Y+1, r24	; 0x01
    569a:	42 e0       	ldi	r20, 0x02	; 2
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	a4 0e       	add	r10, r20
    56a0:	b5 1e       	adc	r11, r21
    56a2:	61 01       	movw	r12, r2
    56a4:	01 e0       	ldi	r16, 0x01	; 1
    56a6:	10 e0       	ldi	r17, 0x00	; 0
    56a8:	12 c0       	rjmp	.+36     	; 0x56ce <vfprintf+0x160>
    56aa:	f5 01       	movw	r30, r10
    56ac:	c0 80       	ld	r12, Z
    56ae:	d1 80       	ldd	r13, Z+1	; 0x01
    56b0:	f6 fc       	sbrc	r15, 6
    56b2:	03 c0       	rjmp	.+6      	; 0x56ba <vfprintf+0x14c>
    56b4:	6f ef       	ldi	r22, 0xFF	; 255
    56b6:	7f ef       	ldi	r23, 0xFF	; 255
    56b8:	02 c0       	rjmp	.+4      	; 0x56be <vfprintf+0x150>
    56ba:	69 2d       	mov	r22, r9
    56bc:	70 e0       	ldi	r23, 0x00	; 0
    56be:	42 e0       	ldi	r20, 0x02	; 2
    56c0:	50 e0       	ldi	r21, 0x00	; 0
    56c2:	a4 0e       	add	r10, r20
    56c4:	b5 1e       	adc	r11, r21
    56c6:	c6 01       	movw	r24, r12
    56c8:	0e 94 9f 2c 	call	0x593e	; 0x593e <strnlen>
    56cc:	8c 01       	movw	r16, r24
    56ce:	5f e7       	ldi	r21, 0x7F	; 127
    56d0:	f5 22       	and	r15, r21
    56d2:	14 c0       	rjmp	.+40     	; 0x56fc <vfprintf+0x18e>
    56d4:	f5 01       	movw	r30, r10
    56d6:	c0 80       	ld	r12, Z
    56d8:	d1 80       	ldd	r13, Z+1	; 0x01
    56da:	f6 fc       	sbrc	r15, 6
    56dc:	03 c0       	rjmp	.+6      	; 0x56e4 <vfprintf+0x176>
    56de:	6f ef       	ldi	r22, 0xFF	; 255
    56e0:	7f ef       	ldi	r23, 0xFF	; 255
    56e2:	02 c0       	rjmp	.+4      	; 0x56e8 <vfprintf+0x17a>
    56e4:	69 2d       	mov	r22, r9
    56e6:	70 e0       	ldi	r23, 0x00	; 0
    56e8:	42 e0       	ldi	r20, 0x02	; 2
    56ea:	50 e0       	ldi	r21, 0x00	; 0
    56ec:	a4 0e       	add	r10, r20
    56ee:	b5 1e       	adc	r11, r21
    56f0:	c6 01       	movw	r24, r12
    56f2:	0e 94 94 2c 	call	0x5928	; 0x5928 <strnlen_P>
    56f6:	8c 01       	movw	r16, r24
    56f8:	50 e8       	ldi	r21, 0x80	; 128
    56fa:	f5 2a       	or	r15, r21
    56fc:	f3 fe       	sbrs	r15, 3
    56fe:	07 c0       	rjmp	.+14     	; 0x570e <vfprintf+0x1a0>
    5700:	1a c0       	rjmp	.+52     	; 0x5736 <vfprintf+0x1c8>
    5702:	80 e2       	ldi	r24, 0x20	; 32
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	b3 01       	movw	r22, r6
    5708:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    570c:	ea 94       	dec	r14
    570e:	8e 2d       	mov	r24, r14
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	08 17       	cp	r16, r24
    5714:	19 07       	cpc	r17, r25
    5716:	a8 f3       	brcs	.-22     	; 0x5702 <vfprintf+0x194>
    5718:	0e c0       	rjmp	.+28     	; 0x5736 <vfprintf+0x1c8>
    571a:	f6 01       	movw	r30, r12
    571c:	f7 fc       	sbrc	r15, 7
    571e:	85 91       	lpm	r24, Z+
    5720:	f7 fe       	sbrs	r15, 7
    5722:	81 91       	ld	r24, Z+
    5724:	6f 01       	movw	r12, r30
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	b3 01       	movw	r22, r6
    572a:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    572e:	e1 10       	cpse	r14, r1
    5730:	ea 94       	dec	r14
    5732:	01 50       	subi	r16, 0x01	; 1
    5734:	10 40       	sbci	r17, 0x00	; 0
    5736:	01 15       	cp	r16, r1
    5738:	11 05       	cpc	r17, r1
    573a:	79 f7       	brne	.-34     	; 0x571a <vfprintf+0x1ac>
    573c:	ea c0       	rjmp	.+468    	; 0x5912 <vfprintf+0x3a4>
    573e:	94 36       	cpi	r25, 0x64	; 100
    5740:	11 f0       	breq	.+4      	; 0x5746 <vfprintf+0x1d8>
    5742:	99 36       	cpi	r25, 0x69	; 105
    5744:	69 f5       	brne	.+90     	; 0x57a0 <vfprintf+0x232>
    5746:	f7 fe       	sbrs	r15, 7
    5748:	08 c0       	rjmp	.+16     	; 0x575a <vfprintf+0x1ec>
    574a:	f5 01       	movw	r30, r10
    574c:	20 81       	ld	r18, Z
    574e:	31 81       	ldd	r19, Z+1	; 0x01
    5750:	42 81       	ldd	r20, Z+2	; 0x02
    5752:	53 81       	ldd	r21, Z+3	; 0x03
    5754:	84 e0       	ldi	r24, 0x04	; 4
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	0a c0       	rjmp	.+20     	; 0x576e <vfprintf+0x200>
    575a:	f5 01       	movw	r30, r10
    575c:	80 81       	ld	r24, Z
    575e:	91 81       	ldd	r25, Z+1	; 0x01
    5760:	9c 01       	movw	r18, r24
    5762:	44 27       	eor	r20, r20
    5764:	37 fd       	sbrc	r19, 7
    5766:	40 95       	com	r20
    5768:	54 2f       	mov	r21, r20
    576a:	82 e0       	ldi	r24, 0x02	; 2
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	a8 0e       	add	r10, r24
    5770:	b9 1e       	adc	r11, r25
    5772:	9f e6       	ldi	r25, 0x6F	; 111
    5774:	f9 22       	and	r15, r25
    5776:	57 ff       	sbrs	r21, 7
    5778:	09 c0       	rjmp	.+18     	; 0x578c <vfprintf+0x21e>
    577a:	50 95       	com	r21
    577c:	40 95       	com	r20
    577e:	30 95       	com	r19
    5780:	21 95       	neg	r18
    5782:	3f 4f       	sbci	r19, 0xFF	; 255
    5784:	4f 4f       	sbci	r20, 0xFF	; 255
    5786:	5f 4f       	sbci	r21, 0xFF	; 255
    5788:	e0 e8       	ldi	r30, 0x80	; 128
    578a:	fe 2a       	or	r15, r30
    578c:	ca 01       	movw	r24, r20
    578e:	b9 01       	movw	r22, r18
    5790:	a1 01       	movw	r20, r2
    5792:	2a e0       	ldi	r18, 0x0A	; 10
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__ultoa_invert>
    579a:	d8 2e       	mov	r13, r24
    579c:	d2 18       	sub	r13, r2
    579e:	40 c0       	rjmp	.+128    	; 0x5820 <vfprintf+0x2b2>
    57a0:	95 37       	cpi	r25, 0x75	; 117
    57a2:	29 f4       	brne	.+10     	; 0x57ae <vfprintf+0x240>
    57a4:	1f 2d       	mov	r17, r15
    57a6:	1f 7e       	andi	r17, 0xEF	; 239
    57a8:	2a e0       	ldi	r18, 0x0A	; 10
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	1d c0       	rjmp	.+58     	; 0x57e8 <vfprintf+0x27a>
    57ae:	1f 2d       	mov	r17, r15
    57b0:	19 7f       	andi	r17, 0xF9	; 249
    57b2:	9f 36       	cpi	r25, 0x6F	; 111
    57b4:	61 f0       	breq	.+24     	; 0x57ce <vfprintf+0x260>
    57b6:	90 37       	cpi	r25, 0x70	; 112
    57b8:	20 f4       	brcc	.+8      	; 0x57c2 <vfprintf+0x254>
    57ba:	98 35       	cpi	r25, 0x58	; 88
    57bc:	09 f0       	breq	.+2      	; 0x57c0 <vfprintf+0x252>
    57be:	ac c0       	rjmp	.+344    	; 0x5918 <vfprintf+0x3aa>
    57c0:	0f c0       	rjmp	.+30     	; 0x57e0 <vfprintf+0x272>
    57c2:	90 37       	cpi	r25, 0x70	; 112
    57c4:	39 f0       	breq	.+14     	; 0x57d4 <vfprintf+0x266>
    57c6:	98 37       	cpi	r25, 0x78	; 120
    57c8:	09 f0       	breq	.+2      	; 0x57cc <vfprintf+0x25e>
    57ca:	a6 c0       	rjmp	.+332    	; 0x5918 <vfprintf+0x3aa>
    57cc:	04 c0       	rjmp	.+8      	; 0x57d6 <vfprintf+0x268>
    57ce:	28 e0       	ldi	r18, 0x08	; 8
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	0a c0       	rjmp	.+20     	; 0x57e8 <vfprintf+0x27a>
    57d4:	10 61       	ori	r17, 0x10	; 16
    57d6:	14 fd       	sbrc	r17, 4
    57d8:	14 60       	ori	r17, 0x04	; 4
    57da:	20 e1       	ldi	r18, 0x10	; 16
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	04 c0       	rjmp	.+8      	; 0x57e8 <vfprintf+0x27a>
    57e0:	14 fd       	sbrc	r17, 4
    57e2:	16 60       	ori	r17, 0x06	; 6
    57e4:	20 e1       	ldi	r18, 0x10	; 16
    57e6:	32 e0       	ldi	r19, 0x02	; 2
    57e8:	17 ff       	sbrs	r17, 7
    57ea:	08 c0       	rjmp	.+16     	; 0x57fc <vfprintf+0x28e>
    57ec:	f5 01       	movw	r30, r10
    57ee:	60 81       	ld	r22, Z
    57f0:	71 81       	ldd	r23, Z+1	; 0x01
    57f2:	82 81       	ldd	r24, Z+2	; 0x02
    57f4:	93 81       	ldd	r25, Z+3	; 0x03
    57f6:	44 e0       	ldi	r20, 0x04	; 4
    57f8:	50 e0       	ldi	r21, 0x00	; 0
    57fa:	08 c0       	rjmp	.+16     	; 0x580c <vfprintf+0x29e>
    57fc:	f5 01       	movw	r30, r10
    57fe:	80 81       	ld	r24, Z
    5800:	91 81       	ldd	r25, Z+1	; 0x01
    5802:	bc 01       	movw	r22, r24
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	42 e0       	ldi	r20, 0x02	; 2
    580a:	50 e0       	ldi	r21, 0x00	; 0
    580c:	a4 0e       	add	r10, r20
    580e:	b5 1e       	adc	r11, r21
    5810:	a1 01       	movw	r20, r2
    5812:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__ultoa_invert>
    5816:	d8 2e       	mov	r13, r24
    5818:	d2 18       	sub	r13, r2
    581a:	8f e7       	ldi	r24, 0x7F	; 127
    581c:	f8 2e       	mov	r15, r24
    581e:	f1 22       	and	r15, r17
    5820:	f6 fe       	sbrs	r15, 6
    5822:	0b c0       	rjmp	.+22     	; 0x583a <vfprintf+0x2cc>
    5824:	5e ef       	ldi	r21, 0xFE	; 254
    5826:	f5 22       	and	r15, r21
    5828:	d9 14       	cp	r13, r9
    582a:	38 f4       	brcc	.+14     	; 0x583a <vfprintf+0x2cc>
    582c:	f4 fe       	sbrs	r15, 4
    582e:	07 c0       	rjmp	.+14     	; 0x583e <vfprintf+0x2d0>
    5830:	f2 fc       	sbrc	r15, 2
    5832:	05 c0       	rjmp	.+10     	; 0x583e <vfprintf+0x2d0>
    5834:	8f ee       	ldi	r24, 0xEF	; 239
    5836:	f8 22       	and	r15, r24
    5838:	02 c0       	rjmp	.+4      	; 0x583e <vfprintf+0x2d0>
    583a:	1d 2d       	mov	r17, r13
    583c:	01 c0       	rjmp	.+2      	; 0x5840 <vfprintf+0x2d2>
    583e:	19 2d       	mov	r17, r9
    5840:	f4 fe       	sbrs	r15, 4
    5842:	0d c0       	rjmp	.+26     	; 0x585e <vfprintf+0x2f0>
    5844:	fe 01       	movw	r30, r28
    5846:	ed 0d       	add	r30, r13
    5848:	f1 1d       	adc	r31, r1
    584a:	80 81       	ld	r24, Z
    584c:	80 33       	cpi	r24, 0x30	; 48
    584e:	19 f4       	brne	.+6      	; 0x5856 <vfprintf+0x2e8>
    5850:	99 ee       	ldi	r25, 0xE9	; 233
    5852:	f9 22       	and	r15, r25
    5854:	08 c0       	rjmp	.+16     	; 0x5866 <vfprintf+0x2f8>
    5856:	1f 5f       	subi	r17, 0xFF	; 255
    5858:	f2 fe       	sbrs	r15, 2
    585a:	05 c0       	rjmp	.+10     	; 0x5866 <vfprintf+0x2f8>
    585c:	03 c0       	rjmp	.+6      	; 0x5864 <vfprintf+0x2f6>
    585e:	8f 2d       	mov	r24, r15
    5860:	86 78       	andi	r24, 0x86	; 134
    5862:	09 f0       	breq	.+2      	; 0x5866 <vfprintf+0x2f8>
    5864:	1f 5f       	subi	r17, 0xFF	; 255
    5866:	0f 2d       	mov	r16, r15
    5868:	f3 fc       	sbrc	r15, 3
    586a:	14 c0       	rjmp	.+40     	; 0x5894 <vfprintf+0x326>
    586c:	f0 fe       	sbrs	r15, 0
    586e:	0f c0       	rjmp	.+30     	; 0x588e <vfprintf+0x320>
    5870:	1e 15       	cp	r17, r14
    5872:	10 f0       	brcs	.+4      	; 0x5878 <vfprintf+0x30a>
    5874:	9d 2c       	mov	r9, r13
    5876:	0b c0       	rjmp	.+22     	; 0x588e <vfprintf+0x320>
    5878:	9d 2c       	mov	r9, r13
    587a:	9e 0c       	add	r9, r14
    587c:	91 1a       	sub	r9, r17
    587e:	1e 2d       	mov	r17, r14
    5880:	06 c0       	rjmp	.+12     	; 0x588e <vfprintf+0x320>
    5882:	80 e2       	ldi	r24, 0x20	; 32
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	b3 01       	movw	r22, r6
    5888:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    588c:	1f 5f       	subi	r17, 0xFF	; 255
    588e:	1e 15       	cp	r17, r14
    5890:	c0 f3       	brcs	.-16     	; 0x5882 <vfprintf+0x314>
    5892:	04 c0       	rjmp	.+8      	; 0x589c <vfprintf+0x32e>
    5894:	1e 15       	cp	r17, r14
    5896:	10 f4       	brcc	.+4      	; 0x589c <vfprintf+0x32e>
    5898:	e1 1a       	sub	r14, r17
    589a:	01 c0       	rjmp	.+2      	; 0x589e <vfprintf+0x330>
    589c:	ee 24       	eor	r14, r14
    589e:	04 ff       	sbrs	r16, 4
    58a0:	0f c0       	rjmp	.+30     	; 0x58c0 <vfprintf+0x352>
    58a2:	80 e3       	ldi	r24, 0x30	; 48
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	b3 01       	movw	r22, r6
    58a8:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    58ac:	02 ff       	sbrs	r16, 2
    58ae:	1d c0       	rjmp	.+58     	; 0x58ea <vfprintf+0x37c>
    58b0:	01 fd       	sbrc	r16, 1
    58b2:	03 c0       	rjmp	.+6      	; 0x58ba <vfprintf+0x34c>
    58b4:	88 e7       	ldi	r24, 0x78	; 120
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	0e c0       	rjmp	.+28     	; 0x58d6 <vfprintf+0x368>
    58ba:	88 e5       	ldi	r24, 0x58	; 88
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	0b c0       	rjmp	.+22     	; 0x58d6 <vfprintf+0x368>
    58c0:	80 2f       	mov	r24, r16
    58c2:	86 78       	andi	r24, 0x86	; 134
    58c4:	91 f0       	breq	.+36     	; 0x58ea <vfprintf+0x37c>
    58c6:	01 ff       	sbrs	r16, 1
    58c8:	02 c0       	rjmp	.+4      	; 0x58ce <vfprintf+0x360>
    58ca:	8b e2       	ldi	r24, 0x2B	; 43
    58cc:	01 c0       	rjmp	.+2      	; 0x58d0 <vfprintf+0x362>
    58ce:	80 e2       	ldi	r24, 0x20	; 32
    58d0:	f7 fc       	sbrc	r15, 7
    58d2:	8d e2       	ldi	r24, 0x2D	; 45
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	b3 01       	movw	r22, r6
    58d8:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    58dc:	06 c0       	rjmp	.+12     	; 0x58ea <vfprintf+0x37c>
    58de:	80 e3       	ldi	r24, 0x30	; 48
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	b3 01       	movw	r22, r6
    58e4:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    58e8:	9a 94       	dec	r9
    58ea:	d9 14       	cp	r13, r9
    58ec:	c0 f3       	brcs	.-16     	; 0x58de <vfprintf+0x370>
    58ee:	da 94       	dec	r13
    58f0:	f1 01       	movw	r30, r2
    58f2:	ed 0d       	add	r30, r13
    58f4:	f1 1d       	adc	r31, r1
    58f6:	80 81       	ld	r24, Z
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	b3 01       	movw	r22, r6
    58fc:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    5900:	dd 20       	and	r13, r13
    5902:	a9 f7       	brne	.-22     	; 0x58ee <vfprintf+0x380>
    5904:	06 c0       	rjmp	.+12     	; 0x5912 <vfprintf+0x3a4>
    5906:	80 e2       	ldi	r24, 0x20	; 32
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	b3 01       	movw	r22, r6
    590c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <fputc>
    5910:	ea 94       	dec	r14
    5912:	ee 20       	and	r14, r14
    5914:	c1 f7       	brne	.-16     	; 0x5906 <vfprintf+0x398>
    5916:	43 ce       	rjmp	.-890    	; 0x559e <vfprintf+0x30>
    5918:	f3 01       	movw	r30, r6
    591a:	66 81       	ldd	r22, Z+6	; 0x06
    591c:	77 81       	ldd	r23, Z+7	; 0x07
    591e:	cb 01       	movw	r24, r22
    5920:	2b 96       	adiw	r28, 0x0b	; 11
    5922:	e2 e1       	ldi	r30, 0x12	; 18
    5924:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <__epilogue_restores__>

00005928 <strnlen_P>:
    5928:	fc 01       	movw	r30, r24
    592a:	05 90       	lpm	r0, Z+
    592c:	61 50       	subi	r22, 0x01	; 1
    592e:	70 40       	sbci	r23, 0x00	; 0
    5930:	01 10       	cpse	r0, r1
    5932:	d8 f7       	brcc	.-10     	; 0x592a <strnlen_P+0x2>
    5934:	80 95       	com	r24
    5936:	90 95       	com	r25
    5938:	8e 0f       	add	r24, r30
    593a:	9f 1f       	adc	r25, r31
    593c:	08 95       	ret

0000593e <strnlen>:
    593e:	fc 01       	movw	r30, r24
    5940:	61 50       	subi	r22, 0x01	; 1
    5942:	70 40       	sbci	r23, 0x00	; 0
    5944:	01 90       	ld	r0, Z+
    5946:	01 10       	cpse	r0, r1
    5948:	d8 f7       	brcc	.-10     	; 0x5940 <strnlen+0x2>
    594a:	80 95       	com	r24
    594c:	90 95       	com	r25
    594e:	8e 0f       	add	r24, r30
    5950:	9f 1f       	adc	r25, r31
    5952:	08 95       	ret

00005954 <fputc>:
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	8c 01       	movw	r16, r24
    595e:	eb 01       	movw	r28, r22
    5960:	8b 81       	ldd	r24, Y+3	; 0x03
    5962:	81 ff       	sbrs	r24, 1
    5964:	1b c0       	rjmp	.+54     	; 0x599c <fputc+0x48>
    5966:	82 ff       	sbrs	r24, 2
    5968:	0d c0       	rjmp	.+26     	; 0x5984 <fputc+0x30>
    596a:	2e 81       	ldd	r18, Y+6	; 0x06
    596c:	3f 81       	ldd	r19, Y+7	; 0x07
    596e:	8c 81       	ldd	r24, Y+4	; 0x04
    5970:	9d 81       	ldd	r25, Y+5	; 0x05
    5972:	28 17       	cp	r18, r24
    5974:	39 07       	cpc	r19, r25
    5976:	64 f4       	brge	.+24     	; 0x5990 <fputc+0x3c>
    5978:	e8 81       	ld	r30, Y
    597a:	f9 81       	ldd	r31, Y+1	; 0x01
    597c:	01 93       	st	Z+, r16
    597e:	f9 83       	std	Y+1, r31	; 0x01
    5980:	e8 83       	st	Y, r30
    5982:	06 c0       	rjmp	.+12     	; 0x5990 <fputc+0x3c>
    5984:	e8 85       	ldd	r30, Y+8	; 0x08
    5986:	f9 85       	ldd	r31, Y+9	; 0x09
    5988:	80 2f       	mov	r24, r16
    598a:	09 95       	icall
    598c:	89 2b       	or	r24, r25
    598e:	31 f4       	brne	.+12     	; 0x599c <fputc+0x48>
    5990:	8e 81       	ldd	r24, Y+6	; 0x06
    5992:	9f 81       	ldd	r25, Y+7	; 0x07
    5994:	01 96       	adiw	r24, 0x01	; 1
    5996:	9f 83       	std	Y+7, r25	; 0x07
    5998:	8e 83       	std	Y+6, r24	; 0x06
    599a:	02 c0       	rjmp	.+4      	; 0x59a0 <fputc+0x4c>
    599c:	0f ef       	ldi	r16, 0xFF	; 255
    599e:	1f ef       	ldi	r17, 0xFF	; 255
    59a0:	c8 01       	movw	r24, r16
    59a2:	df 91       	pop	r29
    59a4:	cf 91       	pop	r28
    59a6:	1f 91       	pop	r17
    59a8:	0f 91       	pop	r16
    59aa:	08 95       	ret

000059ac <__ultoa_invert>:
    59ac:	fa 01       	movw	r30, r20
    59ae:	aa 27       	eor	r26, r26
    59b0:	28 30       	cpi	r18, 0x08	; 8
    59b2:	51 f1       	breq	.+84     	; 0x5a08 <__ultoa_invert+0x5c>
    59b4:	20 31       	cpi	r18, 0x10	; 16
    59b6:	81 f1       	breq	.+96     	; 0x5a18 <__ultoa_invert+0x6c>
    59b8:	e8 94       	clt
    59ba:	6f 93       	push	r22
    59bc:	6e 7f       	andi	r22, 0xFE	; 254
    59be:	6e 5f       	subi	r22, 0xFE	; 254
    59c0:	7f 4f       	sbci	r23, 0xFF	; 255
    59c2:	8f 4f       	sbci	r24, 0xFF	; 255
    59c4:	9f 4f       	sbci	r25, 0xFF	; 255
    59c6:	af 4f       	sbci	r26, 0xFF	; 255
    59c8:	b1 e0       	ldi	r27, 0x01	; 1
    59ca:	3e d0       	rcall	.+124    	; 0x5a48 <__ultoa_invert+0x9c>
    59cc:	b4 e0       	ldi	r27, 0x04	; 4
    59ce:	3c d0       	rcall	.+120    	; 0x5a48 <__ultoa_invert+0x9c>
    59d0:	67 0f       	add	r22, r23
    59d2:	78 1f       	adc	r23, r24
    59d4:	89 1f       	adc	r24, r25
    59d6:	9a 1f       	adc	r25, r26
    59d8:	a1 1d       	adc	r26, r1
    59da:	68 0f       	add	r22, r24
    59dc:	79 1f       	adc	r23, r25
    59de:	8a 1f       	adc	r24, r26
    59e0:	91 1d       	adc	r25, r1
    59e2:	a1 1d       	adc	r26, r1
    59e4:	6a 0f       	add	r22, r26
    59e6:	71 1d       	adc	r23, r1
    59e8:	81 1d       	adc	r24, r1
    59ea:	91 1d       	adc	r25, r1
    59ec:	a1 1d       	adc	r26, r1
    59ee:	20 d0       	rcall	.+64     	; 0x5a30 <__ultoa_invert+0x84>
    59f0:	09 f4       	brne	.+2      	; 0x59f4 <__ultoa_invert+0x48>
    59f2:	68 94       	set
    59f4:	3f 91       	pop	r19
    59f6:	2a e0       	ldi	r18, 0x0A	; 10
    59f8:	26 9f       	mul	r18, r22
    59fa:	11 24       	eor	r1, r1
    59fc:	30 19       	sub	r19, r0
    59fe:	30 5d       	subi	r19, 0xD0	; 208
    5a00:	31 93       	st	Z+, r19
    5a02:	de f6       	brtc	.-74     	; 0x59ba <__ultoa_invert+0xe>
    5a04:	cf 01       	movw	r24, r30
    5a06:	08 95       	ret
    5a08:	46 2f       	mov	r20, r22
    5a0a:	47 70       	andi	r20, 0x07	; 7
    5a0c:	40 5d       	subi	r20, 0xD0	; 208
    5a0e:	41 93       	st	Z+, r20
    5a10:	b3 e0       	ldi	r27, 0x03	; 3
    5a12:	0f d0       	rcall	.+30     	; 0x5a32 <__ultoa_invert+0x86>
    5a14:	c9 f7       	brne	.-14     	; 0x5a08 <__ultoa_invert+0x5c>
    5a16:	f6 cf       	rjmp	.-20     	; 0x5a04 <__ultoa_invert+0x58>
    5a18:	46 2f       	mov	r20, r22
    5a1a:	4f 70       	andi	r20, 0x0F	; 15
    5a1c:	40 5d       	subi	r20, 0xD0	; 208
    5a1e:	4a 33       	cpi	r20, 0x3A	; 58
    5a20:	18 f0       	brcs	.+6      	; 0x5a28 <__ultoa_invert+0x7c>
    5a22:	49 5d       	subi	r20, 0xD9	; 217
    5a24:	31 fd       	sbrc	r19, 1
    5a26:	40 52       	subi	r20, 0x20	; 32
    5a28:	41 93       	st	Z+, r20
    5a2a:	02 d0       	rcall	.+4      	; 0x5a30 <__ultoa_invert+0x84>
    5a2c:	a9 f7       	brne	.-22     	; 0x5a18 <__ultoa_invert+0x6c>
    5a2e:	ea cf       	rjmp	.-44     	; 0x5a04 <__ultoa_invert+0x58>
    5a30:	b4 e0       	ldi	r27, 0x04	; 4
    5a32:	a6 95       	lsr	r26
    5a34:	97 95       	ror	r25
    5a36:	87 95       	ror	r24
    5a38:	77 95       	ror	r23
    5a3a:	67 95       	ror	r22
    5a3c:	ba 95       	dec	r27
    5a3e:	c9 f7       	brne	.-14     	; 0x5a32 <__ultoa_invert+0x86>
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	61 05       	cpc	r22, r1
    5a44:	71 05       	cpc	r23, r1
    5a46:	08 95       	ret
    5a48:	9b 01       	movw	r18, r22
    5a4a:	ac 01       	movw	r20, r24
    5a4c:	0a 2e       	mov	r0, r26
    5a4e:	06 94       	lsr	r0
    5a50:	57 95       	ror	r21
    5a52:	47 95       	ror	r20
    5a54:	37 95       	ror	r19
    5a56:	27 95       	ror	r18
    5a58:	ba 95       	dec	r27
    5a5a:	c9 f7       	brne	.-14     	; 0x5a4e <__ultoa_invert+0xa2>
    5a5c:	62 0f       	add	r22, r18
    5a5e:	73 1f       	adc	r23, r19
    5a60:	84 1f       	adc	r24, r20
    5a62:	95 1f       	adc	r25, r21
    5a64:	a0 1d       	adc	r26, r0
    5a66:	08 95       	ret

00005a68 <_exit>:
    5a68:	f8 94       	cli

00005a6a <__stop_program>:
    5a6a:	ff cf       	rjmp	.-2      	; 0x5a6a <__stop_program>
